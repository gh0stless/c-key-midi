
obj-m162/c=key.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00001d66  00001dfa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d66  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000085  00800110  00800110  00001e0a  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00001e0a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001e1c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000240  00000000  00000000  00001e58  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003627  00000000  00000000  00002098  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b39  00000000  00000000  000056bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001f4c  00000000  00000000  000061f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004b4  00000000  00000000  00008144  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000daa  00000000  00000000  000085f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000269b  00000000  00000000  000093a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003a0  00000000  00000000  0000ba3d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d8 01 	jmp	0x3b0	; 0x3b0 <__ctors_end>
       4:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
       8:	0c 94 c8 08 	jmp	0x1190	; 0x1190 <__vector_2>
       c:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
      10:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
      14:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
      18:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
      1c:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
      20:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
      24:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
      28:	0c 94 35 0d 	jmp	0x1a6a	; 0x1a6a <__vector_10>
      2c:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
      30:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
      34:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
      38:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
      3c:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
      40:	0c 94 6d 09 	jmp	0x12da	; 0x12da <__vector_16>
      44:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
      48:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
      4c:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
      50:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
      54:	0c 94 a1 08 	jmp	0x1142	; 0x1142 <__vector_21>
      58:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
      5c:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
      60:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
      64:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
      68:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
      6c:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	14 15       	cp	r17, r4
      72:	24 25       	eor	r18, r4
      74:	04 05       	cpc	r16, r4
      76:	05 05       	cpc	r16, r5
      78:	35 35       	cpi	r19, 0x55	; 85
      7a:	15 15       	cp	r17, r5
      7c:	25 25       	eor	r18, r5
      7e:	34 35       	cpi	r19, 0x54	; 84
      80:	68 69       	ori	r22, 0x98	; 152
      82:	72 73       	andi	r23, 0x32	; 50
      84:	5a 5b       	subi	r21, 0xBA	; 186
      86:	78 94       	sei
      88:	7c 1c       	adc	r7, r12
      8a:	46 7d       	andi	r20, 0xD6	; 214
      8c:	74 2e       	mov	r7, r20
      8e:	bc 8f       	std	Y+28, r27	; 0x1c
      90:	8e 75       	andi	r24, 0x5E	; 94
      92:	1e a4       	ldd	r1, Y+46	; 0x2e
      94:	b4 b5       	in	r27, 0x24	; 36
      96:	47 79       	andi	r20, 0x97	; 151
      98:	a5 95       	asr	r26
      9a:	2c 86       	std	Y+12, r2	; 0x0c
      9c:	1f 2f       	mov	r17, r31
      9e:	0e 0f       	add	r16, r30
      a0:	4a 4a       	sbci	r20, 0xAA	; 170
      a2:	70 70       	andi	r23, 0x00	; 0
      a4:	46 46       	sbci	r20, 0x66	; 102
      a6:	bc bc       	out	0x2c, r11	; 44
      a8:	84 84       	ldd	r8, Z+12	; 0x0c
      aa:	78 78       	andi	r23, 0x88	; 136
      ac:	4e 4e       	sbci	r20, 0xEE	; 238
      ae:	7c 7c       	andi	r23, 0xCC	; 204
      b0:	74 74       	andi	r23, 0x44	; 68
      b2:	7a 7b       	andi	r23, 0xBA	; 186
      b4:	86 86       	std	Z+14, r8	; 0x0e
      b6:	42 42       	sbci	r20, 0x22	; 34
      b8:	b4 b4       	in	r11, 0x24	; 36
      ba:	2e 2e       	mov	r2, r30
      bc:	8e 8e       	std	Y+30, r8	; 0x1e
      be:	fe ff       	.word	0xfffe	; ????
      c0:	fe ff       	.word	0xfffe	; ????
      c2:	fe bd       	out	0x2e, r31	; 46
      c4:	fe 87       	std	Y+14, r31	; 0x0e
      c6:	fe 2d       	mov	r31, r14
      c8:	fe 1d       	adc	r31, r14
      ca:	14 15       	cp	r17, r4
      cc:	24 25       	eor	r18, r4
      ce:	04 05       	cpc	r16, r4
      d0:	05 05       	cpc	r16, r5
      d2:	35 35       	cpi	r19, 0x55	; 85
      d4:	15 15       	cp	r17, r5
      d6:	25 25       	eor	r18, r5
      d8:	34 35       	cpi	r19, 0x54	; 84
      da:	68 69       	ori	r22, 0x98	; 152
      dc:	72 73       	andi	r23, 0x32	; 50
      de:	5a 5b       	subi	r21, 0xBA	; 186
      e0:	78 94       	sei
      e2:	7c 1c       	adc	r7, r12
      e4:	46 7d       	andi	r20, 0xD6	; 214
      e6:	74 2e       	mov	r7, r20
      e8:	bc 8f       	std	Y+28, r27	; 0x1c
      ea:	8e 75       	andi	r24, 0x5E	; 94
      ec:	1e a4       	ldd	r1, Y+46	; 0x2e
      ee:	b4 b5       	in	r27, 0x24	; 36
      f0:	47 79       	andi	r20, 0x97	; 151
      f2:	a5 95       	asr	r26
      f4:	2c 86       	std	Y+12, r2	; 0x0c
      f6:	1f 2f       	mov	r17, r31
      f8:	0e 0f       	add	r16, r30
      fa:	ba bb       	out	0x1a, r27	; 26
      fc:	a8 a9       	ldd	r26, Y+48	; 0x30
      fe:	98 99       	sbic	0x13, 0	; 19
     100:	2a 2b       	or	r18, r26
     102:	1a 1b       	sub	r17, r26
     104:	88 89       	ldd	r24, Y+16	; 0x10
     106:	9a 9b       	sbis	0x13, 2	; 19
     108:	a0 a1       	ldd	r26, Z+32	; 0x20
     10a:	aa ab       	std	Y+50, r26	; 0x32
     10c:	82 83       	std	Z+2, r24	; 0x02
     10e:	a2 a3       	std	Z+34, r26	; 0x22
     110:	b2 b3       	in	r27, 0x12	; 18
     112:	92 93       	st	-Z, r25
     114:	2e 2e       	mov	r2, r30
     116:	90 91 3a b0 	lds	r25, 0xB03A	; 0x80b03a <__bss_end+0xaea5>
     11a:	b8 b9       	out	0x08, r27	; 8
     11c:	fe bd       	out	0x2e, r31	; 46
     11e:	fe 87       	std	Y+14, r31	; 0x0e
     120:	fe 2d       	mov	r31, r14
     122:	fe 1d       	adc	r31, r14
     124:	14 15       	cp	r17, r4
     126:	24 25       	eor	r18, r4
     128:	04 05       	cpc	r16, r4
     12a:	05 05       	cpc	r16, r5
     12c:	35 35       	cpi	r19, 0x55	; 85
     12e:	15 15       	cp	r17, r5
     130:	25 25       	eor	r18, r5
     132:	34 35       	cpi	r19, 0x54	; 84
     134:	ff ff       	.word	0xffff	; ????
     136:	72 73       	andi	r23, 0x32	; 50
     138:	68 69       	ori	r22, 0x98	; 152
     13a:	78 79       	andi	r23, 0x98	; 152
     13c:	7c 7d       	andi	r23, 0xDC	; 220
     13e:	46 47       	sbci	r20, 0x76	; 118
     140:	74 75       	andi	r23, 0x54	; 84
     142:	bc bd       	out	0x2c, r27	; 44
     144:	8e 8f       	std	Y+30, r24	; 0x1e
     146:	a4 a5       	ldd	r26, Z+44	; 0x2c
     148:	86 87       	std	Z+14, r24	; 0x0e
     14a:	1e 1f       	adc	r17, r30
     14c:	94 95       	.word	0x9594	; ????
     14e:	b4 b5       	in	r27, 0x24	; 36
     150:	2e 2f       	mov	r18, r30
     152:	0e 0f       	add	r16, r30
     154:	4a 4a       	sbci	r20, 0xAA	; 170
     156:	70 70       	andi	r23, 0x00	; 0
     158:	46 46       	sbci	r20, 0x66	; 102
     15a:	bc bc       	out	0x2c, r11	; 44
     15c:	84 84       	ldd	r8, Z+12	; 0x0c
     15e:	78 78       	andi	r23, 0x88	; 136
     160:	4e 4e       	sbci	r20, 0xEE	; 238
     162:	7c 7c       	andi	r23, 0xCC	; 204
     164:	74 74       	andi	r23, 0x44	; 68
     166:	7a 7b       	andi	r23, 0xBA	; 186
     168:	86 86       	std	Z+14, r8	; 0x0e
     16a:	42 42       	sbci	r20, 0x22	; 34
     16c:	b4 b4       	in	r11, 0x24	; 36
     16e:	2e 2e       	mov	r2, r30
     170:	8e 8e       	std	Y+30, r8	; 0x1e
     172:	ff ff       	.word	0xffff	; ????
     174:	5a 5b       	subi	r21, 0xBA	; 186
     176:	fe bd       	out	0x2e, r31	; 46
     178:	fe 87       	std	Y+14, r31	; 0x0e
     17a:	fe 2d       	mov	r31, r14
     17c:	fe 1d       	adc	r31, r14
     17e:	14 15       	cp	r17, r4
     180:	24 25       	eor	r18, r4
     182:	04 05       	cpc	r16, r4
     184:	05 05       	cpc	r16, r5
     186:	35 35       	cpi	r19, 0x55	; 85
     188:	15 15       	cp	r17, r5
     18a:	25 25       	eor	r18, r5
     18c:	34 35       	cpi	r19, 0x54	; 84
     18e:	ff ff       	.word	0xffff	; ????
     190:	72 73       	andi	r23, 0x32	; 50
     192:	68 69       	ori	r22, 0x98	; 152
     194:	78 79       	andi	r23, 0x98	; 152
     196:	7c 7d       	andi	r23, 0xDC	; 220
     198:	46 47       	sbci	r20, 0x76	; 118
     19a:	74 75       	andi	r23, 0x54	; 84
     19c:	bc bd       	out	0x2c, r27	; 44
     19e:	8e 8f       	std	Y+30, r24	; 0x1e
     1a0:	a4 a5       	ldd	r26, Z+44	; 0x2c
     1a2:	86 87       	std	Z+14, r24	; 0x0e
     1a4:	1e 1f       	adc	r17, r30
     1a6:	94 95       	.word	0x9594	; ????
     1a8:	b4 b5       	in	r27, 0x24	; 36
     1aa:	2e 2f       	mov	r18, r30
     1ac:	0e 0f       	add	r16, r30
     1ae:	ba bb       	out	0x1a, r27	; 26
     1b0:	a8 a9       	ldd	r26, Y+48	; 0x30
     1b2:	98 99       	sbic	0x13, 0	; 19
     1b4:	2a 2b       	or	r18, r26
     1b6:	1a 1b       	sub	r17, r26
     1b8:	88 89       	ldd	r24, Y+16	; 0x10
     1ba:	9a 9b       	sbis	0x13, 2	; 19
     1bc:	a0 a1       	ldd	r26, Z+32	; 0x20
     1be:	aa ab       	std	Y+50, r26	; 0x32
     1c0:	7a 7b       	andi	r23, 0xBA	; 186
     1c2:	a2 a3       	std	Z+34, r26	; 0x22
     1c4:	b2 b3       	in	r27, 0x12	; 18
     1c6:	92 93       	st	-Z, r25
     1c8:	2e 2e       	mov	r2, r30
     1ca:	90 91 ff ff 	lds	r25, 0xFFFF	; 0x80ffff <__bss_end+0xfe6a>
     1ce:	5a 5b       	subi	r21, 0xBA	; 186
     1d0:	fe bd       	out	0x2e, r31	; 46
     1d2:	fe 87       	std	Y+14, r31	; 0x0e
     1d4:	fe 2d       	mov	r31, r14
     1d6:	fe 1d       	adc	r31, r14

000001d8 <normal.lto_priv.11>:
     1d8:	fe e9 ff c0 c1 c2 c3 ec ff ea c4 c5 c6 e8 6a ff     ..............j.
     1e8:	ff c8 c9 ff ca 58 4a ff ff ff 40 60 52 62 cb ff     .....XJ...@`Rb..
     1f8:	ff 4c 7e 5e 50 70 42 ff ff 48 76 6c 5c 6e 4e ff     .L~^PpB..Hvl\nN.
     208:	ff be 44 64 56 66 cc ff ff ff 8c 9e 54 cd ce ff     ..DdVf......T...
     218:	ff b6 ac ae 9c cf d0 ff ff 84 3e 96 d1 a6 d2 ff     ..........>.....
     228:	ff ff d3 ff d4 d5 ff ff fe 0c 26 d6 ff d7 ff ff     ..........&.....
     238:	ff ff ff ff ff ff 06 ff ff d8 ff d9 da ff ff ff     ................
     248:	db dc dd de df e0 e1 fe eb e2 e3 e4 e5 e6 e7 ff     ................
     258:	ff ff ff c7                                         ....

0000025c <joy_mapping>:
     25c:	00 24 00 1d 00 1b 00 22 00 21 00 2a 00 2b 00 2d     .$.....".!.*.+.-
     26c:	00 29 00 75 00 6c 00 6b 00 69 00 72 00 7a 00 74     .).u.l.k.i.r.z.t
     27c:	00 7d 00 70                                         .}.p

00000280 <joy_table>:
     280:	04 00 00 10 00 08 02 01 00 02 08 04 10 00 00 01     ................

00000290 <layouts.lto_priv.16>:
     290:	00 1e 01 52 00 36 01 3d 00 3d 00 52 00 3e 01 46     ...R.6.=.=.R.>.F
     2a0:	00 46 01 45 00 45 02 71 01 55 02 70 01 1e 01 54     .F.E.E.q.U.p...T
     2b0:	01 3e 01 5b 01 4c 00 54 00 4c 00 5b 00 55 00 7a     .>.[.L.T.L.[.U.z
     2c0:	01 36 00 7d 00 14 01 14 00 0e 01 0e 00 11 01 11     .6.}............
     2d0:	00 76 01 76 02 6c 03 6c 00 83 00 0a 00 03 00 0b     .v.v.l.l........
     2e0:	00 04 00 0c 00 05 00 06 02 72 02 75 02 74 02 6b     .........r.u.t.k
     2f0:	00 4e 01 4e 00 1e 01 1e 00 36 01 36 00 3d 01 3d     .N.N.....6.6.=.=
     300:	00 3e 01 3e 00 46 01 46 00 45 01 45 00 4e 01 4e     .>.>.F.F.E.E.N.N
     310:	00 54 01 54 00 5b 01 5b 00 4c 01 4c 00 52 01 52     .T.T.[.[.L.L.R.R
     320:	00 5d 01 5d 02 71 03 71 00 0d 01 0d 00 0e 01 0e     .].].q.q........
     330:	00 14 01 14 00 76 01 76 02 6c 03 6c 00 83 00 0a     .....v.v.l.l....
     340:	00 03 00 0b 00 04 00 0c 00 05 00 06 00 72 00 75     .............r.u
     350:	00 74 00 6b 01 55 01 55                             .t.k.U.U

00000358 <normal.lto_priv.12>:
     358:	c0 15 cf 29 d0 cd ce 16 25 24 1b 1a 12 1c 1d 26     ...)....%$.....&
     368:	c1 2c 2b 21 22 23 2d 2e c3 3c 33 32 2a 34 35 c2     .,+!"#-..<32*45.
     378:	c5 44 42 3a 31 3b 43 c4 d8 c7 c9 49 41 4b 4d c6     .DB:1;C....IAKM.
     388:	d1 cc cb 59 4a ca c8 5d d2 d3 d4 d5 d6 d7 5a 66     ...YJ..]......Zf
     398:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     3a8:	ff ff ff ff ff ff ff ff                             ........

000003b0 <__ctors_end>:
     3b0:	11 24       	eor	r1, r1
     3b2:	1f be       	out	0x3f, r1	; 63
     3b4:	cf ef       	ldi	r28, 0xFF	; 255
     3b6:	d4 e0       	ldi	r29, 0x04	; 4
     3b8:	de bf       	out	0x3e, r29	; 62
     3ba:	cd bf       	out	0x3d, r28	; 61

000003bc <__do_clear_bss>:
     3bc:	21 e0       	ldi	r18, 0x01	; 1
     3be:	a0 e1       	ldi	r26, 0x10	; 16
     3c0:	b1 e0       	ldi	r27, 0x01	; 1
     3c2:	01 c0       	rjmp	.+2      	; 0x3c6 <.do_clear_bss_start>

000003c4 <.do_clear_bss_loop>:
     3c4:	1d 92       	st	X+, r1

000003c6 <.do_clear_bss_start>:
     3c6:	a5 39       	cpi	r26, 0x95	; 149
     3c8:	b2 07       	cpc	r27, r18
     3ca:	e1 f7       	brne	.-8      	; 0x3c4 <.do_clear_bss_loop>

000003cc <__do_copy_data>:
     3cc:	11 e0       	ldi	r17, 0x01	; 1
     3ce:	a0 e0       	ldi	r26, 0x00	; 0
     3d0:	b1 e0       	ldi	r27, 0x01	; 1
     3d2:	e6 e6       	ldi	r30, 0x66	; 102
     3d4:	fd e1       	ldi	r31, 0x1D	; 29
     3d6:	02 c0       	rjmp	.+4      	; 0x3dc <__do_copy_data+0x10>
     3d8:	05 90       	lpm	r0, Z+
     3da:	0d 92       	st	X+, r0
     3dc:	a0 31       	cpi	r26, 0x10	; 16
     3de:	b1 07       	cpc	r27, r17
     3e0:	d9 f7       	brne	.-10     	; 0x3d8 <__do_copy_data+0xc>
     3e2:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <main>
     3e6:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <_exit>

000003ea <__bad_interrupt>:
     3ea:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003ee <LED_init.constprop.1>:
 * 
 */
static uint8_t led_program[8];

void LED_init(uint8_t led) {
  LED_DDR |=(1<<led);
     3ee:	8f 9a       	sbi	0x11, 7	; 17
  led_mask|=(1<<led);
     3f0:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <led_mask>
     3f4:	80 68       	ori	r24, 0x80	; 128
     3f6:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <led_mask>
  led_program[led]=0xff; 
  led_count[led]=0;
} 

void LED_off(uint8_t led) {
  led_program[led]=0; 
     3fa:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <led_program+0x7>
  led_count[led]=0;
     3fe:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <led_count+0x7>

void LED_init(uint8_t led) {
  LED_DDR |=(1<<led);
  led_mask|=(1<<led);
  LED_off(led);
}
     402:	08 95       	ret

00000404 <sw_init.constprop.0>:
  }
}

void sw_init(uint8_t mask) {
  // bring them HI-Z
  PORT_SW_OUT |= mask;
     404:	87 b1       	in	r24, 0x07	; 7
     406:	87 60       	ori	r24, 0x07	; 7
     408:	87 b9       	out	0x07, r24	; 7
  // bring them to inputs;
  PORT_SW_DDR &= (uint8_t)~mask;
     40a:	86 b1       	in	r24, 0x06	; 6
     40c:	88 7f       	andi	r24, 0xF8	; 248
     40e:	86 b9       	out	0x06, r24	; 6
  in_mask = mask;
     410:	87 e0       	ldi	r24, 0x07	; 7
     412:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <in_mask>
  cache=(PORT_SW_IN & mask);
     416:	85 b1       	in	r24, 0x05	; 5
     418:	87 70       	andi	r24, 0x07	; 7
     41a:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <cache>
}
     41e:	08 95       	ret

00000420 <uart0_putc>:
uint8_t uart_data_available(void) __attribute__ ((weak, alias("uart0_data_available")));

void uart0_putc(uint8_t data) {
#if defined UART0_TX_BUFFER_SHIFT && UART0_TX_BUFFER_SHIFT > 0
  /* Calculate buffer index */
  uint8_t t = (tx0_head + 1) & (sizeof(tx0_buf) - 1);
     420:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <tx0_head>
     424:	9f 5f       	subi	r25, 0xFF	; 255
     426:	97 70       	andi	r25, 0x07	; 7
  while(t == tx0_tail);  /* Wait for free space in buffer */
     428:	20 91 7a 01 	lds	r18, 0x017A	; 0x80017a <tx0_tail>
     42c:	29 17       	cp	r18, r25
     42e:	e1 f3       	breq	.-8      	; 0x428 <uart0_putc+0x8>

  tx0_buf[tx0_head] = data;    /* Store data in buffer */
     430:	e0 91 7b 01 	lds	r30, 0x017B	; 0x80017b <tx0_head>
     434:	f0 e0       	ldi	r31, 0x00	; 0
     436:	ee 58       	subi	r30, 0x8E	; 142
     438:	fe 4f       	sbci	r31, 0xFE	; 254
     43a:	80 83       	st	Z, r24
  tx0_head = t;                /* Store new index */
     43c:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <tx0_head>
  UCSRAB |= _BV(UDRIEA);       /* Enable UDR0E interrupt */
     440:	55 9a       	sbi	0x0a, 5	; 10
#else
  loop_until_bit_is_set(UCSRAA,UDREA);
  UDRA = data;
#endif
}
     442:	08 95       	ret

00000444 <ioputc>:
  }
}
void uart_trace(void *ptr, uint16_t start, uint16_t len) __attribute__ ((weak, alias("uart0_trace")));


static int ioputc(char c, FILE *stream) {
     444:	cf 93       	push	r28
     446:	c8 2f       	mov	r28, r24
  (void) stream;
  if (c == '\n')
     448:	8a 30       	cpi	r24, 0x0A	; 10
     44a:	19 f4       	brne	.+6      	; 0x452 <ioputc+0xe>
    uart0_putc('\r');
     44c:	8d e0       	ldi	r24, 0x0D	; 13
     44e:	0e 94 10 02 	call	0x420	; 0x420 <uart0_putc>
  uart0_putc(c);
     452:	8c 2f       	mov	r24, r28
     454:	0e 94 10 02 	call	0x420	; 0x420 <uart0_putc>
  return 0;
}
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	80 e0       	ldi	r24, 0x00	; 0
     45c:	cf 91       	pop	r28
     45e:	08 95       	ret

00000460 <uart0_puthex>:
  UART0_CONFIG(length, parity, stopbits);
}
void uart_config(uint16_t rate, uartlen_t length, uartpar_t parity, uartstop_t stopbits) __attribute__ ((weak, alias("uart0_config")));
#  endif

void uart0_puthex(uint8_t hex) {
     460:	cf 93       	push	r28
     462:	c8 2f       	mov	r28, r24
  uint8_t tmp = hex >> 4;
     464:	82 95       	swap	r24
     466:	8f 70       	andi	r24, 0x0F	; 15

  uart_putc(tmp>9?tmp - 10 + 'a':tmp + '0');
     468:	8a 30       	cpi	r24, 0x0A	; 10
     46a:	60 f0       	brcs	.+24     	; 0x484 <uart0_puthex+0x24>
     46c:	89 5a       	subi	r24, 0xA9	; 169
     46e:	0e 94 10 02 	call	0x420	; 0x420 <uart0_putc>
  tmp = hex & 0x0f;
     472:	8c 2f       	mov	r24, r28
     474:	8f 70       	andi	r24, 0x0F	; 15
  uart_putc(tmp>9?tmp - 10 + 'a':tmp + '0');
     476:	8a 30       	cpi	r24, 0x0A	; 10
     478:	38 f0       	brcs	.+14     	; 0x488 <uart0_puthex+0x28>
     47a:	89 5a       	subi	r24, 0xA9	; 169
     47c:	0e 94 10 02 	call	0x420	; 0x420 <uart0_putc>
}
     480:	cf 91       	pop	r28
     482:	08 95       	ret
#  endif

void uart0_puthex(uint8_t hex) {
  uint8_t tmp = hex >> 4;

  uart_putc(tmp>9?tmp - 10 + 'a':tmp + '0');
     484:	80 5d       	subi	r24, 0xD0	; 208
     486:	f3 cf       	rjmp	.-26     	; 0x46e <uart0_puthex+0xe>
  tmp = hex & 0x0f;
  uart_putc(tmp>9?tmp - 10 + 'a':tmp + '0');
     488:	80 5d       	subi	r24, 0xD0	; 208
     48a:	f8 cf       	rjmp	.-16     	; 0x47c <uart0_puthex+0x1c>

0000048c <sw_putc>:
}

void sw_putc( uint8_t sw) {
  // bit 7 indicates key up.
  uint8_t state=(sw & SW_UP);
  sw = _BV(sw); // turn into bit mask;
     48c:	21 e0       	ldi	r18, 0x01	; 1
     48e:	30 e0       	ldi	r19, 0x00	; 0
     490:	08 2e       	mov	r0, r24
     492:	01 c0       	rjmp	.+2      	; 0x496 <sw_putc+0xa>
     494:	22 0f       	add	r18, r18
     496:	0a 94       	dec	r0
     498:	ea f7       	brpl	.-6      	; 0x494 <sw_putc+0x8>
  if(sw & in_mask) {
     49a:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <in_mask>
     49e:	92 23       	and	r25, r18
     4a0:	89 f0       	breq	.+34     	; 0x4c4 <sw_putc+0x38>
     4a2:	42 2f       	mov	r20, r18
     4a4:	40 95       	com	r20
    if(state) {
     4a6:	87 ff       	sbrs	r24, 7
     4a8:	07 c0       	rjmp	.+14     	; 0x4b8 <sw_putc+0x2c>
      // bring to input and set HI-Z
      PORT_SW_DDR &= (uint8_t)~sw;
     4aa:	86 b1       	in	r24, 0x06	; 6
     4ac:	84 23       	and	r24, r20
     4ae:	86 b9       	out	0x06, r24	; 6
      PORT_SW_OUT |= sw;
     4b0:	87 b1       	in	r24, 0x07	; 7
     4b2:	28 2b       	or	r18, r24
     4b4:	27 b9       	out	0x07, r18	; 7
     4b6:	08 95       	ret
    } else {
      PORT_SW_DDR |= sw;
     4b8:	96 b1       	in	r25, 0x06	; 6
     4ba:	29 2b       	or	r18, r25
     4bc:	26 b9       	out	0x06, r18	; 6
      PORT_SW_OUT &= (uint8_t)~sw;
     4be:	87 b1       	in	r24, 0x07	; 7
     4c0:	84 23       	and	r24, r20
     4c2:	87 b9       	out	0x07, r24	; 7
    }
  }
}
     4c4:	08 95       	ret

000004c6 <sw_store>:
static uint8_t cache;
static uint8_t in_mask;

static void sw_store(uint8_t data) {
  
  rx_head = ( rx_head + 1 ) & (sizeof(rx_buf) - 1);  /* Calculate and store new index */
     4c6:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <rx_head.lto_priv.6>
     4ca:	9f 5f       	subi	r25, 0xFF	; 255
     4cc:	93 70       	andi	r25, 0x03	; 3
     4ce:	90 93 71 01 	sts	0x0171, r25	; 0x800171 <rx_head.lto_priv.6>

  if ( rx_head == rx_tail ) {
     4d2:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <rx_head.lto_priv.6>
     4d6:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <rx_tail.lto_priv.8>
    /* ERROR! Receive buffer overflow */
  }
  
  rx_buf[rx_head] = data; /* Store received data in buffer */
     4da:	e0 91 71 01 	lds	r30, 0x0171	; 0x800171 <rx_head.lto_priv.6>
     4de:	f0 e0       	ldi	r31, 0x00	; 0
     4e0:	e4 59       	subi	r30, 0x94	; 148
     4e2:	fe 4f       	sbci	r31, 0xFE	; 254
     4e4:	80 83       	st	Z, r24
}
     4e6:	08 95       	ret

000004e8 <get_joy_direction>:
  }
}

uint8_t get_joy_direction(uint8_t *joy) {
  uint8_t i=9;
  switch (*joy & 0x0f) {
     4e8:	dc 01       	movw	r26, r24
     4ea:	ec 91       	ld	r30, X
     4ec:	ef 70       	andi	r30, 0x0F	; 15
     4ee:	e1 50       	subi	r30, 0x01	; 1
     4f0:	ea 30       	cpi	r30, 0x0A	; 10
     4f2:	f8 f4       	brcc	.+62     	; 0x532 <__stack+0x33>
     4f4:	f0 e0       	ldi	r31, 0x00	; 0
     4f6:	e1 58       	subi	r30, 0x81	; 129
     4f8:	fd 4f       	sbci	r31, 0xFD	; 253
     4fa:	0c 94 74 0e 	jmp	0x1ce8	; 0x1ce8 <__tablejump2__>
     4fe:	89 02       	muls	r24, r25
     500:	91 02       	muls	r25, r17
     502:	99 02       	muls	r25, r25
     504:	95 02       	muls	r25, r21
     506:	97 02       	muls	r25, r23
     508:	93 02       	muls	r25, r19
     50a:	99 02       	muls	r25, r25
     50c:	8d 02       	muls	r24, r29
     50e:	8b 02       	muls	r24, r27
     510:	8f 02       	muls	r24, r31
    case POLL_JOY_UP:              // 0
      i=0;
     512:	80 e0       	ldi	r24, 0x00	; 0
     514:	08 95       	ret
      break;
    case POLL_JOY_UP | POLL_JOY_LEFT:   // 1
      i=1;
     516:	81 e0       	ldi	r24, 0x01	; 1
     518:	08 95       	ret
      break;
    case POLL_JOY_LEFT:            // 2
      i=2;
     51a:	82 e0       	ldi	r24, 0x02	; 2
     51c:	08 95       	ret
      break;
    case POLL_JOY_DOWN | POLL_JOY_LEFT: // 3
      i=3;
     51e:	83 e0       	ldi	r24, 0x03	; 3
     520:	08 95       	ret
      break;
    case POLL_JOY_DOWN:            // 4
      i=4;
     522:	84 e0       	ldi	r24, 0x04	; 4
     524:	08 95       	ret
      break;
    case POLL_JOY_DOWN | POLL_JOY_RIGHT:// 5
      i=5;
     526:	85 e0       	ldi	r24, 0x05	; 5
     528:	08 95       	ret
      break;
    case POLL_JOY_RIGHT:           // 6
      i=6;
     52a:	86 e0       	ldi	r24, 0x06	; 6
     52c:	08 95       	ret
      break;
    case POLL_JOY_RIGHT | POLL_JOY_UP:  // 7
      i=7;
     52e:	87 e0       	ldi	r24, 0x07	; 7
     530:	08 95       	ret
    }
  }
}

uint8_t get_joy_direction(uint8_t *joy) {
  uint8_t i=9;
     532:	89 e0       	ldi	r24, 0x09	; 9
    case POLL_JOY_RIGHT | POLL_JOY_UP:  // 7
      i=7;
      break;
  }
  return i;
}
     534:	08 95       	ret

00000536 <ps2_getc>:
}

uint8_t ps2_getc( void ) {
  uint8_t tmptail;

  while ( rx_head == rx_tail ) {
     536:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <rx_head.lto_priv.5>
     53a:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <rx_tail.lto_priv.7>
     53e:	98 17       	cp	r25, r24
     540:	d1 f3       	breq	.-12     	; 0x536 <ps2_getc>
    // wait for char to arrive, if none in Q
    ;
  }
  // Calculate buffer index
  tmptail = ( rx_tail + 1 ) & PS2_RX_BUFFER_MASK;
     542:	e0 91 57 01 	lds	r30, 0x0157	; 0x800157 <rx_tail.lto_priv.7>
     546:	ef 5f       	subi	r30, 0xFF	; 255
     548:	e7 70       	andi	r30, 0x07	; 7
  // Store new index
  rx_tail = tmptail;
     54a:	e0 93 57 01 	sts	0x0157, r30	; 0x800157 <rx_tail.lto_priv.7>
  return rxbuf[tmptail];
     54e:	f0 e0       	ldi	r31, 0x00	; 0
     550:	e1 5b       	subi	r30, 0xB1	; 177
     552:	fe 4f       	sbci	r31, 0xFE	; 254
}
     554:	80 81       	ld	r24, Z
     556:	08 95       	ret

00000558 <ps2_clear_buffers>:
  ps2_bit_count = 0;
  ps2_parity = 0;
}

void ps2_clear_buffers(void) {
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     558:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     55a:	f8 94       	cli
    tx_head = 0;
     55c:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <tx_head>
    tx_tail = 0;
     560:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <tx_tail>
    rx_head = 0;
     564:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <rx_head.lto_priv.5>
    rx_tail = 0;
     568:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <rx_tail.lto_priv.7>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     56c:	8f bf       	out	0x3f, r24	; 63
  }
}
     56e:	08 95       	ret

00000570 <ps2_write_parity>:
    ps2_parity++;
  }
}

static void ps2_write_parity(void) {
  if((ps2_parity & 1) == 1) {
     570:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <ps2_parity>
     574:	80 ff       	sbrs	r24, 0
     576:	03 c0       	rjmp	.+6      	; 0x57e <ps2_write_parity+0xe>
  PS2_DATA_OUT |= PS2_DATA_PIN;
  PS2_DATA_DDR &= (uint8_t)~PS2_DATA_PIN;
}

static inline __attribute__((always_inline)) void ps2_clear_data(void) {
  PS2_DATA_DDR |= PS2_DATA_PIN;
     578:	8a 9a       	sbi	0x11, 2	; 17
  PS2_DATA_OUT &= (uint8_t)~PS2_DATA_PIN;
     57a:	92 98       	cbi	0x12, 2	; 18
     57c:	08 95       	ret
static inline __attribute__((always_inline)) uint8_t ps2_read_clk(void) {
  return PS2_CLK_IN & PS2_CLK_PIN;
}

static inline __attribute__((always_inline)) void ps2_set_data(void) {
  PS2_DATA_OUT |= PS2_DATA_PIN;
     57e:	92 9a       	sbi	0x12, 2	; 18
  PS2_DATA_DDR &= (uint8_t)~PS2_DATA_PIN;
     580:	8a 98       	cbi	0x11, 2	; 17
    ps2_clear_data();
  } else {
    ps2_set_data();
  }
}
     582:	08 95       	ret

00000584 <ps2_read_bit>:
  ps2_bit_count++;
  // valid data now.
}

static void ps2_read_bit(void) {
  ps2_byte = ps2_byte >> 1;
     584:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <ps2_byte>
     588:	86 95       	lsr	r24
     58a:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <ps2_byte>
  ps2_bit_count++;
     58e:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <ps2_bit_count>
     592:	8f 5f       	subi	r24, 0xFF	; 255
     594:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <ps2_bit_count>
  if(ps2_read_data()) {
     598:	82 9b       	sbis	0x10, 2	; 16
     59a:	0a c0       	rjmp	.+20     	; 0x5b0 <ps2_read_bit+0x2c>
    ps2_byte |= 0x80;
     59c:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <ps2_byte>
     5a0:	80 68       	ori	r24, 0x80	; 128
     5a2:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <ps2_byte>
    ps2_parity++;
     5a6:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <ps2_parity>
     5aa:	8f 5f       	subi	r24, 0xFF	; 255
     5ac:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <ps2_parity>
  }
}
     5b0:	08 95       	ret

000005b2 <ps2_write_bit>:
static void ps2_commit_read_byte(void) {
  tx_tail = ( tx_tail + 1 ) & PS2_TX_BUFFER_MASK;      /* Store new index */
}

static void ps2_write_bit(void) {
  ps2_state=PS2_ST_PREP_BIT;
     5b2:	83 e0       	ldi	r24, 0x03	; 3
     5b4:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <ps2_state>
  // set DATA..
  switch (ps2_byte & 1) {
     5b8:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <ps2_byte>
     5bc:	80 fd       	sbrc	r24, 0
     5be:	0d c0       	rjmp	.+26     	; 0x5da <ps2_write_bit+0x28>
}

static inline __attribute__((always_inline)) void ps2_clear_data(void) {
  PS2_DATA_DDR |= PS2_DATA_PIN;
     5c0:	8a 9a       	sbi	0x11, 2	; 17
  PS2_DATA_OUT &= (uint8_t)~PS2_DATA_PIN;
     5c2:	92 98       	cbi	0x12, 2	; 18
      ps2_parity++;
      ps2_set_data();
      break;
  }
  // shift right.
  ps2_byte= ps2_byte >> 1;
     5c4:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <ps2_byte>
     5c8:	86 95       	lsr	r24
     5ca:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <ps2_byte>
  ps2_bit_count++;
     5ce:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <ps2_bit_count>
     5d2:	8f 5f       	subi	r24, 0xFF	; 255
     5d4:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <ps2_bit_count>
  // valid data now.
}
     5d8:	08 95       	ret
  switch (ps2_byte & 1) {
    case 0:
      ps2_clear_data();
      break;
    case 1:
      ps2_parity++;
     5da:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <ps2_parity>
     5de:	8f 5f       	subi	r24, 0xFF	; 255
     5e0:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <ps2_parity>
static inline __attribute__((always_inline)) uint8_t ps2_read_clk(void) {
  return PS2_CLK_IN & PS2_CLK_PIN;
}

static inline __attribute__((always_inline)) void ps2_set_data(void) {
  PS2_DATA_OUT |= PS2_DATA_PIN;
     5e4:	92 9a       	sbi	0x12, 2	; 18
  PS2_DATA_DDR &= (uint8_t)~PS2_DATA_PIN;
     5e6:	8a 98       	cbi	0x11, 2	; 17
     5e8:	ed cf       	rjmp	.-38     	; 0x5c4 <ps2_write_bit+0x12>

000005ea <ps2_read_byte>:
  }
  rxbuf[tmp] = ps2_byte; /* Store received data in buffer */
}

static void ps2_read_byte(void) {
  ps2_bit_count = 0;
     5ea:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <ps2_bit_count>
  ps2_parity = 0;
     5ee:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <ps2_parity>
  ps2_byte = txbuf[( tx_tail + 1 ) & PS2_TX_BUFFER_MASK];  /* Start transmition */
     5f2:	e0 91 61 01 	lds	r30, 0x0161	; 0x800161 <tx_tail>
     5f6:	f0 e0       	ldi	r31, 0x00	; 0
     5f8:	31 96       	adiw	r30, 0x01	; 1
     5fa:	e7 70       	andi	r30, 0x07	; 7
     5fc:	ff 27       	eor	r31, r31
     5fe:	e7 5a       	subi	r30, 0xA7	; 167
     600:	fe 4f       	sbci	r31, 0xFE	; 254
     602:	80 81       	ld	r24, Z
     604:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <ps2_byte>
}
     608:	08 95       	ret

0000060a <ps2_write_byte>:
}

static void ps2_write_byte(void) {
  uint8_t tmp;
  /* Calculate buffer index */
  tmp = ( rx_head + 1 ) & PS2_RX_BUFFER_MASK;
     60a:	e0 91 58 01 	lds	r30, 0x0158	; 0x800158 <rx_head.lto_priv.5>
     60e:	ef 5f       	subi	r30, 0xFF	; 255
     610:	e7 70       	andi	r30, 0x07	; 7
  rx_head = tmp;      /* Store new index */
     612:	e0 93 58 01 	sts	0x0158, r30	; 0x800158 <rx_head.lto_priv.5>

  if ( tmp == rx_tail ) {
     616:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <rx_tail.lto_priv.7>
    /* ERROR! Receive buffer overflow */
  }
  rxbuf[tmp] = ps2_byte; /* Store received data in buffer */
     61a:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <ps2_byte>
     61e:	f0 e0       	ldi	r31, 0x00	; 0
     620:	e1 5b       	subi	r30, 0xB1	; 177
     622:	fe 4f       	sbci	r31, 0xFE	; 254
     624:	80 83       	st	Z, r24
}
     626:	08 95       	ret

00000628 <ps2_disable_timer>:
  PS2_TIMSK |= PS2_TIMSK_DATA;
}

static void ps2_disable_timer(void) {
  // disable output compare IRQ
  PS2_TIMSK &= (uint8_t)~PS2_TIMSK_DATA;
     628:	89 b7       	in	r24, 0x39	; 57
     62a:	8e 7f       	andi	r24, 0xFE	; 254
     62c:	89 bf       	out	0x39, r24	; 57
}
     62e:	08 95       	ret

00000630 <ps2_enable_timer>:
  CLK_INTCR &= (uint8_t)~_BV(CLK_INT);
}

static void ps2_enable_timer(uint8_t us) {
  // clear flag.
  PS2_TIFR |= PS2_TIFR_DATA;
     630:	98 b7       	in	r25, 0x38	; 56
     632:	91 60       	ori	r25, 0x01	; 1
     634:	98 bf       	out	0x38, r25	; 56
  // clear TCNT;
  PS2_TCNT = 0;
     636:	12 be       	out	0x32, r1	; 50
  // set the count...
#if F_CPU > 14000000
  // us is uS....  Need to * 14 to get ticks, then divide by 8...
  // cheat... * 14 / 8 = *2 = <<1
  PS2_OCR = (uint8_t)(us << 1);
     638:	88 0f       	add	r24, r24
     63a:	81 bf       	out	0x31, r24	; 49
  PS2_OCR = us;
#else
  PS2_OCR = (us >> 1);
#endif
  // enable output compare IRQ
  PS2_TIMSK |= PS2_TIMSK_DATA;
     63c:	89 b7       	in	r24, 0x39	; 57
     63e:	81 60       	ori	r24, 0x01	; 1
     640:	89 bf       	out	0x39, r24	; 57
}
     642:	08 95       	ret

00000644 <ps2_trigger_send>:
}
#endif

static void ps2_trigger_send(void) {
  // set state
  ps2_state = PS2_ST_PREP_START;
     644:	81 e0       	ldi	r24, 0x01	; 1
     646:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <ps2_state>
  PS2_CALL(ps2_device_trigger_send(),ps2_host_trigger_send());
     64a:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <ps2_mode>
     64e:	81 30       	cpi	r24, 0x01	; 1
     650:	19 f0       	breq	.+6      	; 0x658 <ps2_trigger_send+0x14>
     652:	82 30       	cpi	r24, 0x02	; 2
     654:	39 f0       	breq	.+14     	; 0x664 <ps2_trigger_send+0x20>
     656:	08 95       	ret

#ifdef PS2_ENABLE_DEVICE
static void ps2_device_trigger_send(void) {
  // start clocking.
  // wait a half cycle
  ps2_enable_timer(PS2_HALF_CYCLE);
     658:	84 e2       	ldi	r24, 0x24	; 36
     65a:	0e 94 18 03 	call	0x630	; 0x630 <ps2_enable_timer>
}

static inline __attribute__((always_inline)) void ps2_clear_data(void) {
  PS2_DATA_DDR |= PS2_DATA_PIN;
     65e:	8a 9a       	sbi	0x11, 2	; 17
  PS2_DATA_OUT &= (uint8_t)~PS2_DATA_PIN;
     660:	92 98       	cbi	0x12, 2	; 18
     662:	08 95       	ret
  // turn on
  CLK_INTCR |= _BV(CLK_INT);
}

static void ps2_disable_clk(void) {
  CLK_INTCR &= (uint8_t)~_BV(CLK_INT);
     664:	8b b7       	in	r24, 0x3b	; 59
     666:	8f 77       	andi	r24, 0x7F	; 127
     668:	8b bf       	out	0x3b, r24	; 59
  PS2_CLK_OUT |= PS2_CLK_PIN;
  PS2_CLK_DDR &= (uint8_t)~PS2_CLK_PIN;
}

static inline __attribute__((always_inline)) void ps2_clear_clk(void) {
  PS2_CLK_DDR |= PS2_CLK_PIN;
     66a:	8b 9a       	sbi	0x11, 3	; 17
  PS2_CLK_OUT &= (uint8_t)~PS2_CLK_PIN;
     66c:	93 98       	cbi	0x12, 3	; 18
static void ps2_host_trigger_send(void) {
  // need to get devices attention...
  ps2_disable_clk();
  ps2_clear_clk();
  // yes, bring CLK lo for 100uS
  ps2_enable_timer(100);
     66e:	84 e6       	ldi	r24, 0x64	; 100
     670:	0e 94 18 03 	call	0x630	; 0x630 <ps2_enable_timer>

static void ps2_trigger_send(void) {
  // set state
  ps2_state = PS2_ST_PREP_START;
  PS2_CALL(ps2_device_trigger_send(),ps2_host_trigger_send());
}
     674:	08 95       	ret

00000676 <ps2_putc>:
  // Store new index
  rx_tail = tmptail;
  return rxbuf[tmptail];
}

void ps2_putc( uint8_t data ) {
     676:	cf 93       	push	r28
  uint8_t tmphead;
  // Calculate buffer index
  tmphead = ( tx_head + 1 ) & PS2_TX_BUFFER_MASK;
     678:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <tx_head>
     67c:	9f 5f       	subi	r25, 0xFF	; 255
     67e:	97 70       	andi	r25, 0x07	; 7
  while ( tmphead == tx_tail ) {
     680:	20 91 61 01 	lds	r18, 0x0161	; 0x800161 <tx_tail>
     684:	29 17       	cp	r18, r25
     686:	e1 f3       	breq	.-8      	; 0x680 <ps2_putc+0xa>
    // Wait for free space in buffer
    ;
  }
  // Store data in buffer
  txbuf[tmphead] = data;
     688:	e9 2f       	mov	r30, r25
     68a:	f0 e0       	ldi	r31, 0x00	; 0
     68c:	e7 5a       	subi	r30, 0xA7	; 167
     68e:	fe 4f       	sbci	r31, 0xFE	; 254
     690:	80 83       	st	Z, r24
  // Store new index
  tx_head = tmphead;
     692:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <tx_head>

  // turn off IRQs
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     696:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     698:	f8 94       	cli
    if(ps2_state == PS2_ST_IDLE) {
     69a:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <ps2_state>
     69e:	81 11       	cpse	r24, r1
     6a0:	02 c0       	rjmp	.+4      	; 0x6a6 <ps2_putc+0x30>
      // start transmission;
      ps2_trigger_send();
     6a2:	0e 94 22 03 	call	0x644	; 0x644 <ps2_trigger_send>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     6a6:	cf bf       	out	0x3f, r28	; 63
    }
  }
}
     6a8:	cf 91       	pop	r28
     6aa:	08 95       	ret

000006ac <check_override>:
    led_divider=0;
    LED_irq();
  }
}

void check_override(void) {
     6ac:	cf 93       	push	r28
  if(shift_override) {
     6ae:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <shift_override.lto_priv.18>
     6b2:	88 23       	and	r24, r24
     6b4:	e1 f0       	breq	.+56     	; 0x6ee <check_override+0x42>
    if((shift_override_state & SCAN_MAP_EXT) == SCAN_MAP_EXT)
     6b6:	c0 91 65 01 	lds	r28, 0x0165	; 0x800165 <shift_override_state.lto_priv.22>
     6ba:	c1 ff       	sbrs	r28, 1
     6bc:	03 c0       	rjmp	.+6      	; 0x6c4 <check_override+0x18>
      ps2_putc(PS2_KEY_EXT);
     6be:	80 ee       	ldi	r24, 0xE0	; 224
     6c0:	0e 94 3b 03 	call	0x676	; 0x676 <ps2_putc>
    ps2_putc(PS2_KEY_UP);
     6c4:	80 ef       	ldi	r24, 0xF0	; 240
     6c6:	0e 94 3b 03 	call	0x676	; 0x676 <ps2_putc>
    ps2_putc(shift_override_key);
     6ca:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <shift_override_key.lto_priv.20>
     6ce:	0e 94 3b 03 	call	0x676	; 0x676 <ps2_putc>
    
    if((shift_override_state & SCAN_MAP_SHIFT) == 0) {
     6d2:	c0 fd       	sbrc	r28, 0
     6d4:	0e c0       	rjmp	.+28     	; 0x6f2 <check_override+0x46>
      // we need to apply shifts now.
      if(meta&SCAN_FLAG_LSHIFT)
     6d6:	c0 91 6b 01 	lds	r28, 0x016B	; 0x80016b <meta.lto_priv.10>
     6da:	c0 ff       	sbrs	r28, 0
     6dc:	03 c0       	rjmp	.+6      	; 0x6e4 <check_override+0x38>
        ps2_putc(PS2_KEY_LSHIFT);
     6de:	82 e1       	ldi	r24, 0x12	; 18
     6e0:	0e 94 3b 03 	call	0x676	; 0x676 <ps2_putc>
      if(meta&SCAN_FLAG_RSHIFT)
        ps2_putc(PS2_KEY_RSHIFT);
     6e4:	89 e5       	ldi	r24, 0x59	; 89
    
    if((shift_override_state & SCAN_MAP_SHIFT) == 0) {
      // we need to apply shifts now.
      if(meta&SCAN_FLAG_LSHIFT)
        ps2_putc(PS2_KEY_LSHIFT);
      if(meta&SCAN_FLAG_RSHIFT)
     6e6:	c1 fd       	sbrc	r28, 1
     6e8:	08 c0       	rjmp	.+16     	; 0x6fa <check_override+0x4e>
    } else {
      // let off shift key
      ps2_putc(PS2_KEY_UP);
      ps2_putc(PS2_KEY_LSHIFT);
    }
    shift_override=FALSE;
     6ea:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <shift_override.lto_priv.18>
  }
}
     6ee:	cf 91       	pop	r28
     6f0:	08 95       	ret
        ps2_putc(PS2_KEY_LSHIFT);
      if(meta&SCAN_FLAG_RSHIFT)
        ps2_putc(PS2_KEY_RSHIFT);
    } else {
      // let off shift key
      ps2_putc(PS2_KEY_UP);
     6f2:	80 ef       	ldi	r24, 0xF0	; 240
     6f4:	0e 94 3b 03 	call	0x676	; 0x676 <ps2_putc>
      ps2_putc(PS2_KEY_LSHIFT);
     6f8:	82 e1       	ldi	r24, 0x12	; 18
     6fa:	0e 94 3b 03 	call	0x676	; 0x676 <ps2_putc>
     6fe:	f5 cf       	rjmp	.-22     	; 0x6ea <check_override+0x3e>

00000700 <send_key_code>:
    }
    shift_override=FALSE;
  }
}

void send_key_code(uint8_t sh,uint8_t key,uint8_t state) {
     700:	0f 93       	push	r16
     702:	1f 93       	push	r17
     704:	cf 93       	push	r28
     706:	df 93       	push	r29
  if(key != 0) {
     708:	66 23       	and	r22, r22
     70a:	99 f0       	breq	.+38     	; 0x732 <send_key_code+0x32>
     70c:	14 2f       	mov	r17, r20
     70e:	c6 2f       	mov	r28, r22
     710:	d8 2f       	mov	r29, r24
     712:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <shift_override.lto_priv.18>
    if(state==FALSE && shift_override && shift_override_key==key && shift_override_state==sh) {
     716:	41 11       	cpse	r20, r1
     718:	11 c0       	rjmp	.+34     	; 0x73c <send_key_code+0x3c>
     71a:	88 23       	and	r24, r24
     71c:	d1 f0       	breq	.+52     	; 0x752 <send_key_code+0x52>
     71e:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <shift_override_key.lto_priv.20>
     722:	86 13       	cpse	r24, r22
     724:	0d c0       	rjmp	.+26     	; 0x740 <send_key_code+0x40>
     726:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <shift_override_state.lto_priv.22>
     72a:	8d 13       	cpse	r24, r29
     72c:	09 c0       	rjmp	.+18     	; 0x740 <send_key_code+0x40>
      // it's us, we're unpressing the key.
      check_override();
     72e:	0e 94 56 03 	call	0x6ac	; 0x6ac <check_override>
          ps2_putc(key);
          break;
      }
    }
  }
}
     732:	df 91       	pop	r29
     734:	cf 91       	pop	r28
     736:	1f 91       	pop	r17
     738:	0f 91       	pop	r16
     73a:	08 95       	ret
  if(key != 0) {
    if(state==FALSE && shift_override && shift_override_key==key && shift_override_state==sh) {
      // it's us, we're unpressing the key.
      check_override();
    } else {
      if(shift_override && (shift_override_key!=key || shift_override_state!=sh)) {
     73c:	88 23       	and	r24, r24
     73e:	49 f0       	breq	.+18     	; 0x752 <send_key_code+0x52>
     740:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <shift_override_key.lto_priv.20>
     744:	8c 13       	cpse	r24, r28
     746:	03 c0       	rjmp	.+6      	; 0x74e <send_key_code+0x4e>
     748:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <shift_override_state.lto_priv.22>
     74c:	8d 13       	cpse	r24, r29
        // we are a new keypress.
        check_override();
     74e:	0e 94 56 03 	call	0x6ac	; 0x6ac <check_override>
      }
      if(!shift_override) {
     752:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <shift_override.lto_priv.18>
     756:	81 11       	cpse	r24, r1
     758:	23 c0       	rjmp	.+70     	; 0x7a0 <send_key_code+0xa0>
        // we have a new valid key
        if(state && (meta & SCAN_FLAG_SHIFT) && (sh & SCAN_MAP_SHIFT) == 0) {
     75a:	11 23       	and	r17, r17
     75c:	09 f1       	breq	.+66     	; 0x7a0 <send_key_code+0xa0>
     75e:	00 91 6b 01 	lds	r16, 0x016B	; 0x80016b <meta.lto_priv.10>
     762:	90 2f       	mov	r25, r16
     764:	93 70       	andi	r25, 0x03	; 3
     766:	8d 2f       	mov	r24, r29
     768:	81 70       	andi	r24, 0x01	; 1
     76a:	99 23       	and	r25, r25
     76c:	39 f1       	breq	.+78     	; 0x7bc <send_key_code+0xbc>
     76e:	81 11       	cpse	r24, r1
     770:	17 c0       	rjmp	.+46     	; 0x7a0 <send_key_code+0xa0>
          // we are in shift mode and this key needs shift off.
          if(meta&SCAN_FLAG_LSHIFT) {
     772:	00 ff       	sbrs	r16, 0
     774:	06 c0       	rjmp	.+12     	; 0x782 <send_key_code+0x82>
            ps2_putc(PS2_KEY_UP);
     776:	80 ef       	ldi	r24, 0xF0	; 240
     778:	0e 94 3b 03 	call	0x676	; 0x676 <ps2_putc>
            ps2_putc(PS2_KEY_LSHIFT);
     77c:	82 e1       	ldi	r24, 0x12	; 18
     77e:	0e 94 3b 03 	call	0x676	; 0x676 <ps2_putc>
          }
          if(meta&SCAN_FLAG_RSHIFT) {
     782:	01 ff       	sbrs	r16, 1
     784:	06 c0       	rjmp	.+12     	; 0x792 <send_key_code+0x92>
            ps2_putc(PS2_KEY_UP);
     786:	80 ef       	ldi	r24, 0xF0	; 240
     788:	0e 94 3b 03 	call	0x676	; 0x676 <ps2_putc>
            ps2_putc(PS2_KEY_RSHIFT);
     78c:	89 e5       	ldi	r24, 0x59	; 89
          shift_override=TRUE;
          shift_override_key=key;
          shift_override_state=sh;
        } else if(state && !(meta & SCAN_FLAG_SHIFT)&& (sh & SCAN_MAP_SHIFT) == SCAN_MAP_SHIFT) {
          // we are not in shift mode and we need a shift.
          ps2_putc(PS2_KEY_LSHIFT);
     78e:	0e 94 3b 03 	call	0x676	; 0x676 <ps2_putc>
          shift_override=TRUE;
     792:	81 e0       	ldi	r24, 0x01	; 1
     794:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <shift_override.lto_priv.18>
          shift_override_key=key;
     798:	c0 93 66 01 	sts	0x0166, r28	; 0x800166 <shift_override_key.lto_priv.20>
          shift_override_state=sh;
     79c:	d0 93 65 01 	sts	0x0165, r29	; 0x800165 <shift_override_state.lto_priv.22>
        }
      }
      if((sh & SCAN_MAP_EXT) == SCAN_MAP_EXT)
     7a0:	d1 ff       	sbrs	r29, 1
     7a2:	03 c0       	rjmp	.+6      	; 0x7aa <send_key_code+0xaa>
        ps2_putc(PS2_KEY_EXT);
     7a4:	80 ee       	ldi	r24, 0xE0	; 224
     7a6:	0e 94 3b 03 	call	0x676	; 0x676 <ps2_putc>
      switch(state) {
     7aa:	11 30       	cpi	r17, 0x01	; 1
     7ac:	19 f0       	breq	.+6      	; 0x7b4 <send_key_code+0xb4>
        case FALSE:
          ps2_putc(PS2_KEY_UP);
     7ae:	80 ef       	ldi	r24, 0xF0	; 240
     7b0:	0e 94 3b 03 	call	0x676	; 0x676 <ps2_putc>
          ps2_putc(key);
          break;
        case TRUE:
          ps2_putc(key);
     7b4:	8c 2f       	mov	r24, r28
     7b6:	0e 94 3b 03 	call	0x676	; 0x676 <ps2_putc>
     7ba:	bb cf       	rjmp	.-138    	; 0x732 <send_key_code+0x32>
            ps2_putc(PS2_KEY_RSHIFT);
          }
          shift_override=TRUE;
          shift_override_key=key;
          shift_override_state=sh;
        } else if(state && !(meta & SCAN_FLAG_SHIFT)&& (sh & SCAN_MAP_SHIFT) == SCAN_MAP_SHIFT) {
     7bc:	88 23       	and	r24, r24
     7be:	81 f3       	breq	.-32     	; 0x7a0 <send_key_code+0xa0>
          // we are not in shift mode and we need a shift.
          ps2_putc(PS2_KEY_LSHIFT);
     7c0:	82 e1       	ldi	r24, 0x12	; 18
     7c2:	e5 cf       	rjmp	.-54     	; 0x78e <send_key_code+0x8e>

000007c4 <ps2_enable_clk_fall>:
  CLK_INTCR |= _BV(CLK_INT);
}

static void ps2_enable_clk_fall(void) {
  // turn off IRQ
  CLK_INTCR &= (uint8_t)~_BV(CLK_INT);
     7c4:	8b b7       	in	r24, 0x3b	; 59
     7c6:	8f 77       	andi	r24, 0x7F	; 127
     7c8:	8b bf       	out	0x3b, r24	; 59
  // reset flag
  CLK_INTFR |= _BV(CLK_INTF);
     7ca:	8a b7       	in	r24, 0x3a	; 58
     7cc:	80 68       	ori	r24, 0x80	; 128
     7ce:	8a bf       	out	0x3a, r24	; 58
  // falling edge
  CLK_INTDR = (CLK_INTDR & (uint8_t)~(_BV(CLK_ISC1) | _BV(CLK_ISC0))) | _BV(CLK_ISC1);
     7d0:	85 b7       	in	r24, 0x35	; 53
     7d2:	83 7f       	andi	r24, 0xF3	; 243
     7d4:	88 60       	ori	r24, 0x08	; 8
     7d6:	85 bf       	out	0x35, r24	; 53
  // turn on
  CLK_INTCR |= _BV(CLK_INT);
     7d8:	8b b7       	in	r24, 0x3b	; 59
     7da:	80 68       	ori	r24, 0x80	; 128
     7dc:	8b bf       	out	0x3b, r24	; 59
}
     7de:	08 95       	ret

000007e0 <ps2_init>:
             ,PS2_ST_WAIT_RESPONSE
             } ps2state_t;

static inline __attribute__((always_inline)) void ps2_init_timer(void) {
  // set prescaler to System Clock/8
  PS2_TCCR1 |= PS2_TCCR1_DATA;
     7e0:	93 b7       	in	r25, 0x33	; 51
     7e2:	92 60       	ori	r25, 0x02	; 2
     7e4:	93 bf       	out	0x33, r25	; 51
  // CTC mode
  PS2_TCCR2 |= PS2_TCCR2_DATA;
     7e6:	93 b7       	in	r25, 0x33	; 51
     7e8:	98 60       	ori	r25, 0x08	; 8
     7ea:	93 bf       	out	0x33, r25	; 51
}

void ps2_init(ps2mode_t mode) {
  ps2_init_timer();

  ps2_mode = mode;
     7ec:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <ps2_mode>
  ps2_clear_buffers();
     7f0:	0e 94 ac 02 	call	0x558	; 0x558 <ps2_clear_buffers>
}

static inline __attribute__((always_inline)) void ps2_set_clk(void) {
  PS2_CLK_OUT |= PS2_CLK_PIN;
     7f4:	93 9a       	sbi	0x12, 3	; 18
  PS2_CLK_DDR &= (uint8_t)~PS2_CLK_PIN;
     7f6:	8b 98       	cbi	0x11, 3	; 17
static inline __attribute__((always_inline)) uint8_t ps2_read_clk(void) {
  return PS2_CLK_IN & PS2_CLK_PIN;
}

static inline __attribute__((always_inline)) void ps2_set_data(void) {
  PS2_DATA_OUT |= PS2_DATA_PIN;
     7f8:	92 9a       	sbi	0x12, 2	; 18
  PS2_DATA_DDR &= (uint8_t)~PS2_DATA_PIN;
     7fa:	8a 98       	cbi	0x11, 2	; 17

  ps2_set_clk();
  ps2_set_data();

  ps2_state = PS2_ST_IDLE;
     7fc:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <ps2_state>
  ps2_enable_clk_fall();
     800:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <ps2_enable_clk_fall>
  PS2_CALL(ps2_device_init(),ps2_host_init());
}
     804:	08 95       	ret

00000806 <ps2_check_for_data>:
}


static void ps2_check_for_data(void) {
  // do we have data to send?
  if( tx_head != tx_tail) {
     806:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <tx_head>
     80a:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <tx_tail>
     80e:	98 17       	cp	r25, r24
     810:	19 f0       	breq	.+6      	; 0x818 <ps2_check_for_data+0x12>
    ps2_trigger_send();
     812:	0e 94 22 03 	call	0x644	; 0x644 <ps2_trigger_send>
     816:	08 95       	ret
  } else {
    ps2_state = PS2_ST_IDLE;
     818:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <ps2_state>
    ps2_disable_timer();  // TODO check if this is needed for host mode as well.
     81c:	0e 94 14 03 	call	0x628	; 0x628 <ps2_disable_timer>
    ps2_enable_clk_fall();
     820:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <ps2_enable_clk_fall>
  }
}
     824:	08 95       	ret

00000826 <ps2_enable_clk_rise>:

static volatile uint8_t ps2_holdoff_count;

static void ps2_enable_clk_rise(void) {
  // turn off IRQ
  CLK_INTCR &= (uint8_t)~_BV(CLK_INT);
     826:	8b b7       	in	r24, 0x3b	; 59
     828:	8f 77       	andi	r24, 0x7F	; 127
     82a:	8b bf       	out	0x3b, r24	; 59
  // reset flag
  CLK_INTFR |= _BV(CLK_INTF);
     82c:	8a b7       	in	r24, 0x3a	; 58
     82e:	80 68       	ori	r24, 0x80	; 128
     830:	8a bf       	out	0x3a, r24	; 58
  // rising edge
  CLK_INTDR |= _BV(CLK_ISC1) | _BV(CLK_ISC0);
     832:	85 b7       	in	r24, 0x35	; 53
     834:	8c 60       	ori	r24, 0x0C	; 12
     836:	85 bf       	out	0x35, r24	; 53
  // turn on
  CLK_INTCR |= _BV(CLK_INT);
     838:	8b b7       	in	r24, 0x3b	; 59
     83a:	80 68       	ori	r24, 0x80	; 128
     83c:	8b bf       	out	0x3b, r24	; 59
}
     83e:	08 95       	ret

00000840 <ps2_device_host_inhibit>:

#ifdef PS2_ENABLE_DEVICE
static void ps2_device_host_inhibit(void) {
  // CLK is low.  Host wants to talk to us.
  // turn off timer
  ps2_disable_timer();
     840:	0e 94 14 03 	call	0x628	; 0x628 <ps2_disable_timer>
  // look for rising clock
  ps2_enable_clk_rise();
     844:	0e 94 13 04 	call	0x826	; 0x826 <ps2_enable_clk_rise>
  ps2_state = PS2_ST_HOST_INHIBIT;
     848:	85 e1       	ldi	r24, 0x15	; 21
     84a:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <ps2_state>
static inline __attribute__((always_inline)) uint8_t ps2_read_clk(void) {
  return PS2_CLK_IN & PS2_CLK_PIN;
}

static inline __attribute__((always_inline)) void ps2_set_data(void) {
  PS2_DATA_OUT |= PS2_DATA_PIN;
     84e:	92 9a       	sbi	0x12, 2	; 18
  PS2_DATA_DDR &= (uint8_t)~PS2_DATA_PIN;
     850:	8a 98       	cbi	0x11, 2	; 17
  // release DATA line, if we happen to have it.
  ps2_set_data();
}
     852:	08 95       	ret

00000854 <set_LED>:

  // now, set 4080
  //set_switch(POLL_C128_PKEY_4080,sw_state&(1<<SW_4080));
}

static void set_LED(uint8_t led) {
     854:	cf 93       	push	r28
  //debug2('L');
  led_state|=led;
     856:	c0 91 47 01 	lds	r28, 0x0147	; 0x800147 <led_state.lto_priv.23>
     85a:	c8 2b       	or	r28, r24
     85c:	c0 93 47 01 	sts	0x0147, r28	; 0x800147 <led_state.lto_priv.23>
  ps2_putc(PS2_CMD_LEDS);
     860:	8d ee       	ldi	r24, 0xED	; 237
     862:	0e 94 3b 03 	call	0x676	; 0x676 <ps2_putc>
  ps2_putc(led_state);
     866:	8c 2f       	mov	r24, r28
     868:	0e 94 3b 03 	call	0x676	; 0x676 <ps2_putc>
}
     86c:	cf 91       	pop	r28
     86e:	08 95       	ret

00000870 <toggle_num_lock>:
  led_state&=(uint8_t)~led;
  ps2_putc(PS2_CMD_LEDS);
  ps2_putc(led_state);
}

static void toggle_num_lock(void) {
     870:	cf 93       	push	r28
  if(led_state&PS2_LED_NUM_LOCK)
     872:	c0 91 47 01 	lds	r28, 0x0147	; 0x800147 <led_state.lto_priv.23>
     876:	c1 ff       	sbrs	r28, 1
     878:	0b c0       	rjmp	.+22     	; 0x890 <toggle_num_lock+0x20>
  ps2_putc(PS2_CMD_LEDS);
  ps2_putc(led_state);
}

static void clear_LED(uint8_t led) {
  led_state&=(uint8_t)~led;
     87a:	cd 7f       	andi	r28, 0xFD	; 253
     87c:	c0 93 47 01 	sts	0x0147, r28	; 0x800147 <led_state.lto_priv.23>
  ps2_putc(PS2_CMD_LEDS);
     880:	8d ee       	ldi	r24, 0xED	; 237
     882:	0e 94 3b 03 	call	0x676	; 0x676 <ps2_putc>
  ps2_putc(led_state);
     886:	8c 2f       	mov	r24, r28
     888:	0e 94 3b 03 	call	0x676	; 0x676 <ps2_putc>
static void toggle_num_lock(void) {
  if(led_state&PS2_LED_NUM_LOCK)
    clear_LED(PS2_LED_NUM_LOCK);
  else
    set_LED(PS2_LED_NUM_LOCK);
}
     88c:	cf 91       	pop	r28
     88e:	08 95       	ret

static void toggle_num_lock(void) {
  if(led_state&PS2_LED_NUM_LOCK)
    clear_LED(PS2_LED_NUM_LOCK);
  else
    set_LED(PS2_LED_NUM_LOCK);
     890:	82 e0       	ldi	r24, 0x02	; 2
     892:	0e 94 2a 04 	call	0x854	; 0x854 <set_LED>
     896:	fa cf       	rjmp	.-12     	; 0x88c <toggle_num_lock+0x1c>

00000898 <set_switch>:
  //while(!(TIFR & (1<<OCF2)));
  //TIFR=(1<<OCF2);
  //TCCR2=0;
}

void set_switch(uint8_t sw, uint8_t state) {
     898:	cf 93       	push	r28
     89a:	df 93       	push	r29
     89c:	c8 2f       	mov	r28, r24
     89e:	d6 2f       	mov	r29, r22
  if(debug) {
     8a0:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <debug>
     8a4:	88 23       	and	r24, r24
     8a6:	19 f0       	breq	.+6      	; 0x8ae <set_switch+0x16>
    debug(state?'d':'u');
    uart_puthex(sw);
     8a8:	8c 2f       	mov	r24, r28
     8aa:	0e 94 30 02 	call	0x460	; 0x460 <uart0_puthex>
  }
  switch(sw) {
     8ae:	c0 31       	cpi	r28, 0x10	; 16
     8b0:	89 f0       	breq	.+34     	; 0x8d4 <set_switch+0x3c>
     8b2:	c0 32       	cpi	r28, 0x20	; 32
     8b4:	39 f0       	breq	.+14     	; 0x8c4 <set_switch+0x2c>
     8b6:	c1 11       	cpse	r28, r1
     8b8:	12 c0       	rjmp	.+36     	; 0x8de <set_switch+0x46>
    case POLL_C64_PKEY_RESTORE:
      sw_putc(SW_RESTORE | (state?0:SW_UP));
      break;
    case POLL_C128_PKEY_4080:
      sw_putc(SW_4080 | (state?0:SW_UP));
     8ba:	81 e8       	ldi	r24, 0x81	; 129
     8bc:	dd 23       	and	r29, r29
     8be:	29 f0       	breq	.+10     	; 0x8ca <set_switch+0x32>
     8c0:	81 e0       	ldi	r24, 0x01	; 1
     8c2:	03 c0       	rjmp	.+6      	; 0x8ca <set_switch+0x32>
    debug(state?'d':'u');
    uart_puthex(sw);
  }
  switch(sw) {
    case POLL_C64_PKEY_RESTORE:
      sw_putc(SW_RESTORE | (state?0:SW_UP));
     8c4:	82 e8       	ldi	r24, 0x82	; 130
     8c6:	d1 11       	cpse	r29, r1
     8c8:	82 e0       	ldi	r24, 0x02	; 2
      break;
    case POLL_C128_PKEY_4080:
      sw_putc(SW_4080 | (state?0:SW_UP));
      break;
    case POLL_C128_PKEY_CAPSENSE:
      sw_putc(SW_CAPSENSE | (state?0:SW_UP));
     8ca:	0e 94 46 02 	call	0x48c	; 0x48c <sw_putc>
      XPT_PORT_STROBE_OUT|=XPT_PIN_STROBE;
      // bring low
      XPT_PORT_STROBE_OUT&=(uint8_t)~XPT_PIN_STROBE;
      break;
  }
}
     8ce:	df 91       	pop	r29
     8d0:	cf 91       	pop	r28
     8d2:	08 95       	ret
      break;
    case POLL_C128_PKEY_4080:
      sw_putc(SW_4080 | (state?0:SW_UP));
      break;
    case POLL_C128_PKEY_CAPSENSE:
      sw_putc(SW_CAPSENSE | (state?0:SW_UP));
     8d4:	80 e8       	ldi	r24, 0x80	; 128
     8d6:	dd 23       	and	r29, r29
     8d8:	c1 f3       	breq	.-16     	; 0x8ca <set_switch+0x32>
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	f6 cf       	rjmp	.-20     	; 0x8ca <set_switch+0x32>
      break;
    default:
      XPT_PORT_DATA_OUT=((state!=FALSE) | sw);
     8de:	81 e0       	ldi	r24, 0x01	; 1
     8e0:	d1 11       	cpse	r29, r1
     8e2:	01 c0       	rjmp	.+2      	; 0x8e6 <set_switch+0x4e>
     8e4:	80 e0       	ldi	r24, 0x00	; 0
     8e6:	c8 2b       	or	r28, r24
     8e8:	c8 bb       	out	0x18, r28	; 24
      // strobe STROBE PIN
      XPT_PORT_STROBE_OUT|=XPT_PIN_STROBE;
     8ea:	96 9a       	sbi	0x12, 6	; 18
      // bring low
      XPT_PORT_STROBE_OUT&=(uint8_t)~XPT_PIN_STROBE;
     8ec:	96 98       	cbi	0x12, 6	; 18
     8ee:	ef cf       	rjmp	.-34     	; 0x8ce <set_switch+0x36>

000008f0 <reset_matrix>:
    // key up, and we were not in shift override...
    set_switch(sw,state);
  }
}

void reset_matrix(void) {
     8f0:	cf 93       	push	r28
     8f2:	c0 e8       	ldi	r28, 0x80	; 128
  uint8_t i=0;

  // reset switches...
  do {
    set_switch(i+=2,FALSE);
     8f4:	8c 2f       	mov	r24, r28
     8f6:	81 95       	neg	r24
     8f8:	88 0f       	add	r24, r24
     8fa:	60 e0       	ldi	r22, 0x00	; 0
     8fc:	8e 5f       	subi	r24, 0xFE	; 254
     8fe:	0e 94 4c 04 	call	0x898	; 0x898 <set_switch>
     902:	c1 50       	subi	r28, 0x01	; 1
  } while (i!=0);
     904:	b9 f7       	brne	.-18     	; 0x8f4 <reset_matrix+0x4>
  // turn off all LEDs but NumLock
  led_state&=(PS2_LED_NUM_LOCK);
     906:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <led_state.lto_priv.23>
     90a:	82 70       	andi	r24, 0x02	; 2
     90c:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <led_state.lto_priv.23>

  // turn off all but 4080
  //sw_state&=(1<<SW_4080);
  // turn off all
  sw_state = 0;
     910:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <sw_state>

  // now, set 4080
  //set_switch(POLL_C128_PKEY_4080,sw_state&(1<<SW_4080));
}
     914:	cf 91       	pop	r28
     916:	08 95       	ret

00000918 <set_matrix>:
    set_switch(POLL_C64_KEY_RSHIFT,meta & POLL_FLAG_RSHIFT);
    shift_override=FALSE;
  }
}

void set_matrix(uint8_t sh, uint8_t sw, uint8_t state) {
     918:	0f 93       	push	r16
     91a:	1f 93       	push	r17
     91c:	cf 93       	push	r28
     91e:	df 93       	push	r29
     920:	18 2f       	mov	r17, r24
     922:	c6 2f       	mov	r28, r22
     924:	d4 2f       	mov	r29, r20
  }
}

static void reset_shift_override(uint8_t sw, uint8_t state) {
  // if it is not a repeat, not a meta key, then reset.
  if(shift_override 
     926:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <shift_override.lto_priv.17>
     92a:	88 23       	and	r24, r24
     92c:	19 f1       	breq	.+70     	; 0x974 <set_matrix+0x5c>
     92e:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <shift_override_key.lto_priv.19>
     && ((sw != POLL_C64_KEY_LSHIFT  // if it is a shift, keep override
     932:	62 37       	cpi	r22, 0x72	; 114
     934:	09 f4       	brne	.+2      	; 0x938 <set_matrix+0x20>
     936:	82 c0       	rjmp	.+260    	; 0xa3c <set_matrix+0x124>
          && sw != POLL_C64_KEY_RSHIFT
     938:	6c 30       	cpi	r22, 0x0C	; 12
     93a:	09 f4       	brne	.+2      	; 0x93e <set_matrix+0x26>
     93c:	5b c0       	rjmp	.+182    	; 0x9f4 <set_matrix+0xdc>
          && sw != POLL_C64_KEY_CTRL    // if it is ctrl or cbm, keep.
     93e:	6a 35       	cpi	r22, 0x5A	; 90
     940:	09 f4       	brne	.+2      	; 0x944 <set_matrix+0x2c>
     942:	5c c0       	rjmp	.+184    	; 0x9fc <set_matrix+0xe4>
          && sw != POLL_C64_KEY_CBM
     944:	68 36       	cpi	r22, 0x68	; 104
     946:	09 f4       	brne	.+2      	; 0x94a <set_matrix+0x32>
     948:	59 c0       	rjmp	.+178    	; 0x9fc <set_matrix+0xe4>
          && sw != shift_override_key // if it is a repeat, keep
     94a:	68 13       	cpse	r22, r24
     94c:	02 c0       	rjmp	.+4      	; 0x952 <set_matrix+0x3a>
         )
         || (sw == shift_override_key && !state)
     94e:	d1 11       	cpse	r29, r1
     950:	11 c0       	rjmp	.+34     	; 0x974 <set_matrix+0x5c>
        )
     ) {
    // turn off key.
    set_switch(shift_override_key,FALSE);
     952:	60 e0       	ldi	r22, 0x00	; 0
     954:	0e 94 4c 04 	call	0x898	; 0x898 <set_switch>
    set_switch(POLL_C64_KEY_LSHIFT,meta & POLL_FLAG_LSHIFT);
     958:	00 91 4a 01 	lds	r16, 0x014A	; 0x80014a <meta.lto_priv.9>
     95c:	60 2f       	mov	r22, r16
     95e:	61 70       	andi	r22, 0x01	; 1
     960:	82 e7       	ldi	r24, 0x72	; 114
     962:	0e 94 4c 04 	call	0x898	; 0x898 <set_switch>
    set_switch(POLL_C64_KEY_RSHIFT,meta & POLL_FLAG_RSHIFT);
     966:	60 2f       	mov	r22, r16
     968:	62 70       	andi	r22, 0x02	; 2
     96a:	8c e0       	ldi	r24, 0x0C	; 12
     96c:	0e 94 4c 04 	call	0x898	; 0x898 <set_switch>
    shift_override=FALSE;
     970:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <shift_override.lto_priv.17>
  // sw is matrix code
  // state is TRUE for key down, false for key up.
  
  // reset override, if applicable.
  reset_shift_override(sw,state);
  if(sw==POLL_C64_KEY_LSHIFT) {
     974:	c2 37       	cpi	r28, 0x72	; 114
     976:	79 f4       	brne	.+30     	; 0x996 <set_matrix+0x7e>
    //if(!state)
    //  shift&=(uint8_t)~POLL_FLAG_LSHIFT;
    //else
    //  shift|=(uint8_t)POLL_FLAG_LSHIFT;
    meta=(meta&(uint8_t)~POLL_FLAG_LSHIFT) | (state?POLL_FLAG_LSHIFT:0);
     978:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <meta.lto_priv.9>
     97c:	8e 7f       	andi	r24, 0xFE	; 254
     97e:	8d 2b       	or	r24, r29
     980:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <meta.lto_priv.9>
    set_switch(POLL_C64_KEY_LSHIFT,state);
     984:	6d 2f       	mov	r22, r29
     986:	82 e7       	ldi	r24, 0x72	; 114
    //if(!state)
    //  shift&=(uint8_t)~POLL_FLAG_RSHIFT;
    //else
    //  shift|=(uint8_t)POLL_FLAG_RSHIFT;
    meta=(meta&(uint8_t)~POLL_FLAG_RSHIFT) | (state?POLL_FLAG_RSHIFT:0);
    set_switch(POLL_C64_KEY_RSHIFT,state);
     988:	0e 94 4c 04 	call	0x898	; 0x898 <set_switch>
    }
  } else if(((meta&POLL_FLAG_SHIFT) && sh) || (!(meta&POLL_FLAG_SHIFT) && !sh)) {
    // key up, and we were not in shift override...
    set_switch(sw,state);
  }
}
     98c:	df 91       	pop	r29
     98e:	cf 91       	pop	r28
     990:	1f 91       	pop	r17
     992:	0f 91       	pop	r16
     994:	08 95       	ret
    //  shift&=(uint8_t)~POLL_FLAG_LSHIFT;
    //else
    //  shift|=(uint8_t)POLL_FLAG_LSHIFT;
    meta=(meta&(uint8_t)~POLL_FLAG_LSHIFT) | (state?POLL_FLAG_LSHIFT:0);
    set_switch(POLL_C64_KEY_LSHIFT,state);
  } else if(sw==POLL_C64_KEY_RSHIFT) {
     996:	cc 30       	cpi	r28, 0x0C	; 12
     998:	a1 f5       	brne	.+104    	; 0xa02 <set_matrix+0xea>
    //if(!state)
    //  shift&=(uint8_t)~POLL_FLAG_RSHIFT;
    //else
    //  shift|=(uint8_t)POLL_FLAG_RSHIFT;
    meta=(meta&(uint8_t)~POLL_FLAG_RSHIFT) | (state?POLL_FLAG_RSHIFT:0);
     99a:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <meta.lto_priv.9>
     99e:	8d 7f       	andi	r24, 0xFD	; 253
     9a0:	92 e0       	ldi	r25, 0x02	; 2
     9a2:	d1 11       	cpse	r29, r1
     9a4:	01 c0       	rjmp	.+2      	; 0x9a8 <set_matrix+0x90>
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	89 2b       	or	r24, r25
     9aa:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <meta.lto_priv.9>
    set_switch(POLL_C64_KEY_RSHIFT,state);
     9ae:	6d 2f       	mov	r22, r29
     9b0:	8c e0       	ldi	r24, 0x0C	; 12
     9b2:	ea cf       	rjmp	.-44     	; 0x988 <set_matrix+0x70>
        set_switch(POLL_C64_KEY_LSHIFT,TRUE);
        // set special key.
        shift_override=TRUE;
        shift_override_key=sw;
        shift_override_state=sh;
      } else if((meta&POLL_FLAG_SHIFT) && !sh) {
     9b4:	11 11       	cpse	r17, r1
     9b6:	3f c0       	rjmp	.+126    	; 0xa36 <set_matrix+0x11e>
        //debug2('U');
        // we need to take off the shift keys...
        // set special key.
        set_switch(POLL_C64_KEY_LSHIFT,FALSE);
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	82 e7       	ldi	r24, 0x72	; 114
     9bc:	0e 94 4c 04 	call	0x898	; 0x898 <set_switch>
        set_switch(POLL_C64_KEY_RSHIFT,FALSE);
     9c0:	60 e0       	ldi	r22, 0x00	; 0
     9c2:	8c e0       	ldi	r24, 0x0C	; 12
     9c4:	0e 94 4c 04 	call	0x898	; 0x898 <set_switch>
        shift_override=TRUE;
     9c8:	81 e0       	ldi	r24, 0x01	; 1
     9ca:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <shift_override.lto_priv.17>
        shift_override_key=sw;
     9ce:	c0 93 43 01 	sts	0x0143, r28	; 0x800143 <shift_override_key.lto_priv.19>
    LED_irq();
  }
}

static void delay_jiffy(void) {
  uint8_t i=TCNT2-1;
     9d2:	83 b5       	in	r24, 0x23	; 35
     9d4:	81 50       	subi	r24, 0x01	; 1
  // 1/60 second delay for funky shifting settling.
  //TCNT2=0;
  // Set OC2 clk  to SYSCLK/1024 and Compare Timer Mode
  //TCCR2 = (1<<CS22) | (1<<CS21) | (1<<CS20) | (1<<WGM21);
  while(TCNT2!=i);
     9d6:	93 b5       	in	r25, 0x23	; 35
     9d8:	89 13       	cpse	r24, r25
     9da:	fd cf       	rjmp	.-6      	; 0x9d6 <set_matrix+0xbe>
     9dc:	2c c0       	rjmp	.+88     	; 0xa36 <set_matrix+0x11e>
        shift_override_state=sh;
        delay_jiffy();
      }
      set_switch(sw,state);
    }
  } else if(((meta&POLL_FLAG_SHIFT) && sh) || (!(meta&POLL_FLAG_SHIFT) && !sh)) {
     9de:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <meta.lto_priv.9>
     9e2:	83 70       	andi	r24, 0x03	; 3
     9e4:	21 f0       	breq	.+8      	; 0x9ee <set_matrix+0xd6>
     9e6:	11 23       	and	r17, r17
     9e8:	89 f2       	breq	.-94     	; 0x98c <set_matrix+0x74>
    // key up, and we were not in shift override...
    set_switch(sw,state);
     9ea:	60 e0       	ldi	r22, 0x00	; 0
     9ec:	25 c0       	rjmp	.+74     	; 0xa38 <set_matrix+0x120>
        shift_override_state=sh;
        delay_jiffy();
      }
      set_switch(sw,state);
    }
  } else if(((meta&POLL_FLAG_SHIFT) && sh) || (!(meta&POLL_FLAG_SHIFT) && !sh)) {
     9ee:	11 23       	and	r17, r17
     9f0:	e1 f3       	breq	.-8      	; 0x9ea <set_matrix+0xd2>
     9f2:	cc cf       	rjmp	.-104    	; 0x98c <set_matrix+0x74>
          && sw != POLL_C64_KEY_RSHIFT
          && sw != POLL_C64_KEY_CTRL    // if it is ctrl or cbm, keep.
          && sw != POLL_C64_KEY_CBM
          && sw != shift_override_key // if it is a repeat, keep
         )
         || (sw == shift_override_key && !state)
     9f4:	8c 30       	cpi	r24, 0x0C	; 12
     9f6:	09 f4       	brne	.+2      	; 0x9fa <set_matrix+0xe2>
     9f8:	aa cf       	rjmp	.-172    	; 0x94e <set_matrix+0x36>
     9fa:	cf cf       	rjmp	.-98     	; 0x99a <set_matrix+0x82>
     9fc:	c8 17       	cp	r28, r24
     9fe:	09 f4       	brne	.+2      	; 0xa02 <set_matrix+0xea>
     a00:	a6 cf       	rjmp	.-180    	; 0x94e <set_matrix+0x36>
    //  shift&=(uint8_t)~POLL_FLAG_RSHIFT;
    //else
    //  shift|=(uint8_t)POLL_FLAG_RSHIFT;
    meta=(meta&(uint8_t)~POLL_FLAG_RSHIFT) | (state?POLL_FLAG_RSHIFT:0);
    set_switch(POLL_C64_KEY_RSHIFT,state);
  } else if(state) {
     a02:	dd 23       	and	r29, r29
     a04:	61 f3       	breq	.-40     	; 0x9de <set_matrix+0xc6>
    // key down
    if(!(shift_override && sw == shift_override_key)) {
     a06:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <shift_override.lto_priv.17>
     a0a:	88 23       	and	r24, r24
     a0c:	29 f0       	breq	.+10     	; 0xa18 <set_matrix+0x100>
     a0e:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <shift_override_key.lto_priv.19>
     a12:	8c 17       	cp	r24, r28
     a14:	09 f4       	brne	.+2      	; 0xa18 <set_matrix+0x100>
     a16:	ba cf       	rjmp	.-140    	; 0x98c <set_matrix+0x74>
      if(!(meta & POLL_FLAG_SHIFT) && sh) {
     a18:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <meta.lto_priv.9>
     a1c:	83 70       	andi	r24, 0x03	; 3
     a1e:	51 f6       	brne	.-108    	; 0x9b4 <set_matrix+0x9c>
     a20:	11 23       	and	r17, r17
     a22:	49 f0       	breq	.+18     	; 0xa36 <set_matrix+0x11e>
        //debug2('S');
        // we need to do a virtual shift.
        set_switch(POLL_C64_KEY_LSHIFT,TRUE);
     a24:	61 e0       	ldi	r22, 0x01	; 1
     a26:	82 e7       	ldi	r24, 0x72	; 114
     a28:	0e 94 4c 04 	call	0x898	; 0x898 <set_switch>
        // set special key.
        shift_override=TRUE;
     a2c:	81 e0       	ldi	r24, 0x01	; 1
     a2e:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <shift_override.lto_priv.17>
        shift_override_key=sw;
     a32:	c0 93 43 01 	sts	0x0143, r28	; 0x800143 <shift_override_key.lto_priv.19>
        shift_override=TRUE;
        shift_override_key=sw;
        shift_override_state=sh;
        delay_jiffy();
      }
      set_switch(sw,state);
     a36:	61 e0       	ldi	r22, 0x01	; 1
    }
  } else if(((meta&POLL_FLAG_SHIFT) && sh) || (!(meta&POLL_FLAG_SHIFT) && !sh)) {
    // key up, and we were not in shift override...
    set_switch(sw,state);
     a38:	8c 2f       	mov	r24, r28
     a3a:	a6 cf       	rjmp	.-180    	; 0x988 <set_matrix+0x70>
          && sw != POLL_C64_KEY_RSHIFT
          && sw != POLL_C64_KEY_CTRL    // if it is ctrl or cbm, keep.
          && sw != POLL_C64_KEY_CBM
          && sw != shift_override_key // if it is a repeat, keep
         )
         || (sw == shift_override_key && !state)
     a3c:	82 37       	cpi	r24, 0x72	; 114
     a3e:	09 f0       	breq	.+2      	; 0xa42 <set_matrix+0x12a>
     a40:	9b cf       	rjmp	.-202    	; 0x978 <set_matrix+0x60>
     a42:	85 cf       	rjmp	.-246    	; 0x94e <set_matrix+0x36>

00000a44 <map_positional_c128>:
      set_matrix(sh,POLL_C64_KEY_CRSR_RIGHT,state);
      break;
  }
}

static void map_positional_c128(uint8_t sh, uint8_t code, uint8_t state) {
     a44:	cf 93       	push	r28
  // TODO I really would like to get rid of these functions.
  switch(code) {
     a46:	60 3f       	cpi	r22, 0xF0	; 240
     a48:	09 f4       	brne	.+2      	; 0xa4c <map_positional_c128+0x8>
     a4a:	50 c0       	rjmp	.+160    	; 0xaec <map_positional_c128+0xa8>
     a4c:	98 f5       	brcc	.+102    	; 0xab4 <map_positional_c128+0x70>
     a4e:	6a 3c       	cpi	r22, 0xCA	; 202
     a50:	09 f4       	brne	.+2      	; 0xa54 <map_positional_c128+0x10>
     a52:	49 c0       	rjmp	.+146    	; 0xae6 <map_positional_c128+0xa2>
     a54:	08 f5       	brcc	.+66     	; 0xa98 <map_positional_c128+0x54>
     a56:	61 39       	cpi	r22, 0x91	; 145
     a58:	09 f4       	brne	.+2      	; 0xa5c <map_positional_c128+0x18>
     a5a:	57 c0       	rjmp	.+174    	; 0xb0a <map_positional_c128+0xc6>
     a5c:	64 39       	cpi	r22, 0x94	; 148
     a5e:	09 f4       	brne	.+2      	; 0xa62 <map_positional_c128+0x1e>
     a60:	4c c0       	rjmp	.+152    	; 0xafa <map_positional_c128+0xb6>
     a62:	68 35       	cpi	r22, 0x58	; 88
     a64:	f9 f4       	brne	.+62     	; 0xaa4 <map_positional_c128+0x60>
      sw_state|=(1<<SW_4080);
    }
  }
}
void toggle_caps_lock_key(uint8_t state) {
  if(state) {
     a66:	44 23       	and	r20, r20
     a68:	e9 f0       	breq	.+58     	; 0xaa4 <map_positional_c128+0x60>
    if(sw_state&(1<<SW_CAPSENSE)) {
     a6a:	c0 91 46 01 	lds	r28, 0x0146	; 0x800146 <sw_state>
     a6e:	c0 ff       	sbrs	r28, 0
     a70:	4e c0       	rjmp	.+156    	; 0xb0e <map_positional_c128+0xca>
      // turn it off
      set_switch(POLL_C128_PKEY_CAPSENSE,FALSE);
     a72:	60 e0       	ldi	r22, 0x00	; 0
     a74:	80 e1       	ldi	r24, 0x10	; 16
     a76:	0e 94 4c 04 	call	0x898	; 0x898 <set_switch>
      sw_state&=(uint8_t)~(1<<SW_CAPSENSE);
     a7a:	ce 7f       	andi	r28, 0xFE	; 254
     a7c:	c0 93 46 01 	sts	0x0146, r28	; 0x800146 <sw_state>
  ps2_putc(PS2_CMD_LEDS);
  ps2_putc(led_state);
}

static void clear_LED(uint8_t led) {
  led_state&=(uint8_t)~led;
     a80:	c0 91 47 01 	lds	r28, 0x0147	; 0x800147 <led_state.lto_priv.23>
     a84:	cb 7f       	andi	r28, 0xFB	; 251
     a86:	c0 93 47 01 	sts	0x0147, r28	; 0x800147 <led_state.lto_priv.23>
  ps2_putc(PS2_CMD_LEDS);
     a8a:	8d ee       	ldi	r24, 0xED	; 237
     a8c:	0e 94 3b 03 	call	0x676	; 0x676 <ps2_putc>
  ps2_putc(led_state);
     a90:	8c 2f       	mov	r24, r28
     a92:	0e 94 3b 03 	call	0x676	; 0x676 <ps2_putc>
     a96:	06 c0       	rjmp	.+12     	; 0xaa4 <map_positional_c128+0x60>
  }
}

static void map_positional_c128(uint8_t sh, uint8_t code, uint8_t state) {
  // TODO I really would like to get rid of these functions.
  switch(code) {
     a98:	69 3e       	cpi	r22, 0xE9	; 233
     a9a:	69 f1       	breq	.+90     	; 0xaf6 <map_positional_c128+0xb2>
     a9c:	28 f4       	brcc	.+10     	; 0xaa8 <map_positional_c128+0x64>
     a9e:	6a 3d       	cpi	r22, 0xDA	; 218
     aa0:	09 f4       	brne	.+2      	; 0xaa4 <map_positional_c128+0x60>
     aa2:	40 c0       	rjmp	.+128    	; 0xb24 <map_positional_c128+0xe0>
        toggle_4080_key(state);
      } else
        set_matrix(FALSE,POLL_C128_KEY_HELP,state);
      break;
  }
}
     aa4:	cf 91       	pop	r28
     aa6:	08 95       	ret
  }
}

static void map_positional_c128(uint8_t sh, uint8_t code, uint8_t state) {
  // TODO I really would like to get rid of these functions.
  switch(code) {
     aa8:	6b 3e       	cpi	r22, 0xEB	; 235
     aaa:	69 f1       	breq	.+90     	; 0xb06 <map_positional_c128+0xc2>
     aac:	6c 3e       	cpi	r22, 0xEC	; 236
     aae:	d1 f7       	brne	.-12     	; 0xaa4 <map_positional_c128+0x60>
      break;
    case 0x80 | PS2_KEY_DELETE:
      set_matrix(FALSE,POLL_C64_KEY_DELETE,state);
      break;
    case 0x80 | PS2_KEY_HOME:
      set_matrix(sh,POLL_C64_KEY_HOME,state);
     ab0:	6c e3       	ldi	r22, 0x3C	; 60
     ab2:	10 c0       	rjmp	.+32     	; 0xad4 <map_positional_c128+0x90>
  }
}

static void map_positional_c128(uint8_t sh, uint8_t code, uint8_t state) {
  // TODO I really would like to get rid of these functions.
  switch(code) {
     ab4:	65 3f       	cpi	r22, 0xF5	; 245
     ab6:	29 f1       	breq	.+74     	; 0xb02 <map_positional_c128+0xbe>
     ab8:	38 f4       	brcc	.+14     	; 0xac8 <map_positional_c128+0x84>
     aba:	62 3f       	cpi	r22, 0xF2	; 242
     abc:	01 f1       	breq	.+64     	; 0xafe <map_positional_c128+0xba>
     abe:	c8 f0       	brcs	.+50     	; 0xaf2 <map_positional_c128+0xae>
     ac0:	64 3f       	cpi	r22, 0xF4	; 244
     ac2:	81 f7       	brne	.-32     	; 0xaa4 <map_positional_c128+0x60>
      break;
    case 0x80 | PS2_KEY_CRSR_UP:
      set_matrix(sh,POLL_C128_KEY_CRSR_UP,state);
      break;
    case 0x80 | PS2_KEY_CRSR_RIGHT:
      set_matrix(sh,POLL_C128_KEY_CRSR_RIGHT,state);
     ac4:	68 e1       	ldi	r22, 0x18	; 24
     ac6:	06 c0       	rjmp	.+12     	; 0xad4 <map_positional_c128+0x90>
  }
}

static void map_positional_c128(uint8_t sh, uint8_t code, uint8_t state) {
  // TODO I really would like to get rid of these functions.
  switch(code) {
     ac8:	6a 3f       	cpi	r22, 0xFA	; 250
     aca:	71 f1       	breq	.+92     	; 0xb28 <map_positional_c128+0xe4>
     acc:	30 f4       	brcc	.+12     	; 0xada <map_positional_c128+0x96>
     ace:	67 3f       	cpi	r22, 0xF7	; 247
     ad0:	49 f7       	brne	.-46     	; 0xaa4 <map_positional_c128+0x60>
    case 0x80| PS2_KEY_PAUSE:
      set_matrix(sh,POLL_C64_PKEY_RESTORE,state);
     ad2:	60 e2       	ldi	r22, 0x20	; 32
      break;
    case 0x80 | PS2_KEY_PRINT_SCREEN:
      if(sh) {
        toggle_4080_key(state);
      } else
        set_matrix(FALSE,POLL_C128_KEY_HELP,state);
     ad4:	0e 94 8c 04 	call	0x918	; 0x918 <set_matrix>
     ad8:	e5 cf       	rjmp	.-54     	; 0xaa4 <map_positional_c128+0x60>
  }
}

static void map_positional_c128(uint8_t sh, uint8_t code, uint8_t state) {
  // TODO I really would like to get rid of these functions.
  switch(code) {
     ada:	6c 3f       	cpi	r22, 0xFC	; 252
     adc:	39 f1       	breq	.+78     	; 0xb2c <map_positional_c128+0xe8>
     ade:	6d 3f       	cpi	r22, 0xFD	; 253
     ae0:	09 f7       	brne	.-62     	; 0xaa4 <map_positional_c128+0x60>
    case 0x80 | PS2_KEY_NUM_ENTER:
      set_matrix(sh,POLL_C128_KEY_ENTER,state);
      break;
    // new stuff.
    case 0x80 | PS2_KEY_PAGE_UP:
      set_matrix(sh,POLL_C64_KEY_CRSR_DOWN,state);
     ae2:	66 e3       	ldi	r22, 0x36	; 54
     ae4:	f7 cf       	rjmp	.-18     	; 0xad4 <map_positional_c128+0x90>
  switch(code) {
    case 0x80| PS2_KEY_PAUSE:
      set_matrix(sh,POLL_C64_PKEY_RESTORE,state);
      break;
    case 0x80 | PS2_KEY_NUM_SLASH:
      set_matrix(FALSE,POLL_C64_KEY_SLASH,state);
     ae6:	6e e3       	ldi	r22, 0x3E	; 62
      break;
    case 0x80 | PS2_KEY_PRINT_SCREEN:
      if(sh) {
        toggle_4080_key(state);
      } else
        set_matrix(FALSE,POLL_C128_KEY_HELP,state);
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	f4 cf       	rjmp	.-24     	; 0xad4 <map_positional_c128+0x90>
      break;
    case 0x80 | PS2_KEY_NUM_SLASH:
      set_matrix(FALSE,POLL_C64_KEY_SLASH,state);
      break;
    case 0x80 | PS2_KEY_INSERT:
      set_matrix(TRUE,POLL_C64_KEY_DELETE,state);
     aec:	66 e0       	ldi	r22, 0x06	; 6
     aee:	81 e0       	ldi	r24, 0x01	; 1
     af0:	f1 cf       	rjmp	.-30     	; 0xad4 <map_positional_c128+0x90>
      break;
    case 0x80 | PS2_KEY_DELETE:
      set_matrix(FALSE,POLL_C64_KEY_DELETE,state);
     af2:	66 e0       	ldi	r22, 0x06	; 6
     af4:	f9 cf       	rjmp	.-14     	; 0xae8 <map_positional_c128+0xa4>
      break;
    case 0x80 | PS2_KEY_HOME:
      set_matrix(sh,POLL_C64_KEY_HOME,state);
      break;
    case 0x80 | PS2_KEY_END:
      set_matrix(sh,POLL_C64_KEY_RUNSTOP,state);
     af6:	6a e7       	ldi	r22, 0x7A	; 122
     af8:	ed cf       	rjmp	.-38     	; 0xad4 <map_positional_c128+0x90>
      break;
    case 0x80 | PS2_KEY_RCTRL:
      set_matrix(sh,POLL_C64_KEY_CTRL,state);
     afa:	6a e5       	ldi	r22, 0x5A	; 90
     afc:	eb cf       	rjmp	.-42     	; 0xad4 <map_positional_c128+0x90>
      break;
    // changed stuff
    case 0x80 | PS2_KEY_CRSR_DOWN:
      set_matrix(sh,POLL_C128_KEY_CRSR_DOWN,state);
     afe:	68 e0       	ldi	r22, 0x08	; 8
     b00:	e9 cf       	rjmp	.-46     	; 0xad4 <map_positional_c128+0x90>
      break;
    case 0x80 | PS2_KEY_CRSR_UP:
      set_matrix(sh,POLL_C128_KEY_CRSR_UP,state);
     b02:	68 e3       	ldi	r22, 0x38	; 56
     b04:	e7 cf       	rjmp	.-50     	; 0xad4 <map_positional_c128+0x90>
      break;
    case 0x80 | PS2_KEY_CRSR_RIGHT:
      set_matrix(sh,POLL_C128_KEY_CRSR_RIGHT,state);
      break;
    case 0x80 | PS2_KEY_CRSR_LEFT:
      set_matrix(sh,POLL_C128_KEY_CRSR_LEFT,state);
     b06:	68 e2       	ldi	r22, 0x28	; 40
     b08:	e5 cf       	rjmp	.-54     	; 0xad4 <map_positional_c128+0x90>
      break;
    case 0x80 | PS2_KEY_RALT:
      set_matrix(sh,POLL_C128_KEY_ALT,state);
     b0a:	6a e0       	ldi	r22, 0x0A	; 10
     b0c:	e3 cf       	rjmp	.-58     	; 0xad4 <map_positional_c128+0x90>
      set_switch(POLL_C128_PKEY_CAPSENSE,FALSE);
      sw_state&=(uint8_t)~(1<<SW_CAPSENSE);
      clear_LED(PS2_LED_CAPS_LOCK);
    } else {
      // turn it on
      set_switch(POLL_C128_PKEY_CAPSENSE,TRUE);
     b0e:	61 e0       	ldi	r22, 0x01	; 1
     b10:	80 e1       	ldi	r24, 0x10	; 16
     b12:	0e 94 4c 04 	call	0x898	; 0x898 <set_switch>
      sw_state|=(1<<SW_CAPSENSE);
     b16:	c1 60       	ori	r28, 0x01	; 1
     b18:	c0 93 46 01 	sts	0x0146, r28	; 0x800146 <sw_state>
      set_LED(PS2_LED_CAPS_LOCK);
     b1c:	84 e0       	ldi	r24, 0x04	; 4
     b1e:	0e 94 2a 04 	call	0x854	; 0x854 <set_LED>
     b22:	c0 cf       	rjmp	.-128    	; 0xaa4 <map_positional_c128+0x60>
      break;
    case PS2_KEY_CAPS_LOCK:
      toggle_caps_lock_key(state);
      break;
    case 0x80 | PS2_KEY_NUM_ENTER:
      set_matrix(sh,POLL_C128_KEY_ENTER,state);
     b24:	60 e8       	ldi	r22, 0x80	; 128
     b26:	d6 cf       	rjmp	.-84     	; 0xad4 <map_positional_c128+0x90>
    // new stuff.
    case 0x80 | PS2_KEY_PAGE_UP:
      set_matrix(sh,POLL_C64_KEY_CRSR_DOWN,state);
      break;
    case 0x80 | PS2_KEY_PAGE_DOWN:
      set_matrix(sh,POLL_C64_KEY_CRSR_RIGHT,state);
     b28:	66 e1       	ldi	r22, 0x16	; 22
     b2a:	d4 cf       	rjmp	.-88     	; 0xad4 <map_positional_c128+0x90>
      break;
    case 0x80 | PS2_KEY_PRINT_SCREEN:
      if(sh) {
        toggle_4080_key(state);
      } else
        set_matrix(FALSE,POLL_C128_KEY_HELP,state);
     b2c:	6a e8       	ldi	r22, 0x8A	; 138
      break;
    case 0x80 | PS2_KEY_PAGE_DOWN:
      set_matrix(sh,POLL_C64_KEY_CRSR_RIGHT,state);
      break;
    case 0x80 | PS2_KEY_PRINT_SCREEN:
      if(sh) {
     b2e:	88 23       	and	r24, r24
     b30:	d9 f2       	breq	.-74     	; 0xae8 <map_positional_c128+0xa4>
  else
    set_LED(PS2_LED_NUM_LOCK);
}

void toggle_4080_key(uint8_t state) {
  if(state) {
     b32:	44 23       	and	r20, r20
     b34:	09 f4       	brne	.+2      	; 0xb38 <map_positional_c128+0xf4>
     b36:	b6 cf       	rjmp	.-148    	; 0xaa4 <map_positional_c128+0x60>
    if(sw_state&(1<<SW_4080)) {
     b38:	c0 91 46 01 	lds	r28, 0x0146	; 0x800146 <sw_state>
     b3c:	c1 ff       	sbrs	r28, 1
     b3e:	08 c0       	rjmp	.+16     	; 0xb50 <map_positional_c128+0x10c>
      // turn it off
      set_switch(POLL_C128_PKEY_4080,FALSE);
     b40:	60 e0       	ldi	r22, 0x00	; 0
     b42:	80 e0       	ldi	r24, 0x00	; 0
     b44:	0e 94 4c 04 	call	0x898	; 0x898 <set_switch>
      sw_state&=(uint8_t)~(1<<SW_4080);
     b48:	cd 7f       	andi	r28, 0xFD	; 253
    } else {
      // turn it on
      set_switch(POLL_C128_PKEY_4080,TRUE);
      sw_state|=(1<<SW_4080);
     b4a:	c0 93 46 01 	sts	0x0146, r28	; 0x800146 <sw_state>
     b4e:	aa cf       	rjmp	.-172    	; 0xaa4 <map_positional_c128+0x60>
      // turn it off
      set_switch(POLL_C128_PKEY_4080,FALSE);
      sw_state&=(uint8_t)~(1<<SW_4080);
    } else {
      // turn it on
      set_switch(POLL_C128_PKEY_4080,TRUE);
     b50:	61 e0       	ldi	r22, 0x01	; 1
     b52:	80 e0       	ldi	r24, 0x00	; 0
     b54:	0e 94 4c 04 	call	0x898	; 0x898 <set_switch>
      sw_state|=(1<<SW_4080);
     b58:	c2 60       	ori	r28, 0x02	; 2
     b5a:	f7 cf       	rjmp	.-18     	; 0xb4a <map_positional_c128+0x106>

00000b5c <LED_irq>:
void LED_off(uint8_t led) {
  led_program[led]=0; 
  led_count[led]=0;
}

void LED_irq(void) {
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	80 e0       	ldi	r24, 0x00	; 0
  uint8_t i;
  uint8_t on=FALSE;
     b60:	50 e0       	ldi	r21, 0x00	; 0
  
  for(i=0;i<8;i++) {
    if(led_mask&(1<<i)) {
     b62:	20 91 8e 01 	lds	r18, 0x018E	; 0x80018e <led_mask>
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	08 2e       	mov	r0, r24
     b6a:	02 c0       	rjmp	.+4      	; 0xb70 <LED_irq+0x14>
     b6c:	35 95       	asr	r19
     b6e:	27 95       	ror	r18
     b70:	0a 94       	dec	r0
     b72:	e2 f7       	brpl	.-8      	; 0xb6c <LED_irq+0x10>
     b74:	20 ff       	sbrs	r18, 0
     b76:	32 c0       	rjmp	.+100    	; 0xbdc <LED_irq+0x80>
     b78:	fc 01       	movw	r30, r24
     b7a:	ea 57       	subi	r30, 0x7A	; 122
     b7c:	fe 4f       	sbci	r31, 0xFE	; 254
      switch(led_program[i]) {
     b7e:	40 81       	ld	r20, Z
     b80:	44 23       	and	r20, r20
     b82:	91 f1       	breq	.+100    	; 0xbe8 <LED_irq+0x8c>
     b84:	4f 3f       	cpi	r20, 0xFF	; 255
     b86:	c9 f0       	breq	.+50     	; 0xbba <LED_irq+0x5e>
          on=TRUE;
          break;
        case 0x00:  // LED off
          break;
        default:  // LED blink
          if(led_status&(1<<i)) {
     b88:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <__data_end>
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	08 2e       	mov	r0, r24
     b90:	02 c0       	rjmp	.+4      	; 0xb96 <LED_irq+0x3a>
     b92:	35 95       	asr	r19
     b94:	27 95       	ror	r18
     b96:	0a 94       	dec	r0
     b98:	e2 f7       	brpl	.-8      	; 0xb92 <LED_irq+0x36>
     b9a:	20 fd       	sbrc	r18, 0
     b9c:	25 c0       	rjmp	.+74     	; 0xbe8 <LED_irq+0x8c>
     b9e:	dc 01       	movw	r26, r24
     ba0:	a2 58       	subi	r26, 0x82	; 130
     ba2:	be 4f       	sbci	r27, 0xFE	; 254
          } else {
            led_count[i]++;
     ba4:	2c 91       	ld	r18, X
     ba6:	2f 5f       	subi	r18, 0xFF	; 255
     ba8:	2c 93       	st	X, r18
            if(led_count[i]<=(led_program[i]&LED_COUNT_MASK)) {
     baa:	34 2f       	mov	r19, r20
     bac:	3f 77       	andi	r19, 0x7F	; 127
     bae:	32 17       	cp	r19, r18
     bb0:	20 f4       	brcc	.+8      	; 0xbba <LED_irq+0x5e>
              on=TRUE;
            } else if(led_program[i]&LED_FLAG_END_ON) {
     bb2:	47 ff       	sbrs	r20, 7
     bb4:	19 c0       	rjmp	.+50     	; 0xbe8 <LED_irq+0x8c>
              on=TRUE;
              led_program[i]=0xff;
     bb6:	2f ef       	ldi	r18, 0xFF	; 255
     bb8:	20 83       	st	Z, r18
      }
      if(on) {
  #ifdef INVERSE          
        LED_PORT&=(uint8_t)~(1<<i);
  #else
        LED_PORT|=(1<<i);
     bba:	42 b3       	in	r20, 0x12	; 18
     bbc:	21 e0       	ldi	r18, 0x01	; 1
     bbe:	30 e0       	ldi	r19, 0x00	; 0
     bc0:	08 2e       	mov	r0, r24
     bc2:	01 c0       	rjmp	.+2      	; 0xbc6 <LED_irq+0x6a>
     bc4:	22 0f       	add	r18, r18
     bc6:	0a 94       	dec	r0
     bc8:	ea f7       	brpl	.-6      	; 0xbc4 <LED_irq+0x68>
     bca:	34 2f       	mov	r19, r20
     bcc:	32 2b       	or	r19, r18
     bce:	32 bb       	out	0x12, r19	; 18
  #endif
        led_status|=(1<<i);
     bd0:	30 91 10 01 	lds	r19, 0x0110	; 0x800110 <__data_end>
     bd4:	23 2b       	or	r18, r19
     bd6:	20 93 10 01 	sts	0x0110, r18	; 0x800110 <__data_end>
     bda:	51 e0       	ldi	r21, 0x01	; 1
     bdc:	01 96       	adiw	r24, 0x01	; 1

void LED_irq(void) {
  uint8_t i;
  uint8_t on=FALSE;
  
  for(i=0;i<8;i++) {
     bde:	88 30       	cpi	r24, 0x08	; 8
     be0:	91 05       	cpc	r25, r1
     be2:	09 f0       	breq	.+2      	; 0xbe6 <LED_irq+0x8a>
     be4:	be cf       	rjmp	.-132    	; 0xb62 <LED_irq+0x6>
  #endif
        led_status&=(uint8_t)~(1<<i);
      }
    }
  }
}
     be6:	08 95       	ret
              on=TRUE;
              led_program[i]=0xff;
            }
          }
      }
      if(on) {
     be8:	51 11       	cpse	r21, r1
     bea:	e7 cf       	rjmp	.-50     	; 0xbba <LED_irq+0x5e>
        led_status|=(1<<i);
      } else {
  #ifdef INVERSE          
        LED_PORT|=(1<<i);
  #else
        LED_PORT&=(uint8_t)~(1<<i);
     bec:	42 b3       	in	r20, 0x12	; 18
     bee:	21 e0       	ldi	r18, 0x01	; 1
     bf0:	30 e0       	ldi	r19, 0x00	; 0
     bf2:	08 2e       	mov	r0, r24
     bf4:	01 c0       	rjmp	.+2      	; 0xbf8 <LED_irq+0x9c>
     bf6:	22 0f       	add	r18, r18
     bf8:	0a 94       	dec	r0
     bfa:	ea f7       	brpl	.-6      	; 0xbf6 <LED_irq+0x9a>
     bfc:	20 95       	com	r18
     bfe:	34 2f       	mov	r19, r20
     c00:	32 23       	and	r19, r18
     c02:	32 bb       	out	0x12, r19	; 18
  #endif
        led_status&=(uint8_t)~(1<<i);
     c04:	30 91 10 01 	lds	r19, 0x0110	; 0x800110 <__data_end>
     c08:	23 23       	and	r18, r19
     c0a:	20 93 10 01 	sts	0x0110, r18	; 0x800110 <__data_end>
     c0e:	e6 cf       	rjmp	.-52     	; 0xbdc <LED_irq+0x80>

00000c10 <kb_set_repeat_code>:
void kb_set_repeat_period(uint16_t period) {
  kb_repeat_period = (period << 1);
}

void kb_set_repeat_code(uint8_t code) {
  if(code != kb_repeat_code) {
     c10:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <kb_repeat_code>
     c14:	98 17       	cp	r25, r24
     c16:	51 f0       	breq	.+20     	; 0xc2c <kb_set_repeat_code+0x1c>
    kb_repeat_count = kb_repeat_delay;
     c18:	20 91 2b 01 	lds	r18, 0x012B	; 0x80012b <kb_repeat_delay>
     c1c:	30 91 2c 01 	lds	r19, 0x012C	; 0x80012c <kb_repeat_delay+0x1>
     c20:	30 93 2a 01 	sts	0x012A, r19	; 0x80012a <kb_repeat_count+0x1>
     c24:	20 93 29 01 	sts	0x0129, r18	; 0x800129 <kb_repeat_count>
    kb_repeat_code = code;
     c28:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <kb_repeat_code>
  }
}
     c2c:	08 95       	ret

00000c2e <do_joy>:
      break;
  }
  return i;
}

void do_joy(uint8_t *joy, uint8_t data, const uint8_t map[8],const uint8_t table[9][2]) {
     c2e:	ef 92       	push	r14
     c30:	ff 92       	push	r15
     c32:	0f 93       	push	r16
     c34:	1f 93       	push	r17
     c36:	cf 93       	push	r28
     c38:	df 93       	push	r29
     c3a:	8c 01       	movw	r16, r24
     c3c:	c6 2f       	mov	r28, r22
     c3e:	79 01       	movw	r14, r18
  uint8_t i;
  uint8_t new;
  
  // get new button
  new=pgm_read_byte(&map[data&0x07]);
     c40:	e6 2f       	mov	r30, r22
     c42:	e7 70       	andi	r30, 0x07	; 7
     c44:	e4 0f       	add	r30, r20
     c46:	f5 2f       	mov	r31, r21
     c48:	f1 1d       	adc	r31, r1
     c4a:	d4 91       	lpm	r29, Z
  if((data & KB_KEY_UP) != 0) {
     c4c:	67 ff       	sbrs	r22, 7
     c4e:	22 c0       	rjmp	.+68     	; 0xc94 <do_joy+0x66>
    
    if(new == POLL_JOY_FIRE) {
     c50:	d0 31       	cpi	r29, 0x10	; 16
     c52:	79 f0       	breq	.+30     	; 0xc72 <do_joy+0x44>
      // fire not pressed
      i=8;
    } else {
      // direction change
      i=get_joy_direction(joy);
     c54:	0e 94 74 02 	call	0x4e8	; 0x4e8 <get_joy_direction>
     c58:	c8 2f       	mov	r28, r24
    }
    if(i<9) {
     c5a:	89 30       	cpi	r24, 0x09	; 9
     c5c:	58 f0       	brcs	.+22     	; 0xc74 <do_joy+0x46>
      kb_set_repeat_code(KB_NO_REPEAT);
      send_key_code(pgm_read_byte(&table[i][0]),pgm_read_byte(&table[i][1]),FALSE);
    }
    (*joy)&=(uint8_t)~new;
     c5e:	d0 95       	com	r29
     c60:	d8 01       	movw	r26, r16
     c62:	ec 91       	ld	r30, X
     c64:	ed 23       	and	r30, r29
     c66:	ec 93       	st	X, r30
    if(i<9) {
      send_key_code(pgm_read_byte(&table[i][0]),pgm_read_byte(&table[i][1]),TRUE);
      kb_set_repeat_code(data);
    }
  }
}
     c68:	cd b7       	in	r28, 0x3d	; 61
     c6a:	de b7       	in	r29, 0x3e	; 62
     c6c:	e6 e0       	ldi	r30, 0x06	; 6
     c6e:	0c 94 a2 0e 	jmp	0x1d44	; 0x1d44 <__epilogue_restores__+0x18>
  new=pgm_read_byte(&map[data&0x07]);
  if((data & KB_KEY_UP) != 0) {
    
    if(new == POLL_JOY_FIRE) {
      // fire not pressed
      i=8;
     c72:	c8 e0       	ldi	r28, 0x08	; 8
    } else {
      // direction change
      i=get_joy_direction(joy);
    }
    if(i<9) {
      kb_set_repeat_code(KB_NO_REPEAT);
     c74:	8f ef       	ldi	r24, 0xFF	; 255
     c76:	0e 94 08 06 	call	0xc10	; 0xc10 <kb_set_repeat_code>
      send_key_code(pgm_read_byte(&table[i][0]),pgm_read_byte(&table[i][1]),FALSE);
     c7a:	ec 2f       	mov	r30, r28
     c7c:	f0 e0       	ldi	r31, 0x00	; 0
     c7e:	ee 0f       	add	r30, r30
     c80:	ff 1f       	adc	r31, r31
     c82:	ee 0d       	add	r30, r14
     c84:	ff 1d       	adc	r31, r15
     c86:	84 91       	lpm	r24, Z
     c88:	31 96       	adiw	r30, 0x01	; 1
     c8a:	64 91       	lpm	r22, Z
     c8c:	40 e0       	ldi	r20, 0x00	; 0
     c8e:	0e 94 80 03 	call	0x700	; 0x700 <send_key_code>
     c92:	e5 cf       	rjmp	.-54     	; 0xc5e <do_joy+0x30>
    }
    (*joy)&=(uint8_t)~new;
  } else {
    (*joy)|=new;
     c94:	fc 01       	movw	r30, r24
     c96:	80 81       	ld	r24, Z
     c98:	8d 2b       	or	r24, r29
     c9a:	80 83       	st	Z, r24
    if(new == POLL_JOY_FIRE) {
     c9c:	d0 31       	cpi	r29, 0x10	; 16
     c9e:	a9 f0       	breq	.+42     	; 0xcca <do_joy+0x9c>
      // fire pressed
      i=8;
    } else {
      // direction change
      i=get_joy_direction(joy);
     ca0:	c8 01       	movw	r24, r16
     ca2:	0e 94 74 02 	call	0x4e8	; 0x4e8 <get_joy_direction>
    }
    if(i<9) {
     ca6:	89 30       	cpi	r24, 0x09	; 9
     ca8:	f8 f6       	brcc	.-66     	; 0xc68 <do_joy+0x3a>
      send_key_code(pgm_read_byte(&table[i][0]),pgm_read_byte(&table[i][1]),TRUE);
     caa:	e8 2f       	mov	r30, r24
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	ee 0f       	add	r30, r30
     cb0:	ff 1f       	adc	r31, r31
     cb2:	ee 0d       	add	r30, r14
     cb4:	ff 1d       	adc	r31, r15
     cb6:	84 91       	lpm	r24, Z
     cb8:	31 96       	adiw	r30, 0x01	; 1
     cba:	64 91       	lpm	r22, Z
     cbc:	41 e0       	ldi	r20, 0x01	; 1
     cbe:	0e 94 80 03 	call	0x700	; 0x700 <send_key_code>
      kb_set_repeat_code(data);
     cc2:	8c 2f       	mov	r24, r28
     cc4:	0e 94 08 06 	call	0xc10	; 0xc10 <kb_set_repeat_code>
     cc8:	cf cf       	rjmp	.-98     	; 0xc68 <do_joy+0x3a>
    (*joy)&=(uint8_t)~new;
  } else {
    (*joy)|=new;
    if(new == POLL_JOY_FIRE) {
      // fire pressed
      i=8;
     cca:	88 e0       	ldi	r24, 0x08	; 8
     ccc:	ee cf       	rjmp	.-36     	; 0xcaa <do_joy+0x7c>

00000cce <parse_key>:
      kb_set_repeat_code(data);
    }
  }
}

void parse_key(uint8_t data) {
     cce:	1f 93       	push	r17
     cd0:	cf 93       	push	r28
     cd2:	df 93       	push	r29
     cd4:	d8 2f       	mov	r29, r24
  uint8_t key;
  uint8_t state=(data & KB_KEY_UP?FALSE:TRUE);
  uint8_t sh=(meta&SCAN_FLAG_SHIFT?1:0);
  uint8_t code=data & (uint8_t)~(KB_KEY_UP);
     cd6:	c8 2f       	mov	r28, r24
     cd8:	cf 77       	andi	r28, 0x7F	; 127
  
  if(code < 0x58) {
     cda:	c8 35       	cpi	r28, 0x58	; 88
     cdc:	08 f0       	brcs	.+2      	; 0xce0 <parse_key+0x12>
     cde:	44 c0       	rjmp	.+136    	; 0xd68 <parse_key+0x9a>
    key=pgm_read_byte(&normal[code]);
     ce0:	ec 2f       	mov	r30, r28
     ce2:	f0 e0       	ldi	r31, 0x00	; 0
     ce4:	e8 5a       	subi	r30, 0xA8	; 168
     ce6:	fc 4f       	sbci	r31, 0xFC	; 252
     ce8:	14 91       	lpm	r17, Z
    if(key < SCAN_CBM_KEY_SPECIAL) {
     cea:	10 3c       	cpi	r17, 0xC0	; 192
     cec:	98 f4       	brcc	.+38     	; 0xd14 <parse_key+0x46>
      // cancel override, if in effect.
      check_override();
     cee:	0e 94 56 03 	call	0x6ac	; 0x6ac <check_override>
      if(!state) {
     cf2:	d7 ff       	sbrs	r29, 7
     cf4:	03 c0       	rjmp	.+6      	; 0xcfc <parse_key+0x2e>
        ps2_putc(PS2_KEY_UP);
     cf6:	80 ef       	ldi	r24, 0xF0	; 240
     cf8:	0e 94 3b 03 	call	0x676	; 0x676 <ps2_putc>
      }
      ps2_putc(key);
     cfc:	81 2f       	mov	r24, r17
     cfe:	0e 94 3b 03 	call	0x676	; 0x676 <ps2_putc>
    } else if(key != SCAN_CBM_KEY_NONE) {
      key&=0x3f;
      send_key_code(pgm_read_byte(&layouts[layout][key][sh][0]),pgm_read_byte(&layouts[layout][key][sh][1]),state);
    }
    // if we pressed a key, make it the new repeat key.
    if(state)
     d02:	d7 fd       	sbrc	r29, 7
     d04:	03 c0       	rjmp	.+6      	; 0xd0c <parse_key+0x3e>
      kb_set_repeat_code(code);
     d06:	8c 2f       	mov	r24, r28
     d08:	0e 94 08 06 	call	0xc10	; 0xc10 <kb_set_repeat_code>
    do_joy(&joy0,data,joy_table[0],joy_mapping[0]);
  } else if(code >= 0x78 && code < 0x80) {
    // joy1 new
    do_joy(&joy1,data,joy_table[1],joy_mapping[1]);
  }
}
     d0c:	df 91       	pop	r29
     d0e:	cf 91       	pop	r28
     d10:	1f 91       	pop	r17
     d12:	08 95       	ret
      check_override();
      if(!state) {
        ps2_putc(PS2_KEY_UP);
      }
      ps2_putc(key);
    } else if(key != SCAN_CBM_KEY_NONE) {
     d14:	1f 3f       	cpi	r17, 0xFF	; 255
     d16:	a9 f3       	breq	.-22     	; 0xd02 <parse_key+0x34>
     d18:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <layout.lto_priv.14>
      key&=0x3f;
     d1c:	1f 73       	andi	r17, 0x3F	; 63
     d1e:	61 2f       	mov	r22, r17
     d20:	70 e0       	ldi	r23, 0x00	; 0
     d22:	99 e1       	ldi	r25, 0x19	; 25
     d24:	89 9f       	mul	r24, r25
     d26:	60 0d       	add	r22, r0
     d28:	71 1d       	adc	r23, r1
     d2a:	11 24       	eor	r1, r1
     d2c:	66 0f       	add	r22, r22
     d2e:	77 1f       	adc	r23, r23
}

void parse_key(uint8_t data) {
  uint8_t key;
  uint8_t state=(data & KB_KEY_UP?FALSE:TRUE);
  uint8_t sh=(meta&SCAN_FLAG_SHIFT?1:0);
     d30:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <meta.lto_priv.10>
     d34:	83 70       	andi	r24, 0x03	; 3
     d36:	e1 e0       	ldi	r30, 0x01	; 1
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	11 f4       	brne	.+4      	; 0xd40 <parse_key+0x72>
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	e0 e0       	ldi	r30, 0x00	; 0
     d40:	6e 0f       	add	r22, r30
     d42:	7f 1f       	adc	r23, r31
     d44:	66 0f       	add	r22, r22
     d46:	77 1f       	adc	r23, r23
        ps2_putc(PS2_KEY_UP);
      }
      ps2_putc(key);
    } else if(key != SCAN_CBM_KEY_NONE) {
      key&=0x3f;
      send_key_code(pgm_read_byte(&layouts[layout][key][sh][0]),pgm_read_byte(&layouts[layout][key][sh][1]),state);
     d48:	fb 01       	movw	r30, r22
     d4a:	e0 57       	subi	r30, 0x70	; 112
     d4c:	fd 4f       	sbci	r31, 0xFD	; 253
     d4e:	84 91       	lpm	r24, Z
     d50:	6f 56       	subi	r22, 0x6F	; 111
     d52:	7d 4f       	sbci	r23, 0xFD	; 253
     d54:	fb 01       	movw	r30, r22
     d56:	64 91       	lpm	r22, Z
  }
}

void parse_key(uint8_t data) {
  uint8_t key;
  uint8_t state=(data & KB_KEY_UP?FALSE:TRUE);
     d58:	4d 2f       	mov	r20, r29
     d5a:	40 95       	com	r20
     d5c:	44 1f       	adc	r20, r20
     d5e:	44 27       	eor	r20, r20
     d60:	44 1f       	adc	r20, r20
        ps2_putc(PS2_KEY_UP);
      }
      ps2_putc(key);
    } else if(key != SCAN_CBM_KEY_NONE) {
      key&=0x3f;
      send_key_code(pgm_read_byte(&layouts[layout][key][sh][0]),pgm_read_byte(&layouts[layout][key][sh][1]),state);
     d62:	0e 94 80 03 	call	0x700	; 0x700 <send_key_code>
     d66:	cd cf       	rjmp	.-102    	; 0xd02 <parse_key+0x34>
    }
    // if we pressed a key, make it the new repeat key.
    if(state)
      kb_set_repeat_code(code);
  } else if(code > 0x57 && code < 0x5d) {
     d68:	88 ea       	ldi	r24, 0xA8	; 168
     d6a:	8c 0f       	add	r24, r28
     d6c:	85 30       	cpi	r24, 0x05	; 5
     d6e:	50 f4       	brcc	.+20     	; 0xd84 <parse_key+0xb6>
    // joy0, when JP4 is set to scan.
    do_joy(&joy0,data,joy_table[0],joy_mapping[0]);
     d70:	2c e5       	ldi	r18, 0x5C	; 92
     d72:	32 e0       	ldi	r19, 0x02	; 2
     d74:	40 e8       	ldi	r20, 0x80	; 128
     d76:	52 e0       	ldi	r21, 0x02	; 2
     d78:	6d 2f       	mov	r22, r29
     d7a:	89 e6       	ldi	r24, 0x69	; 105
     d7c:	91 e0       	ldi	r25, 0x01	; 1
  } else if(code >= 0x70 && code < 0x78) {
    // joy0 new
    do_joy(&joy0,data,joy_table[0],joy_mapping[0]);
  } else if(code >= 0x78 && code < 0x80) {
    // joy1 new
    do_joy(&joy1,data,joy_table[1],joy_mapping[1]);
     d7e:	0e 94 17 06 	call	0xc2e	; 0xc2e <do_joy>
     d82:	c4 cf       	rjmp	.-120    	; 0xd0c <parse_key+0x3e>
    if(state)
      kb_set_repeat_code(code);
  } else if(code > 0x57 && code < 0x5d) {
    // joy0, when JP4 is set to scan.
    do_joy(&joy0,data,joy_table[0],joy_mapping[0]);
  } else if(code >= 0x70 && code < 0x78) {
     d84:	80 e9       	ldi	r24, 0x90	; 144
     d86:	8c 0f       	add	r24, r28
     d88:	88 30       	cpi	r24, 0x08	; 8
     d8a:	90 f3       	brcs	.-28     	; 0xd70 <parse_key+0xa2>
    // joy0 new
    do_joy(&joy0,data,joy_table[0],joy_mapping[0]);
  } else if(code >= 0x78 && code < 0x80) {
     d8c:	c8 57       	subi	r28, 0x78	; 120
     d8e:	c8 30       	cpi	r28, 0x08	; 8
     d90:	08 f0       	brcs	.+2      	; 0xd94 <parse_key+0xc6>
     d92:	bc cf       	rjmp	.-136    	; 0xd0c <parse_key+0x3e>
    // joy1 new
    do_joy(&joy1,data,joy_table[1],joy_mapping[1]);
     d94:	2e e6       	ldi	r18, 0x6E	; 110
     d96:	32 e0       	ldi	r19, 0x02	; 2
     d98:	48 e8       	ldi	r20, 0x88	; 136
     d9a:	52 e0       	ldi	r21, 0x02	; 2
     d9c:	6d 2f       	mov	r22, r29
     d9e:	88 e6       	ldi	r24, 0x68	; 104
     da0:	91 e0       	ldi	r25, 0x01	; 1
     da2:	ed cf       	rjmp	.-38     	; 0xd7e <parse_key+0xb0>

00000da4 <kb_store>:
static volatile uint8_t  kb_curr_value;

static void kb_store(uint8_t data) {
  uint8_t tmphead;
  
  tmphead = (kb_rxhead + 1) & KB_RX_BUFFER_MASK;
     da4:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <kb_rxhead>
     da8:	ef 5f       	subi	r30, 0xFF	; 255
     daa:	ef 70       	andi	r30, 0x0F	; 15
  kb_rxhead = tmphead;      /* Store new index */
     dac:	e0 93 40 01 	sts	0x0140, r30	; 0x800140 <kb_rxhead>

  //if ( tmphead == kb_rxtail ) {
    /* ERROR! Receive buffer overflow */
  //}
  
  kb_rxbuf[tmphead] = data; /* Store received data in buffer */
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	e1 5d       	subi	r30, 0xD1	; 209
     db4:	fe 4f       	sbci	r31, 0xFE	; 254
     db6:	80 83       	st	Z, r24
}
     db8:	08 95       	ret

00000dba <kb_decode>:

static void kb_decode(uint8_t new, uint8_t *old, uint8_t base) {
     dba:	b0 e0       	ldi	r27, 0x00	; 0
     dbc:	a0 e0       	ldi	r26, 0x00	; 0
     dbe:	e3 ee       	ldi	r30, 0xE3	; 227
     dc0:	f6 e0       	ldi	r31, 0x06	; 6
     dc2:	0c 94 85 0e 	jmp	0x1d0a	; 0x1d0a <__prologue_saves__+0x16>
     dc6:	08 2f       	mov	r16, r24
     dc8:	7b 01       	movw	r14, r22
     dca:	14 2f       	mov	r17, r20
    which will tell us what changed.
    
    Then, new & xor gives us new keys
    and old and xor gives us keys no longer pressed.
  */
  mask = new ^ *old;
     dcc:	fb 01       	movw	r30, r22
     dce:	c0 81       	ld	r28, Z
  result = (*old & mask);
     dd0:	d8 2f       	mov	r29, r24
     dd2:	d0 95       	com	r29
     dd4:	dc 23       	and	r29, r28
     dd6:	d4 2e       	mov	r13, r20
  i = 0;
  while(result) {
     dd8:	d1 11       	cpse	r29, r1
     dda:	0b c0       	rjmp	.+22     	; 0xdf2 <kb_decode+0x38>
    if(result & 1)
      kb_store((base + i) | KB_KEY_UP);
    result = result >> 1;
    i++;
  }
  result=(new & mask);
     ddc:	c0 95       	com	r28
     dde:	c0 23       	and	r28, r16
  i = 0;
  while(result) {
     de0:	c1 11       	cpse	r28, r1
     de2:	10 c0       	rjmp	.+32     	; 0xe04 <kb_decode+0x4a>
    if(result & 1)
      kb_store(base + i);
    result = result >> 1;
    i++;
  }
  *old = new;
     de4:	f7 01       	movw	r30, r14
     de6:	00 83       	st	Z, r16
}
     de8:	cd b7       	in	r28, 0x3d	; 61
     dea:	de b7       	in	r29, 0x3e	; 62
     dec:	e7 e0       	ldi	r30, 0x07	; 7
     dee:	0c 94 a1 0e 	jmp	0x1d42	; 0x1d42 <__epilogue_restores__+0x16>
  mask = new ^ *old;
  result = (*old & mask);
  i = 0;
  while(result) {
    // we have keys no longer pressed.
    if(result & 1)
     df2:	d0 ff       	sbrs	r29, 0
     df4:	04 c0       	rjmp	.+8      	; 0xdfe <kb_decode+0x44>
      kb_store((base + i) | KB_KEY_UP);
     df6:	8d 2d       	mov	r24, r13
     df8:	80 68       	ori	r24, 0x80	; 128
     dfa:	0e 94 d2 06 	call	0xda4	; 0xda4 <kb_store>
    result = result >> 1;
     dfe:	d6 95       	lsr	r29
     e00:	d3 94       	inc	r13
     e02:	ea cf       	rjmp	.-44     	; 0xdd8 <kb_decode+0x1e>
  }
  result=(new & mask);
  i = 0;
  while(result) {
    // we have keys pressed.
    if(result & 1)
     e04:	c0 ff       	sbrs	r28, 0
     e06:	03 c0       	rjmp	.+6      	; 0xe0e <kb_decode+0x54>
      kb_store(base + i);
     e08:	81 2f       	mov	r24, r17
     e0a:	0e 94 d2 06 	call	0xda4	; 0xda4 <kb_store>
    result = result >> 1;
     e0e:	c6 95       	lsr	r28
     e10:	1f 5f       	subi	r17, 0xFF	; 255
     e12:	e6 cf       	rjmp	.-52     	; 0xde0 <kb_decode+0x26>

00000e14 <update_eeprom>:
#include <avr/eeprom.h>
#include <avr/io.h>
#include "config.h"
#include "eeprom.h"

void update_eeprom(void* address,uint8_t data) {
     e14:	1f 93       	push	r17
     e16:	cf 93       	push	r28
     e18:	df 93       	push	r29
     e1a:	ec 01       	movw	r28, r24
     e1c:	16 2f       	mov	r17, r22
  uint8_t tmp;
  
  while(!eeprom_is_ready());
     e1e:	e1 99       	sbic	0x1c, 1	; 28
     e20:	fe cf       	rjmp	.-4      	; 0xe1e <update_eeprom+0xa>
  tmp=eeprom_read_byte(address);
     e22:	ce 01       	movw	r24, r28
     e24:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <eeprom_read_byte>
  if(tmp!=data)
     e28:	81 17       	cp	r24, r17
     e2a:	11 f0       	breq	.+4      	; 0xe30 <update_eeprom+0x1c>
  while(!eeprom_is_ready());
     e2c:	e1 99       	sbic	0x1c, 1	; 28
     e2e:	fe cf       	rjmp	.-4      	; 0xe2c <update_eeprom+0x18>
  eeprom_write_byte(address,data);
     e30:	61 2f       	mov	r22, r17
     e32:	ce 01       	movw	r24, r28
     e34:	0e 94 67 0e 	call	0x1cce	; 0x1cce <eeprom_write_byte>
}
     e38:	df 91       	pop	r29
     e3a:	cf 91       	pop	r28
     e3c:	1f 91       	pop	r17
     e3e:	08 95       	ret

00000e40 <poll_parse_key>:
 * 
 * normal = 0x00 - 0x84
 * ext    = 0x80 - 0xfd  (might be an issue if there is e0 (80-84)
 */
 
void poll_parse_key(uint8_t code, uint8_t state) {
     e40:	98 2f       	mov	r25, r24
     e42:	46 2f       	mov	r20, r22
  uint8_t sh=meta&POLL_FLAG_SHIFT;
     e44:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <meta.lto_priv.9>
     e48:	29 2f       	mov	r18, r25
     e4a:	2f 77       	andi	r18, 0x7F	; 127
  
  // this is also where we can check for Ctrl/Alt/Del
  if((code&0x7f)==PS2_KEY_ALT) {
     e4c:	21 31       	cpi	r18, 0x11	; 17
     e4e:	39 f4       	brne	.+14     	; 0xe5e <poll_parse_key+0x1e>
    // turn on or off the ALT META flag
    meta=(meta&(uint8_t)~POLL_FLAG_ALT) | (state?POLL_FLAG_ALT:0);
     e50:	28 2f       	mov	r18, r24
     e52:	2b 7f       	andi	r18, 0xFB	; 251
     e54:	34 e0       	ldi	r19, 0x04	; 4
     e56:	61 11       	cpse	r22, r1
     e58:	09 c0       	rjmp	.+18     	; 0xe6c <poll_parse_key+0x2c>
  } else if((code&0x7f)==PS2_KEY_LCTRL) {
    // turn on or off the CTRL META flag
    meta=(meta&(uint8_t)~POLL_FLAG_CONTROL) | (state?POLL_FLAG_CONTROL:0);
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	07 c0       	rjmp	.+14     	; 0xe6c <poll_parse_key+0x2c>
  
  // this is also where we can check for Ctrl/Alt/Del
  if((code&0x7f)==PS2_KEY_ALT) {
    // turn on or off the ALT META flag
    meta=(meta&(uint8_t)~POLL_FLAG_ALT) | (state?POLL_FLAG_ALT:0);
  } else if((code&0x7f)==PS2_KEY_LCTRL) {
     e5e:	24 31       	cpi	r18, 0x14	; 20
     e60:	41 f4       	brne	.+16     	; 0xe72 <poll_parse_key+0x32>
    // turn on or off the CTRL META flag
    meta=(meta&(uint8_t)~POLL_FLAG_CONTROL) | (state?POLL_FLAG_CONTROL:0);
     e62:	28 2f       	mov	r18, r24
     e64:	27 7f       	andi	r18, 0xF7	; 247
     e66:	38 e0       	ldi	r19, 0x08	; 8
     e68:	66 23       	and	r22, r22
     e6a:	b9 f3       	breq	.-18     	; 0xe5a <poll_parse_key+0x1a>
     e6c:	23 2b       	or	r18, r19
     e6e:	20 93 4a 01 	sts	0x014A, r18	; 0x80014a <meta.lto_priv.9>
  } 
  if(!config && (meta&POLL_FLAG_CTRL_ALT)==POLL_FLAG_CTRL_ALT && code==(0x80 | PS2_KEY_DELETE) && state) {
     e72:	30 91 49 01 	lds	r19, 0x0149	; 0x800149 <config>
     e76:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <meta.lto_priv.9>
     e7a:	52 2f       	mov	r21, r18
     e7c:	5c 70       	andi	r21, 0x0C	; 12
     e7e:	31 11       	cpse	r19, r1
     e80:	4c c1       	rjmp	.+664    	; 0x111a <poll_parse_key+0x2da>
     e82:	5c 30       	cpi	r21, 0x0C	; 12
     e84:	09 f0       	breq	.+2      	; 0xe88 <poll_parse_key+0x48>
     e86:	68 c0       	rjmp	.+208    	; 0xf58 <poll_parse_key+0x118>
     e88:	91 3f       	cpi	r25, 0xF1	; 241
     e8a:	69 f4       	brne	.+26     	; 0xea6 <poll_parse_key+0x66>
     e8c:	44 23       	and	r20, r20
     e8e:	09 f4       	brne	.+2      	; 0xe92 <poll_parse_key+0x52>
     e90:	63 c0       	rjmp	.+198    	; 0xf58 <poll_parse_key+0x118>
    // CTRL/ALT/DEL is pressed.
    // bring RESET line low
    //debug2('^');
    // repeat this a few times so the pulse will be long enough to trigger the NMOS ICs.
    RESET_ON();
     e92:	8d 9a       	sbi	0x11, 5	; 17
     e94:	95 98       	cbi	0x12, 5	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     e96:	89 e0       	ldi	r24, 0x09	; 9
     e98:	8a 95       	dec	r24
     e9a:	f1 f7       	brne	.-4      	; 0xe98 <poll_parse_key+0x58>
    _delay_us(2);
    RESET_OFF();
     e9c:	8d 98       	cbi	0x11, 5	; 17
     e9e:	82 b3       	in	r24, 0x12	; 18
     ea0:	8f 6d       	ori	r24, 0xDF	; 223
     ea2:	82 bb       	out	0x12, r24	; 18
     ea4:	08 95       	ret
    //goto *0x0000;
  } else if((meta&POLL_FLAG_CTRL_ALT)==POLL_FLAG_CTRL_ALT && code==PS2_KEY_BS) {
     ea6:	96 36       	cpi	r25, 0x66	; 102
     ea8:	09 f0       	breq	.+2      	; 0xeac <poll_parse_key+0x6c>
     eaa:	56 c0       	rjmp	.+172    	; 0xf58 <poll_parse_key+0x118>
    // CTRL/ALT/Backspace.
    if(!state) { // only check on key up.
     eac:	41 11       	cpse	r20, r1
     eae:	48 c1       	rjmp	.+656    	; 0x1140 <poll_parse_key+0x300>
      if(!config) {
     eb0:	31 11       	cpse	r19, r1
     eb2:	0f c0       	rjmp	.+30     	; 0xed2 <poll_parse_key+0x92>
  led_mask|=(1<<led);
  LED_off(led);
}

void LED_blink(uint8_t led, uint8_t count, uint8_t flags) {
  led_program[led]=count| flags; 
     eb4:	8a e0       	ldi	r24, 0x0A	; 10
     eb6:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <led_program+0x7>
  led_count[led]=0;
     eba:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <led_count+0x7>
        // go into config mode
        LED_blink(LED_PIN_7,10,LED_FLAG_NONE);
        reset_matrix();
     ebe:	0e 94 78 04 	call	0x8f0	; 0x8f0 <reset_matrix>
        // update NUM LOCK initial state.
        update_eeprom(POLL_ADDR_LED_STATE,led_state&PS2_LED_NUM_LOCK);
        // update 40/80 column switch
        update_eeprom(POLL_ADDR_SW_STATE,sw_state&(1<<SW_4080));
      }
      config=!config;
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <config>
     ec8:	91 11       	cpse	r25, r1
     eca:	80 e0       	ldi	r24, 0x00	; 0
     ecc:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <config>
     ed0:	08 95       	ret
  led_mask|=(1<<led);
  LED_off(led);
}

void LED_blink(uint8_t led, uint8_t count, uint8_t flags) {
  led_program[led]=count| flags; 
     ed2:	8a e8       	ldi	r24, 0x8A	; 138
     ed4:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <led_program+0x7>
  led_count[led]=0;
     ed8:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <led_count+0x7>
        // go into config mode
        LED_blink(LED_PIN_7,10,LED_FLAG_NONE);
        reset_matrix();
      } else {
        LED_blink(LED_PIN_7,10,LED_FLAG_END_ON);
        reset_matrix();
     edc:	0e 94 78 04 	call	0x8f0	; 0x8f0 <reset_matrix>
        // write layout to EEPROM
        update_eeprom(POLL_ADDR_LAYOUT,layout);
     ee0:	60 91 48 01 	lds	r22, 0x0148	; 0x800148 <layout.lto_priv.13>
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	80 e0       	ldi	r24, 0x00	; 0
     ee8:	0e 94 0a 07 	call	0xe14	; 0xe14 <update_eeprom>
        // update NUM LOCK initial state.
        update_eeprom(POLL_ADDR_LED_STATE,led_state&PS2_LED_NUM_LOCK);
     eec:	60 91 47 01 	lds	r22, 0x0147	; 0x800147 <led_state.lto_priv.23>
     ef0:	62 70       	andi	r22, 0x02	; 2
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	0e 94 0a 07 	call	0xe14	; 0xe14 <update_eeprom>
        // update 40/80 column switch
        update_eeprom(POLL_ADDR_SW_STATE,sw_state&(1<<SW_4080));
     efa:	60 91 46 01 	lds	r22, 0x0146	; 0x800146 <sw_state>
     efe:	62 70       	andi	r22, 0x02	; 2
     f00:	82 e0       	ldi	r24, 0x02	; 2
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	0e 94 0a 07 	call	0xe14	; 0xe14 <update_eeprom>
     f08:	dc cf       	rjmp	.-72     	; 0xec2 <poll_parse_key+0x82>
  }
}

static void set_options(uint8_t code, uint8_t state) {
  if(state) {
    switch(code) {
     f0a:	95 35       	cpi	r25, 0x55	; 85
     f0c:	e9 f0       	breq	.+58     	; 0xf48 <poll_parse_key+0x108>
     f0e:	97 37       	cpi	r25, 0x77	; 119
     f10:	09 f4       	brne	.+2      	; 0xf14 <poll_parse_key+0xd4>
     f12:	5c c0       	rjmp	.+184    	; 0xfcc <poll_parse_key+0x18c>
     f14:	96 32       	cpi	r25, 0x26	; 38
     f16:	09 f0       	breq	.+2      	; 0xf1a <poll_parse_key+0xda>
     f18:	13 c1       	rjmp	.+550    	; 0x1140 <poll_parse_key+0x300>
      case PS2_KEY_2:
        layout=POLL_LAYOUT_POSITIONAL_C128;
        LED_blink(LED_PIN_7,2,LED_FLAG_NONE);
        break;
      case PS2_KEY_3:
        layout=POLL_LAYOUT_SYMBOLIC_C64;
     f1a:	82 e0       	ldi	r24, 0x02	; 2
     f1c:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <layout.lto_priv.13>
  led_mask|=(1<<led);
  LED_off(led);
}

void LED_blink(uint8_t led, uint8_t count, uint8_t flags) {
  led_program[led]=count| flags; 
     f20:	83 e0       	ldi	r24, 0x03	; 3
     f22:	03 c0       	rjmp	.+6      	; 0xf2a <poll_parse_key+0xea>

static void set_options(uint8_t code, uint8_t state) {
  if(state) {
    switch(code) {
      case PS2_KEY_1:
        layout=POLL_LAYOUT_POSITIONAL_C64;
     f24:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <layout.lto_priv.13>
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <led_program+0x7>
  led_count[led]=0;
     f2e:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <led_count+0x7>
     f32:	08 95       	ret
        LED_blink(LED_PIN_7,1,LED_FLAG_NONE);
        break;
      case PS2_KEY_2:
        layout=POLL_LAYOUT_POSITIONAL_C128;
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <layout.lto_priv.13>
  led_mask|=(1<<led);
  LED_off(led);
}

void LED_blink(uint8_t led, uint8_t count, uint8_t flags) {
  led_program[led]=count| flags; 
     f3a:	82 e0       	ldi	r24, 0x02	; 2
     f3c:	f6 cf       	rjmp	.-20     	; 0xf2a <poll_parse_key+0xea>
      case PS2_KEY_3:
        layout=POLL_LAYOUT_SYMBOLIC_C64;
        LED_blink(LED_PIN_7,3,LED_FLAG_NONE);
        break;
      case PS2_KEY_4:
        layout=POLL_LAYOUT_SYMBOLIC_C128;
     f3e:	83 e0       	ldi	r24, 0x03	; 3
     f40:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <layout.lto_priv.13>
     f44:	84 e0       	ldi	r24, 0x04	; 4
     f46:	f1 cf       	rjmp	.-30     	; 0xf2a <poll_parse_key+0xea>
        LED_blink(LED_PIN_7,4,LED_FLAG_NONE);
        break;
      case PS2_KEY_EQUALS:
        debug=!debug;
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <debug>
     f4e:	91 11       	cpse	r25, r1
     f50:	80 e0       	ldi	r24, 0x00	; 0
     f52:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <debug>
     f56:	08 95       	ret
}

static void remap_keypad(uint8_t* sh,uint8_t* code) {
  (void)sh;

  if(!(led_state & PS2_LED_NUM_LOCK)) {
     f58:	30 91 47 01 	lds	r19, 0x0147	; 0x800147 <led_state.lto_priv.23>
     f5c:	31 fd       	sbrc	r19, 1
     f5e:	2f c0       	rjmp	.+94     	; 0xfbe <poll_parse_key+0x17e>
    // mappings for cursor and paging keys.
    switch(*code) {
     f60:	e7 e9       	ldi	r30, 0x97	; 151
     f62:	e9 0f       	add	r30, r25
     f64:	e5 31       	cpi	r30, 0x15	; 21
     f66:	08 f0       	brcs	.+2      	; 0xf6a <poll_parse_key+0x12a>
     f68:	2a c0       	rjmp	.+84     	; 0xfbe <poll_parse_key+0x17e>
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	e6 54       	subi	r30, 0x46	; 70
     f6e:	f8 4f       	sbci	r31, 0xF8	; 248
     f70:	0c 94 74 0e 	jmp	0x1ce8	; 0x1ce8 <__tablejump2__>
     f74:	cf 07       	cpc	r28, r31
     f76:	df 07       	cpc	r29, r31
     f78:	cf 07       	cpc	r28, r31
     f7a:	cf 07       	cpc	r28, r31
     f7c:	df 07       	cpc	r29, r31
     f7e:	df 07       	cpc	r29, r31
     f80:	df 07       	cpc	r29, r31
     f82:	cf 07       	cpc	r28, r31
     f84:	cf 07       	cpc	r28, r31
     f86:	cf 07       	cpc	r28, r31
     f88:	cf 07       	cpc	r28, r31
     f8a:	cf 07       	cpc	r28, r31
     f8c:	cf 07       	cpc	r28, r31
     f8e:	df 07       	cpc	r29, r31
     f90:	df 07       	cpc	r29, r31
     f92:	df 07       	cpc	r29, r31
     f94:	df 07       	cpc	r29, r31
     f96:	cf 07       	cpc	r28, r31
     f98:	df 07       	cpc	r29, r31
     f9a:	df 07       	cpc	r29, r31
     f9c:	cf 07       	cpc	r28, r31
      case PS2_KEY_NUM_7:
      case PS2_KEY_NUM_8:
      case PS2_KEY_NUM_9:
      case PS2_KEY_NUM_PERIOD:
        // Switch into the extended key versions of the codes.
        *code |= 0x80;
     f9e:	90 68       	ori	r25, 0x80	; 128
 * normal = 0x00 - 0x84
 * ext    = 0x80 - 0xfd  (might be an issue if there is e0 (80-84)
 */
 
void poll_parse_key(uint8_t code, uint8_t state) {
  uint8_t sh=meta&POLL_FLAG_SHIFT;
     fa0:	83 70       	andi	r24, 0x03	; 3
  if(!state && code==PS2_KEY_NUM_LOCK) {
      // handle NUM_LOCK pressed.
      toggle_num_lock();
      // turn off trigger for extended keys.
      map=0;
  } else if(code<=PS2_KEY_F7) {
     fa2:	94 38       	cpi	r25, 0x84	; 132
     fa4:	08 f0       	brcs	.+2      	; 0xfa8 <poll_parse_key+0x168>
     fa6:	3a c0       	rjmp	.+116    	; 0x101c <poll_parse_key+0x1dc>
    // look it up.
    map=pgm_read_byte(&normal[code]);
     fa8:	e9 2f       	mov	r30, r25
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	e8 52       	subi	r30, 0x28	; 40
     fae:	fe 4f       	sbci	r31, 0xFE	; 254
     fb0:	64 91       	lpm	r22, Z
     fb2:	36 2f       	mov	r19, r22
    if(map<POLL_CBM_KEY_SPECIAL) {
     fb4:	60 3c       	cpi	r22, 0xC0	; 192
     fb6:	68 f4       	brcc	.+26     	; 0xfd2 <poll_parse_key+0x192>
      // joystick fire...
      //set_matrix(sh,POLL_C64_KEY_CTRL,state);
      break;
    // new stuff.
    case 0x80 | PS2_KEY_PAGE_UP:
      set_matrix(sh,POLL_C64_PKEY_RESTORE,state);
     fb8:	0e 94 8c 04 	call	0x918	; 0x918 <set_matrix>
     fbc:	08 95       	ret
    // now, apply user preferences
    remap_personal(layout,&sh,&code);
    // handle num_lock/joystick...
    remap_keypad(&sh,&code);
    // do we still have a code, or did joystick driver EAT it?
    if(code) {
     fbe:	99 23       	and	r25, r25
     fc0:	09 f4       	brne	.+2      	; 0xfc4 <poll_parse_key+0x184>
     fc2:	be c0       	rjmp	.+380    	; 0x1140 <poll_parse_key+0x300>
}

static void map_key(uint8_t sh, uint8_t code,uint8_t state) {
  uint8_t map=POLL_CBM_KEY_UNMAPPED;
  
  if(!state && code==PS2_KEY_NUM_LOCK) {
     fc4:	41 11       	cpse	r20, r1
     fc6:	ec cf       	rjmp	.-40     	; 0xfa0 <poll_parse_key+0x160>
     fc8:	97 37       	cpi	r25, 0x77	; 119
     fca:	51 f7       	brne	.-44     	; 0xfa0 <poll_parse_key+0x160>
      // handle NUM_LOCK pressed.
      toggle_num_lock();
     fcc:	0e 94 38 04 	call	0x870	; 0x870 <toggle_num_lock>
     fd0:	08 95       	ret
  } else if(code<=PS2_KEY_F7) {
    // look it up.
    map=pgm_read_byte(&normal[code]);
    if(map<POLL_CBM_KEY_SPECIAL) {
      set_matrix(sh,map,state);
    } else if(map<POLL_CBM_KEY_UNMAPPED) {
     fd2:	6e 3f       	cpi	r22, 0xFE	; 254
     fd4:	00 f5       	brcc	.+64     	; 0x1016 <poll_parse_key+0x1d6>
      // special key.
      map=pgm_read_byte(&layouts[layout][map-POLL_CBM_KEY_SPECIAL][(meta&POLL_FLAG_SHIFT)!=0]);
     fd6:	30 91 48 01 	lds	r19, 0x0148	; 0x800148 <layout.lto_priv.13>
     fda:	a6 2f       	mov	r26, r22
     fdc:	a0 5c       	subi	r26, 0xC0	; 192
     fde:	bb 0b       	sbc	r27, r27
     fe0:	fd 01       	movw	r30, r26
     fe2:	bd e2       	ldi	r27, 0x2D	; 45
     fe4:	3b 9f       	mul	r19, r27
     fe6:	e0 0d       	add	r30, r0
     fe8:	f1 1d       	adc	r31, r1
     fea:	11 24       	eor	r1, r1
     fec:	ee 0f       	add	r30, r30
     fee:	ff 1f       	adc	r31, r31
     ff0:	23 70       	andi	r18, 0x03	; 3
     ff2:	61 e0       	ldi	r22, 0x01	; 1
     ff4:	70 e0       	ldi	r23, 0x00	; 0
     ff6:	11 f4       	brne	.+4      	; 0xffc <poll_parse_key+0x1bc>
     ff8:	70 e0       	ldi	r23, 0x00	; 0
     ffa:	60 e0       	ldi	r22, 0x00	; 0
     ffc:	e6 0f       	add	r30, r22
     ffe:	f7 1f       	adc	r31, r23
    1000:	e0 59       	subi	r30, 0x90	; 144
    1002:	ff 4f       	sbci	r31, 0xFF	; 255
    1004:	e4 91       	lpm	r30, Z
    1006:	3e 2f       	mov	r19, r30
      if(map<POLL_CBM_KEY_UNMAPPED)
    1008:	ee 3f       	cpi	r30, 0xFE	; 254
    100a:	28 f4       	brcc	.+10     	; 0x1016 <poll_parse_key+0x1d6>
        set_matrix(map&0x01,map&0xfe,state);
    100c:	6e 2f       	mov	r22, r30
    100e:	6e 7f       	andi	r22, 0xFE	; 254
    1010:	8e 2f       	mov	r24, r30
    1012:	81 70       	andi	r24, 0x01	; 1
    1014:	d1 cf       	rjmp	.-94     	; 0xfb8 <poll_parse_key+0x178>
    }
  }
  if(map==POLL_CBM_KEY_UNMAPPED) {
    1016:	3e 3f       	cpi	r19, 0xFE	; 254
    1018:	09 f0       	breq	.+2      	; 0x101c <poll_parse_key+0x1dc>
    101a:	92 c0       	rjmp	.+292    	; 0x1140 <poll_parse_key+0x300>
    // extended key.
    // map to layout.
    switch(layout) {
    101c:	20 91 48 01 	lds	r18, 0x0148	; 0x800148 <layout.lto_priv.13>
    1020:	21 30       	cpi	r18, 0x01	; 1
    1022:	09 f4       	brne	.+2      	; 0x1026 <poll_parse_key+0x1e6>
    1024:	4f c0       	rjmp	.+158    	; 0x10c4 <poll_parse_key+0x284>
    1026:	38 f0       	brcs	.+14     	; 0x1036 <poll_parse_key+0x1f6>
    1028:	22 30       	cpi	r18, 0x02	; 2
    102a:	09 f4       	brne	.+2      	; 0x102e <poll_parse_key+0x1ee>
    102c:	4f c0       	rjmp	.+158    	; 0x10cc <poll_parse_key+0x28c>
    102e:	23 30       	cpi	r18, 0x03	; 3
    1030:	09 f4       	brne	.+2      	; 0x1034 <poll_parse_key+0x1f4>
    1032:	6f c0       	rjmp	.+222    	; 0x1112 <poll_parse_key+0x2d2>
    1034:	08 95       	ret
  
}

static void map_positional_c64(uint8_t sh, uint8_t code, uint8_t state) {
  // TODO I really would like to get rid of these functions.
  switch(code) {
    1036:	9c 3e       	cpi	r25, 0xEC	; 236
    1038:	09 f4       	brne	.+2      	; 0x103c <poll_parse_key+0x1fc>
    103a:	67 c0       	rjmp	.+206    	; 0x110a <poll_parse_key+0x2ca>
    103c:	b8 f4       	brcc	.+46     	; 0x106c <poll_parse_key+0x22c>
    103e:	9a 3c       	cpi	r25, 0xCA	; 202
    1040:	81 f1       	breq	.+96     	; 0x10a2 <poll_parse_key+0x262>
    1042:	58 f4       	brcc	.+22     	; 0x105a <poll_parse_key+0x21a>
    1044:	91 39       	cpi	r25, 0x91	; 145
    1046:	d1 f1       	breq	.+116    	; 0x10bc <poll_parse_key+0x27c>
    case PS2_KEY_ESC:
    case 0x80 | PS2_KEY_END:
      set_matrix(sh,POLL_C64_KEY_RUNSTOP,state);
      break;
    case 0x80 | PS2_KEY_RCTRL:
      set_matrix(sh,POLL_C64_KEY_CTRL,state);
    1048:	6a e5       	ldi	r22, 0x5A	; 90
  
}

static void map_positional_c64(uint8_t sh, uint8_t code, uint8_t state) {
  // TODO I really would like to get rid of these functions.
  switch(code) {
    104a:	94 39       	cpi	r25, 0x94	; 148
    104c:	09 f4       	brne	.+2      	; 0x1050 <poll_parse_key+0x210>
    104e:	b4 cf       	rjmp	.-152    	; 0xfb8 <poll_parse_key+0x178>
    1050:	96 37       	cpi	r25, 0x76	; 118
    1052:	09 f0       	breq	.+2      	; 0x1056 <poll_parse_key+0x216>
    1054:	75 c0       	rjmp	.+234    	; 0x1140 <poll_parse_key+0x300>
    case 0x80 | PS2_KEY_CRSR_LEFT:
      set_matrix(TRUE,POLL_C64_KEY_CRSR_RIGHT,state);
      break;
    case PS2_KEY_ESC:
    case 0x80 | PS2_KEY_END:
      set_matrix(sh,POLL_C64_KEY_RUNSTOP,state);
    1056:	6a e7       	ldi	r22, 0x7A	; 122
    1058:	af cf       	rjmp	.-162    	; 0xfb8 <poll_parse_key+0x178>
  
}

static void map_positional_c64(uint8_t sh, uint8_t code, uint8_t state) {
  // TODO I really would like to get rid of these functions.
  switch(code) {
    105a:	99 3e       	cpi	r25, 0xE9	; 233
    105c:	e1 f3       	breq	.-8      	; 0x1056 <poll_parse_key+0x216>
    105e:	9b 3e       	cpi	r25, 0xEB	; 235
    1060:	59 f1       	breq	.+86     	; 0x10b8 <poll_parse_key+0x278>
    1062:	9a 3d       	cpi	r25, 0xDA	; 218
    1064:	09 f0       	breq	.+2      	; 0x1068 <poll_parse_key+0x228>
    1066:	6c c0       	rjmp	.+216    	; 0x1140 <poll_parse_key+0x300>
      break;
    case 0x80 | PS2_KEY_HOME:
      set_matrix(sh,POLL_C64_KEY_HOME,state);
      break;
    case 0x80 | PS2_KEY_NUM_ENTER:
      set_matrix(sh,POLL_C64_KEY_RETURN,state);
    1068:	66 e2       	ldi	r22, 0x26	; 38
    106a:	a6 cf       	rjmp	.-180    	; 0xfb8 <poll_parse_key+0x178>
  
}

static void map_positional_c64(uint8_t sh, uint8_t code, uint8_t state) {
  // TODO I really would like to get rid of these functions.
  switch(code) {
    106c:	94 3f       	cpi	r25, 0xF4	; 244
    106e:	11 f1       	breq	.+68     	; 0x10b4 <poll_parse_key+0x274>
    1070:	50 f4       	brcc	.+20     	; 0x1086 <poll_parse_key+0x246>
    1072:	91 3f       	cpi	r25, 0xF1	; 241
    1074:	c9 f0       	breq	.+50     	; 0x10a8 <poll_parse_key+0x268>
    1076:	92 3f       	cpi	r25, 0xF2	; 242
    1078:	c9 f0       	breq	.+50     	; 0x10ac <poll_parse_key+0x26c>
    107a:	90 3f       	cpi	r25, 0xF0	; 240
    107c:	09 f0       	breq	.+2      	; 0x1080 <poll_parse_key+0x240>
    107e:	60 c0       	rjmp	.+192    	; 0x1140 <poll_parse_key+0x300>
      break;
    case 0x80 | PS2_KEY_NUM_SLASH:
      set_matrix(FALSE,POLL_C64_KEY_SLASH,state);
      break;
    case 0x80 | PS2_KEY_INSERT:
      set_matrix(TRUE,POLL_C64_KEY_DELETE,state);
    1080:	66 e0       	ldi	r22, 0x06	; 6
      break;
    case 0x80 | PS2_KEY_NUM_SLASH:
      set_matrix(FALSE,POLL_C64_KEY_SLASH,state);
      break;
    case 0x80 | PS2_KEY_INSERT:
      set_matrix(TRUE,POLL_C64_KEY_POUND,state);
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	99 cf       	rjmp	.-206    	; 0xfb8 <poll_parse_key+0x178>
  
}

static void map_positional_c64(uint8_t sh, uint8_t code, uint8_t state) {
  // TODO I really would like to get rid of these functions.
  switch(code) {
    1086:	97 3f       	cpi	r25, 0xF7	; 247
    1088:	09 f4       	brne	.+2      	; 0x108c <poll_parse_key+0x24c>
    108a:	41 c0       	rjmp	.+130    	; 0x110e <poll_parse_key+0x2ce>
    108c:	18 f4       	brcc	.+6      	; 0x1094 <poll_parse_key+0x254>
    108e:	95 3f       	cpi	r25, 0xF5	; 245
    1090:	79 f0       	breq	.+30     	; 0x10b0 <poll_parse_key+0x270>
    1092:	08 95       	ret
    1094:	9a 3f       	cpi	r25, 0xFA	; 250
    1096:	a1 f0       	breq	.+40     	; 0x10c0 <poll_parse_key+0x280>
      break;
    case 0x80 | PS2_KEY_RALT:
      set_matrix(sh,POLL_C64_KEY_CBM,state);
      break;
    case 0x80 | PS2_KEY_PAGE_UP:
      set_matrix(sh,POLL_C64_KEY_CRSR_DOWN,state);
    1098:	66 e3       	ldi	r22, 0x36	; 54
  
}

static void map_positional_c64(uint8_t sh, uint8_t code, uint8_t state) {
  // TODO I really would like to get rid of these functions.
  switch(code) {
    109a:	9d 3f       	cpi	r25, 0xFD	; 253
    109c:	09 f4       	brne	.+2      	; 0x10a0 <poll_parse_key+0x260>
    109e:	8c cf       	rjmp	.-232    	; 0xfb8 <poll_parse_key+0x178>
    10a0:	08 95       	ret
      break;
    case PS2_KEY_CAPS_LOCK:
      // soft caps lock?
      break;
    case 0x80 | PS2_KEY_NUM_SLASH:
      set_matrix(FALSE,POLL_C64_KEY_SLASH,state);
    10a2:	6e e3       	ldi	r22, 0x3E	; 62
      break;
    case 0x80 | PS2_KEY_INSERT:
      set_matrix(TRUE,POLL_C64_KEY_POUND,state);
      break;
    case 0x80 | PS2_KEY_DELETE:
      set_matrix(FALSE,POLL_C64_KEY_UPARROW,state);
    10a4:	80 e0       	ldi	r24, 0x00	; 0
    10a6:	88 cf       	rjmp	.-240    	; 0xfb8 <poll_parse_key+0x178>
      break;
    case 0x80 | PS2_KEY_INSERT:
      set_matrix(TRUE,POLL_C64_KEY_DELETE,state);
      break;
    case 0x80 | PS2_KEY_DELETE:
      set_matrix(FALSE,POLL_C64_KEY_DELETE,state);
    10a8:	66 e0       	ldi	r22, 0x06	; 6
    10aa:	fc cf       	rjmp	.-8      	; 0x10a4 <poll_parse_key+0x264>
      break;
    case 0x80 | PS2_KEY_NUM_ENTER:
      set_matrix(sh,POLL_C64_KEY_RETURN,state);
      break;
    case 0x80 | PS2_KEY_CRSR_DOWN:
      set_matrix(FALSE,POLL_C64_KEY_CRSR_DOWN,state);
    10ac:	66 e3       	ldi	r22, 0x36	; 54
    10ae:	fa cf       	rjmp	.-12     	; 0x10a4 <poll_parse_key+0x264>
      break;
    case 0x80 | PS2_KEY_CRSR_UP:
      set_matrix(TRUE,POLL_C64_KEY_CRSR_DOWN,state);
    10b0:	66 e3       	ldi	r22, 0x36	; 54
    10b2:	e7 cf       	rjmp	.-50     	; 0x1082 <poll_parse_key+0x242>
      break;
    case 0x80 | PS2_KEY_CRSR_RIGHT:
      set_matrix(FALSE,POLL_C64_KEY_CRSR_RIGHT,state);
    10b4:	66 e1       	ldi	r22, 0x16	; 22
    10b6:	f6 cf       	rjmp	.-20     	; 0x10a4 <poll_parse_key+0x264>
      break;
    case 0x80 | PS2_KEY_CRSR_LEFT:
      set_matrix(TRUE,POLL_C64_KEY_CRSR_RIGHT,state);
    10b8:	66 e1       	ldi	r22, 0x16	; 22
    10ba:	e3 cf       	rjmp	.-58     	; 0x1082 <poll_parse_key+0x242>
      break;
    case 0x80 | PS2_KEY_RCTRL:
      set_matrix(sh,POLL_C64_KEY_CTRL,state);
      break;
    case 0x80 | PS2_KEY_RALT:
      set_matrix(sh,POLL_C64_KEY_CBM,state);
    10bc:	68 e6       	ldi	r22, 0x68	; 104
    10be:	7c cf       	rjmp	.-264    	; 0xfb8 <poll_parse_key+0x178>
      break;
    case 0x80 | PS2_KEY_PAGE_UP:
      set_matrix(sh,POLL_C64_KEY_CRSR_DOWN,state);
      break;
    case 0x80 | PS2_KEY_PAGE_DOWN:
      set_matrix(sh,POLL_C64_KEY_CRSR_RIGHT,state);
    10c0:	66 e1       	ldi	r22, 0x16	; 22
    10c2:	7a cf       	rjmp	.-268    	; 0xfb8 <poll_parse_key+0x178>
    switch(layout) {
      case POLL_LAYOUT_POSITIONAL_C64:
        map_positional_c64(sh,code,state);
        break;
      case POLL_LAYOUT_POSITIONAL_C128:
        map_positional_c128(sh,code,state);
    10c4:	69 2f       	mov	r22, r25
    10c6:	0e 94 22 05 	call	0xa44	; 0xa44 <map_positional_c128>
    10ca:	08 95       	ret
  }
}

static void map_symbolic_c64(uint8_t sh, uint8_t code, uint8_t state) {
  // TODO I really would like to get rid of these functions.
  switch(code) {
    10cc:	90 3f       	cpi	r25, 0xF0	; 240
    10ce:	c9 f0       	breq	.+50     	; 0x1102 <poll_parse_key+0x2c2>
    10d0:	58 f4       	brcc	.+22     	; 0x10e8 <poll_parse_key+0x2a8>
    10d2:	9a 3d       	cpi	r25, 0xDA	; 218
    10d4:	49 f2       	breq	.-110    	; 0x1068 <poll_parse_key+0x228>
    10d6:	18 f4       	brcc	.+6      	; 0x10de <poll_parse_key+0x29e>
    10d8:	9a 3c       	cpi	r25, 0xCA	; 202
    10da:	19 f3       	breq	.-58     	; 0x10a2 <poll_parse_key+0x262>
    10dc:	08 95       	ret
    10de:	9b 3e       	cpi	r25, 0xEB	; 235
    10e0:	59 f3       	breq	.-42     	; 0x10b8 <poll_parse_key+0x278>
    10e2:	9c 3e       	cpi	r25, 0xEC	; 236
    10e4:	91 f0       	breq	.+36     	; 0x110a <poll_parse_key+0x2ca>
    10e6:	08 95       	ret
    10e8:	94 3f       	cpi	r25, 0xF4	; 244
    10ea:	21 f3       	breq	.-56     	; 0x10b4 <poll_parse_key+0x274>
    10ec:	28 f4       	brcc	.+10     	; 0x10f8 <poll_parse_key+0x2b8>
    10ee:	91 3f       	cpi	r25, 0xF1	; 241
    10f0:	51 f0       	breq	.+20     	; 0x1106 <poll_parse_key+0x2c6>
    10f2:	92 3f       	cpi	r25, 0xF2	; 242
    10f4:	d9 f2       	breq	.-74     	; 0x10ac <poll_parse_key+0x26c>
    10f6:	08 95       	ret
    10f8:	95 3f       	cpi	r25, 0xF5	; 245
    10fa:	d1 f2       	breq	.-76     	; 0x10b0 <poll_parse_key+0x270>
    10fc:	9d 3f       	cpi	r25, 0xFD	; 253
    10fe:	39 f0       	breq	.+14     	; 0x110e <poll_parse_key+0x2ce>
    1100:	08 95       	ret
      break;
    case 0x80 | PS2_KEY_NUM_SLASH:
      set_matrix(FALSE,POLL_C64_KEY_SLASH,state);
      break;
    case 0x80 | PS2_KEY_INSERT:
      set_matrix(TRUE,POLL_C64_KEY_POUND,state);
    1102:	6e e0       	ldi	r22, 0x0E	; 14
    1104:	be cf       	rjmp	.-132    	; 0x1082 <poll_parse_key+0x242>
      break;
    case 0x80 | PS2_KEY_DELETE:
      set_matrix(FALSE,POLL_C64_KEY_UPARROW,state);
    1106:	6c e1       	ldi	r22, 0x1C	; 28
    1108:	cd cf       	rjmp	.-102    	; 0x10a4 <poll_parse_key+0x264>
      break;
    case 0x80 | PS2_KEY_HOME:
      set_matrix(sh,POLL_C64_KEY_HOME,state);
    110a:	6c e3       	ldi	r22, 0x3C	; 60
    110c:	55 cf       	rjmp	.-342    	; 0xfb8 <poll_parse_key+0x178>
      // joystick fire...
      //set_matrix(sh,POLL_C64_KEY_CTRL,state);
      break;
    // new stuff.
    case 0x80 | PS2_KEY_PAGE_UP:
      set_matrix(sh,POLL_C64_PKEY_RESTORE,state);
    110e:	60 e2       	ldi	r22, 0x20	; 32
    1110:	53 cf       	rjmp	.-346    	; 0xfb8 <poll_parse_key+0x178>
        break;
      case POLL_LAYOUT_SYMBOLIC_C64:
        map_symbolic_c64(sh,code,state);
        break;
      case POLL_LAYOUT_SYMBOLIC_C128:
        map_symbolic_c128(sh,code,state);
    1112:	69 2f       	mov	r22, r25
    1114:	0e 94 22 05 	call	0xa44	; 0xa44 <map_positional_c128>
    1118:	08 95       	ret
    // repeat this a few times so the pulse will be long enough to trigger the NMOS ICs.
    RESET_ON();
    _delay_us(2);
    RESET_OFF();
    //goto *0x0000;
  } else if((meta&POLL_FLAG_CTRL_ALT)==POLL_FLAG_CTRL_ALT && code==PS2_KEY_BS) {
    111a:	5c 30       	cpi	r21, 0x0C	; 12
    111c:	19 f4       	brne	.+6      	; 0x1124 <poll_parse_key+0x2e4>
    111e:	96 36       	cpi	r25, 0x66	; 102
    1120:	09 f4       	brne	.+2      	; 0x1124 <poll_parse_key+0x2e4>
    1122:	c4 ce       	rjmp	.-632    	; 0xeac <poll_parse_key+0x6c>
    }
  }
}

static void set_options(uint8_t code, uint8_t state) {
  if(state) {
    1124:	44 23       	and	r20, r20
    1126:	61 f0       	breq	.+24     	; 0x1140 <poll_parse_key+0x300>
    switch(code) {
    1128:	95 32       	cpi	r25, 0x25	; 37
    112a:	09 f4       	brne	.+2      	; 0x112e <poll_parse_key+0x2ee>
    112c:	08 cf       	rjmp	.-496    	; 0xf3e <poll_parse_key+0xfe>
    112e:	08 f0       	brcs	.+2      	; 0x1132 <poll_parse_key+0x2f2>
    1130:	ec ce       	rjmp	.-552    	; 0xf0a <poll_parse_key+0xca>
    1132:	96 31       	cpi	r25, 0x16	; 22
    1134:	09 f4       	brne	.+2      	; 0x1138 <poll_parse_key+0x2f8>
    1136:	f6 ce       	rjmp	.-532    	; 0xf24 <poll_parse_key+0xe4>
    1138:	9e 31       	cpi	r25, 0x1E	; 30
    113a:	09 f4       	brne	.+2      	; 0x113e <poll_parse_key+0x2fe>
    113c:	fb ce       	rjmp	.-522    	; 0xf34 <poll_parse_key+0xf4>
    113e:	08 95       	ret
    if(code) {
      // map key.
      map_key(sh,code,state);
    }
  }
}
    1140:	08 95       	ret

00001142 <__vector_21>:
#endif

/* UART0 Interrupt handlers */
#if defined ENABLE_UART0
#  if defined UART0_TX_BUFFER_SHIFT && UART0_TX_BUFFER_SHIFT > 0
ISR(USARTA_UDRE_vect) {
    1142:	1f 92       	push	r1
    1144:	0f 92       	push	r0
    1146:	0f b6       	in	r0, 0x3f	; 63
    1148:	0f 92       	push	r0
    114a:	11 24       	eor	r1, r1
    114c:	8f 93       	push	r24
    114e:	9f 93       	push	r25
    1150:	ef 93       	push	r30
    1152:	ff 93       	push	r31
  if ( tx0_head != tx0_tail ) {
    1154:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <tx0_head>
    1158:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <tx0_tail>
    115c:	98 17       	cp	r25, r24
    115e:	b1 f0       	breq	.+44     	; 0x118c <__vector_21+0x4a>
    UDRA = tx0_buf[tx0_tail];     /* Start transmition */
    1160:	e0 91 7a 01 	lds	r30, 0x017A	; 0x80017a <tx0_tail>
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	ee 58       	subi	r30, 0x8E	; 142
    1168:	fe 4f       	sbci	r31, 0xFE	; 254
    116a:	80 81       	ld	r24, Z
    116c:	8c b9       	out	0x0c, r24	; 12
    /* Calculate and store buffer index */
    tx0_tail = (tx0_tail + 1) & (sizeof(tx0_buf) - 1);
    116e:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <tx0_tail>
    1172:	8f 5f       	subi	r24, 0xFF	; 255
    1174:	87 70       	andi	r24, 0x07	; 7
    1176:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <tx0_tail>
  } else {
    UCSRAB &= ~ _BV(UDRIEA);  /* Disable interrupt */
  }
}
    117a:	ff 91       	pop	r31
    117c:	ef 91       	pop	r30
    117e:	9f 91       	pop	r25
    1180:	8f 91       	pop	r24
    1182:	0f 90       	pop	r0
    1184:	0f be       	out	0x3f, r0	; 63
    1186:	0f 90       	pop	r0
    1188:	1f 90       	pop	r1
    118a:	18 95       	reti
  if ( tx0_head != tx0_tail ) {
    UDRA = tx0_buf[tx0_tail];     /* Start transmition */
    /* Calculate and store buffer index */
    tx0_tail = (tx0_tail + 1) & (sizeof(tx0_buf) - 1);
  } else {
    UCSRAB &= ~ _BV(UDRIEA);  /* Disable interrupt */
    118c:	55 98       	cbi	0x0a, 5	; 10
    118e:	f5 cf       	rjmp	.-22     	; 0x117a <__vector_21+0x38>

00001190 <__vector_2>:

ISR(PS2_TIMER_COMP_vect) {
  PS2_CALL(ps2_device_timer_irq(),ps2_host_timer_irq());
}

ISR(CLK_INT_vect) {
    1190:	1f 92       	push	r1
    1192:	0f 92       	push	r0
    1194:	0f b6       	in	r0, 0x3f	; 63
    1196:	0f 92       	push	r0
    1198:	11 24       	eor	r1, r1
    119a:	2f 93       	push	r18
    119c:	3f 93       	push	r19
    119e:	4f 93       	push	r20
    11a0:	5f 93       	push	r21
    11a2:	6f 93       	push	r22
    11a4:	7f 93       	push	r23
    11a6:	8f 93       	push	r24
    11a8:	9f 93       	push	r25
    11aa:	af 93       	push	r26
    11ac:	bf 93       	push	r27
    11ae:	ef 93       	push	r30
    11b0:	ff 93       	push	r31
  PS2_CALL(ps2_device_clk_irq(),ps2_host_clk_irq());
    11b2:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <ps2_mode>
    11b6:	81 30       	cpi	r24, 0x01	; 1
    11b8:	99 f0       	breq	.+38     	; 0x11e0 <__vector_2+0x50>
    11ba:	82 30       	cpi	r24, 0x02	; 2
    11bc:	49 f1       	breq	.+82     	; 0x1210 <__vector_2+0x80>
}
    11be:	ff 91       	pop	r31
    11c0:	ef 91       	pop	r30
    11c2:	bf 91       	pop	r27
    11c4:	af 91       	pop	r26
    11c6:	9f 91       	pop	r25
    11c8:	8f 91       	pop	r24
    11ca:	7f 91       	pop	r23
    11cc:	6f 91       	pop	r22
    11ce:	5f 91       	pop	r21
    11d0:	4f 91       	pop	r20
    11d2:	3f 91       	pop	r19
    11d4:	2f 91       	pop	r18
    11d6:	0f 90       	pop	r0
    11d8:	0f be       	out	0x3f, r0	; 63
    11da:	0f 90       	pop	r0
    11dc:	1f 90       	pop	r1
    11de:	18 95       	reti
  // turn on
  CLK_INTCR |= _BV(CLK_INT);
}

static void ps2_disable_clk(void) {
  CLK_INTCR &= (uint8_t)~_BV(CLK_INT);
    11e0:	8b b7       	in	r24, 0x3b	; 59
    11e2:	8f 77       	andi	r24, 0x7F	; 127
    11e4:	8b bf       	out	0x3b, r24	; 59


static inline __attribute__((always_inline)) void ps2_device_clk_irq(void) {
  ps2_disable_clk();

  switch(ps2_state) {
    11e6:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <ps2_state>
    11ea:	82 30       	cpi	r24, 0x02	; 2
    11ec:	38 f0       	brcs	.+14     	; 0x11fc <__vector_2+0x6c>
    11ee:	85 31       	cpi	r24, 0x15	; 21
    11f0:	31 f7       	brne	.-52     	; 0x11be <__vector_2+0x2e>
      // host is holding us off.  Wait for CLK hi...
      ps2_device_host_inhibit();
      break;
    case PS2_ST_HOST_INHIBIT:
      // CLK went hi
      if(ps2_read_data()) {
    11f2:	82 9b       	sbis	0x10, 2	; 16
    11f4:	06 c0       	rjmp	.+12     	; 0x1202 <__vector_2+0x72>
      ps2_enable_clk_rise();
      break;
    case PS2_ST_HOLDOFF:
      // CLK rose, so now, check for more data.
      // do we have data to send to keyboard?
      ps2_check_for_data();
    11f6:	0e 94 03 04 	call	0x806	; 0x806 <ps2_check_for_data>
    11fa:	e1 cf       	rjmp	.-62     	; 0x11be <__vector_2+0x2e>

  switch(ps2_state) {
    case PS2_ST_IDLE:
    case PS2_ST_PREP_START:
      // host is holding us off.  Wait for CLK hi...
      ps2_device_host_inhibit();
    11fc:	0e 94 20 04 	call	0x840	; 0x840 <ps2_device_host_inhibit>
    1200:	de cf       	rjmp	.-68     	; 0x11be <__vector_2+0x2e>
        ps2_check_for_data();
      } else {
        // host wants to send data, CLK is high.
        // wait half cycle to let things settle.
        // clock in data from host.
        ps2_enable_timer(PS2_HALF_CYCLE);
    1202:	84 e2       	ldi	r24, 0x24	; 36
    1204:	0e 94 18 03 	call	0x630	; 0x630 <ps2_enable_timer>
        ps2_state = PS2_ST_WAIT_START;
    1208:	8a e0       	ldi	r24, 0x0A	; 10
      }
      break;
    case PS2_ST_SEND_PARITY:
      // send stop bit.
      ps2_set_data();
      ps2_state = PS2_ST_SEND_STOP;
    120a:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <ps2_state>
    120e:	d7 cf       	rjmp	.-82     	; 0x11be <__vector_2+0x2e>
  }
}


static inline __attribute__((always_inline)) void ps2_host_clk_irq(void) {
  switch(ps2_state) {
    1210:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <ps2_state>
    1214:	e7 31       	cpi	r30, 0x17	; 23
    1216:	98 f6       	brcc	.-90     	; 0x11be <__vector_2+0x2e>
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	ef 5e       	subi	r30, 0xEF	; 239
    121c:	f6 4f       	sbci	r31, 0xF6	; 246
    121e:	0c 94 74 0e 	jmp	0x1ce8	; 0x1ce8 <__tablejump2__>
    1222:	28 09       	sbc	r18, r8
    1224:	df 08       	sbc	r13, r15
    1226:	df 08       	sbc	r13, r15
    1228:	50 09       	sbc	r21, r0
    122a:	df 08       	sbc	r13, r15
    122c:	df 08       	sbc	r13, r15
    122e:	5b 09       	sbc	r21, r11
    1230:	df 08       	sbc	r13, r15
    1232:	5f 09       	sbc	r21, r15
    1234:	fb 08       	sbc	r15, r11
    1236:	df 08       	sbc	r13, r15
    1238:	df 08       	sbc	r13, r15
    123a:	df 08       	sbc	r13, r15
    123c:	35 09       	sbc	r19, r5
    123e:	df 08       	sbc	r13, r15
    1240:	41 09       	sbc	r20, r1
    1242:	df 08       	sbc	r13, r15
    1244:	46 09       	sbc	r20, r6
    1246:	df 08       	sbc	r13, r15
    1248:	df 08       	sbc	r13, r15
    124a:	df 08       	sbc	r13, r15
    124c:	df 08       	sbc	r13, r15
    124e:	28 09       	sbc	r18, r8
    case PS2_ST_WAIT_RESPONSE:
    case PS2_ST_IDLE:
      // keyboard sent start bit
      // should read it, but will assume it is good.
      ps2_state = PS2_ST_GET_BIT;
    1250:	8d e0       	ldi	r24, 0x0D	; 13
    1252:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <ps2_state>
      // if we don't get another CLK in 100uS, timeout.
      ps2_enable_timer(100);
    1256:	84 e6       	ldi	r24, 0x64	; 100
    1258:	0e 94 18 03 	call	0x630	; 0x630 <ps2_enable_timer>
    ps2_set_data();
  }
}

static void ps2_clear_counters(void) {
  ps2_byte = 0;
    125c:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <ps2_byte>
  ps2_bit_count = 0;
    1260:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <ps2_bit_count>
  ps2_parity = 0;
    1264:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <ps2_parity>
    1268:	aa cf       	rjmp	.-172    	; 0x11be <__vector_2+0x2e>
      ps2_enable_timer(100);
      ps2_clear_counters();
      break;
    case PS2_ST_GET_BIT:
      // if we don't get another CLK in 100uS, timeout.
      ps2_enable_timer(100);
    126a:	84 e6       	ldi	r24, 0x64	; 100
    126c:	0e 94 18 03 	call	0x630	; 0x630 <ps2_enable_timer>
      // read bit;
      ps2_read_bit();
    1270:	0e 94 c2 02 	call	0x584	; 0x584 <ps2_read_bit>
      if(ps2_bit_count == 8) {
    1274:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <ps2_bit_count>
    1278:	88 30       	cpi	r24, 0x08	; 8
    127a:	09 f0       	breq	.+2      	; 0x127e <__vector_2+0xee>
    127c:	a0 cf       	rjmp	.-192    	; 0x11be <__vector_2+0x2e>
        // done, do Parity bit
        ps2_state = PS2_ST_GET_PARITY;
    127e:	8f e0       	ldi	r24, 0x0F	; 15
    1280:	c4 cf       	rjmp	.-120    	; 0x120a <__vector_2+0x7a>
      }
      break;
    case PS2_ST_GET_PARITY:
      // if we don't get another CLK in 100uS, timeout.
      ps2_enable_timer(100);
    1282:	84 e6       	ldi	r24, 0x64	; 100
    1284:	0e 94 18 03 	call	0x630	; 0x630 <ps2_enable_timer>
      // grab parity
      // for now, assume it is OK.
      ps2_state = PS2_ST_GET_STOP;
    1288:	81 e1       	ldi	r24, 0x11	; 17
    128a:	bf cf       	rjmp	.-130    	; 0x120a <__vector_2+0x7a>
      break;
    case PS2_ST_GET_STOP:
      ps2_disable_timer();
    128c:	0e 94 14 03 	call	0x628	; 0x628 <ps2_disable_timer>
      // stop bit
      // for now, assume it is OK.
      ps2_write_byte();
    1290:	0e 94 05 03 	call	0x60a	; 0x60a <ps2_write_byte>
      // wait for CLK to rise before doing anything else.
      ps2_state = PS2_ST_HOLDOFF;
    1294:	89 e0       	ldi	r24, 0x09	; 9
    1296:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <ps2_state>
      ps2_enable_clk_rise();
    129a:	0e 94 13 04 	call	0x826	; 0x826 <ps2_enable_clk_rise>
    129e:	8f cf       	rjmp	.-226    	; 0x11be <__vector_2+0x2e>
//    case PS2_ST_SEND_START:
//      ps2_state = PS2_ST_PREP_BIT;
//      break;
    case PS2_ST_PREP_BIT:
      // time to send bits...
      if(ps2_bit_count == 8) {
    12a0:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <ps2_bit_count>
    12a4:	88 30       	cpi	r24, 0x08	; 8
    12a6:	21 f4       	brne	.+8      	; 0x12b0 <__vector_2+0x120>
        // we are done..., do parity
        ps2_write_parity();
    12a8:	0e 94 b8 02 	call	0x570	; 0x570 <ps2_write_parity>
        ps2_state = PS2_ST_SEND_PARITY;
    12ac:	86 e0       	ldi	r24, 0x06	; 6
    12ae:	ad cf       	rjmp	.-166    	; 0x120a <__vector_2+0x7a>
      } else {
        ps2_write_bit();
    12b0:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <ps2_write_bit>
    12b4:	84 cf       	rjmp	.-248    	; 0x11be <__vector_2+0x2e>
static inline __attribute__((always_inline)) uint8_t ps2_read_clk(void) {
  return PS2_CLK_IN & PS2_CLK_PIN;
}

static inline __attribute__((always_inline)) void ps2_set_data(void) {
  PS2_DATA_OUT |= PS2_DATA_PIN;
    12b6:	92 9a       	sbi	0x12, 2	; 18
  PS2_DATA_DDR &= (uint8_t)~PS2_DATA_PIN;
    12b8:	8a 98       	cbi	0x11, 2	; 17
      }
      break;
    case PS2_ST_SEND_PARITY:
      // send stop bit.
      ps2_set_data();
      ps2_state = PS2_ST_SEND_STOP;
    12ba:	88 e0       	ldi	r24, 0x08	; 8
    12bc:	a6 cf       	rjmp	.-180    	; 0x120a <__vector_2+0x7a>
      break;
    case PS2_ST_SEND_STOP:
      if(!ps2_read_data()) {
    12be:	82 99       	sbic	0x10, 2	; 16
    12c0:	7e cf       	rjmp	.-260    	; 0x11be <__vector_2+0x2e>
  ps2_parity = 0;
  ps2_byte = txbuf[( tx_tail + 1 ) & PS2_TX_BUFFER_MASK];  /* Start transmition */
}

static void ps2_commit_read_byte(void) {
  tx_tail = ( tx_tail + 1 ) & PS2_TX_BUFFER_MASK;      /* Store new index */
    12c2:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <tx_tail>
    12c6:	8f 5f       	subi	r24, 0xFF	; 255
    12c8:	87 70       	andi	r24, 0x07	; 7
    12ca:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <tx_tail>
        /*
         * We could wait for the CLK hi, then check to see if we have more
         * data to send.  However, all cmds out have a required ack or response
         * so we'll just set to a non-IDLE state and wait for the CLK
         */
        ps2_state = PS2_ST_WAIT_RESPONSE;
    12ce:	86 e1       	ldi	r24, 0x16	; 22
    12d0:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <ps2_state>
        ps2_enable_clk_fall();
    12d4:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <ps2_enable_clk_fall>
    12d8:	72 cf       	rjmp	.-284    	; 0x11be <__vector_2+0x2e>

000012da <__vector_16>:

static void ps2_device_init(void) {
}
#endif

ISR(PS2_TIMER_COMP_vect) {
    12da:	1f 92       	push	r1
    12dc:	0f 92       	push	r0
    12de:	0f b6       	in	r0, 0x3f	; 63
    12e0:	0f 92       	push	r0
    12e2:	11 24       	eor	r1, r1
    12e4:	2f 93       	push	r18
    12e6:	3f 93       	push	r19
    12e8:	4f 93       	push	r20
    12ea:	5f 93       	push	r21
    12ec:	6f 93       	push	r22
    12ee:	7f 93       	push	r23
    12f0:	8f 93       	push	r24
    12f2:	9f 93       	push	r25
    12f4:	af 93       	push	r26
    12f6:	bf 93       	push	r27
    12f8:	ef 93       	push	r30
    12fa:	ff 93       	push	r31
  PS2_CALL(ps2_device_timer_irq(),ps2_host_timer_irq());
    12fc:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <ps2_mode>
    1300:	81 30       	cpi	r24, 0x01	; 1
    1302:	a1 f0       	breq	.+40     	; 0x132c <__vector_16+0x52>
    1304:	82 30       	cpi	r24, 0x02	; 2
    1306:	09 f4       	brne	.+2      	; 0x130a <__vector_16+0x30>
    1308:	d3 c0       	rjmp	.+422    	; 0x14b0 <__vector_16+0x1d6>
}
    130a:	ff 91       	pop	r31
    130c:	ef 91       	pop	r30
    130e:	bf 91       	pop	r27
    1310:	af 91       	pop	r26
    1312:	9f 91       	pop	r25
    1314:	8f 91       	pop	r24
    1316:	7f 91       	pop	r23
    1318:	6f 91       	pop	r22
    131a:	5f 91       	pop	r21
    131c:	4f 91       	pop	r20
    131e:	3f 91       	pop	r19
    1320:	2f 91       	pop	r18
    1322:	0f 90       	pop	r0
    1324:	0f be       	out	0x3f, r0	; 63
    1326:	0f 90       	pop	r0
    1328:	1f 90       	pop	r1
    132a:	18 95       	reti
  ps2_set_data();
}


static inline __attribute__((always_inline)) void ps2_device_timer_irq(void) {
  switch (ps2_state) {
    132c:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <ps2_state>
    1330:	e1 50       	subi	r30, 0x01	; 1
    1332:	e3 31       	cpi	r30, 0x13	; 19
    1334:	08 f0       	brcs	.+2      	; 0x1338 <__vector_16+0x5e>
    1336:	b9 c0       	rjmp	.+370    	; 0x14aa <__vector_16+0x1d0>
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	ef 55       	subi	r30, 0x5F	; 95
    133c:	f6 4f       	sbci	r31, 0xF6	; 246
    133e:	0c 94 74 0e 	jmp	0x1ce8	; 0x1ce8 <__tablejump2__>
    1342:	b4 09       	sbc	r27, r4
    1344:	ba 09       	sbc	r27, r10
    1346:	c6 09       	sbc	r28, r6
    1348:	ca 09       	sbc	r28, r10
    134a:	d6 09       	sbc	r29, r6
    134c:	da 09       	sbc	r29, r10
    134e:	e2 09       	sbc	r30, r2
    1350:	e6 09       	sbc	r30, r6
    1352:	43 0a       	sbc	r4, r19
    1354:	f7 09       	sbc	r31, r7
    1356:	0c 0a       	sbc	r0, r28
    1358:	12 0a       	sbc	r1, r18
    135a:	18 0a       	sbc	r1, r24
    135c:	55 0a       	sbc	r5, r21
    135e:	22 0a       	sbc	r2, r18
    1360:	26 0a       	sbc	r2, r22
    1362:	55 0a       	sbc	r5, r21
    1364:	36 0a       	sbc	r3, r22
    1366:	32 0a       	sbc	r3, r18
  PS2_CLK_OUT |= PS2_CLK_PIN;
  PS2_CLK_DDR &= (uint8_t)~PS2_CLK_PIN;
}

static inline __attribute__((always_inline)) void ps2_clear_clk(void) {
  PS2_CLK_DDR |= PS2_CLK_PIN;
    1368:	8b 9a       	sbi	0x11, 3	; 17
  PS2_CLK_OUT &= (uint8_t)~PS2_CLK_PIN;
    136a:	93 98       	cbi	0x12, 3	; 18
    case PS2_ST_PREP_START:
      // clk the start bit, which is already been cleared.
      ps2_clear_clk();
      ps2_state = PS2_ST_SEND_START;
    136c:	82 e0       	ldi	r24, 0x02	; 2
        ps2_device_host_inhibit();
      }
      break;
    case PS2_ST_PREP_BIT:
      ps2_clear_clk();
      ps2_state = PS2_ST_SEND_BIT;
    136e:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <ps2_state>
    1372:	cb cf       	rjmp	.-106    	; 0x130a <__vector_16+0x30>
      // clk the start bit, which is already been cleared.
      ps2_clear_clk();
      ps2_state = PS2_ST_SEND_START;
      break;
    case PS2_ST_SEND_START:
      ps2_read_byte();
    1374:	0e 94 f5 02 	call	0x5ea	; 0x5ea <ps2_read_byte>
  // CTC mode
  PS2_TCCR2 |= PS2_TCCR2_DATA;
}

static inline __attribute__((always_inline)) void ps2_set_clk(void) {
  PS2_CLK_OUT |= PS2_CLK_PIN;
    1378:	93 9a       	sbi	0x12, 3	; 18
  PS2_CLK_DDR &= (uint8_t)~PS2_CLK_PIN;
    137a:	8b 98       	cbi	0x11, 3	; 17
      ps2_set_clk();  // bring CLK hi
      if(ps2_read_clk()) {
    137c:	83 9b       	sbis	0x10, 3	; 16
    137e:	03 c0       	rjmp	.+6      	; 0x1386 <__vector_16+0xac>
        ps2_write_bit();
    1380:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <ps2_write_bit>
    1384:	c2 cf       	rjmp	.-124    	; 0x130a <__vector_16+0x30>
      } else {
        ps2_device_host_inhibit();
    1386:	0e 94 20 04 	call	0x840	; 0x840 <ps2_device_host_inhibit>
    138a:	bf cf       	rjmp	.-130    	; 0x130a <__vector_16+0x30>
}

static inline __attribute__((always_inline)) void ps2_clear_clk(void) {
  PS2_CLK_DDR |= PS2_CLK_PIN;
    138c:	8b 9a       	sbi	0x11, 3	; 17
  PS2_CLK_OUT &= (uint8_t)~PS2_CLK_PIN;
    138e:	93 98       	cbi	0x12, 3	; 18
      }
      break;
    case PS2_ST_PREP_BIT:
      ps2_clear_clk();
      ps2_state = PS2_ST_SEND_BIT;
    1390:	84 e0       	ldi	r24, 0x04	; 4
    1392:	ed cf       	rjmp	.-38     	; 0x136e <__vector_16+0x94>
  // CTC mode
  PS2_TCCR2 |= PS2_TCCR2_DATA;
}

static inline __attribute__((always_inline)) void ps2_set_clk(void) {
  PS2_CLK_OUT |= PS2_CLK_PIN;
    1394:	93 9a       	sbi	0x12, 3	; 18
  PS2_CLK_DDR &= (uint8_t)~PS2_CLK_PIN;
    1396:	8b 98       	cbi	0x11, 3	; 17
      break;
    case PS2_ST_SEND_BIT:
      ps2_set_clk();  // bring CLK hi
      if(ps2_read_clk()) {
    1398:	83 9b       	sbis	0x10, 3	; 16
    139a:	f5 cf       	rjmp	.-22     	; 0x1386 <__vector_16+0xac>
        if(ps2_bit_count == 8) {
    139c:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <ps2_bit_count>
    13a0:	88 30       	cpi	r24, 0x08	; 8
    13a2:	71 f7       	brne	.-36     	; 0x1380 <__vector_16+0xa6>
          // we are done..., do parity
          ps2_write_parity();
    13a4:	0e 94 b8 02 	call	0x570	; 0x570 <ps2_write_parity>
          ps2_state = PS2_ST_PREP_PARITY;
    13a8:	85 e0       	ldi	r24, 0x05	; 5
    13aa:	e1 cf       	rjmp	.-62     	; 0x136e <__vector_16+0x94>
}

static inline __attribute__((always_inline)) void ps2_clear_clk(void) {
  PS2_CLK_DDR |= PS2_CLK_PIN;
    13ac:	8b 9a       	sbi	0x11, 3	; 17
  PS2_CLK_OUT &= (uint8_t)~PS2_CLK_PIN;
    13ae:	93 98       	cbi	0x12, 3	; 18
      }
      break;
    case PS2_ST_PREP_PARITY:
      // clock parity
      ps2_clear_clk();
      ps2_state = PS2_ST_SEND_PARITY;
    13b0:	86 e0       	ldi	r24, 0x06	; 6
    13b2:	dd cf       	rjmp	.-70     	; 0x136e <__vector_16+0x94>
  // CTC mode
  PS2_TCCR2 |= PS2_TCCR2_DATA;
}

static inline __attribute__((always_inline)) void ps2_set_clk(void) {
  PS2_CLK_OUT |= PS2_CLK_PIN;
    13b4:	93 9a       	sbi	0x12, 3	; 18
  PS2_CLK_DDR &= (uint8_t)~PS2_CLK_PIN;
    13b6:	8b 98       	cbi	0x11, 3	; 17
      break;
    case PS2_ST_SEND_PARITY:
      ps2_set_clk();  // bring CLK hi
      if(ps2_read_clk()) {
    13b8:	83 9b       	sbis	0x10, 3	; 16
    13ba:	e5 cf       	rjmp	.-54     	; 0x1386 <__vector_16+0xac>
static inline __attribute__((always_inline)) uint8_t ps2_read_clk(void) {
  return PS2_CLK_IN & PS2_CLK_PIN;
}

static inline __attribute__((always_inline)) void ps2_set_data(void) {
  PS2_DATA_OUT |= PS2_DATA_PIN;
    13bc:	92 9a       	sbi	0x12, 2	; 18
  PS2_DATA_DDR &= (uint8_t)~PS2_DATA_PIN;
    13be:	8a 98       	cbi	0x11, 2	; 17
        ps2_set_data();
        ps2_state = PS2_ST_PREP_STOP;
    13c0:	87 e0       	ldi	r24, 0x07	; 7
    13c2:	d5 cf       	rjmp	.-86     	; 0x136e <__vector_16+0x94>
  PS2_CLK_OUT |= PS2_CLK_PIN;
  PS2_CLK_DDR &= (uint8_t)~PS2_CLK_PIN;
}

static inline __attribute__((always_inline)) void ps2_clear_clk(void) {
  PS2_CLK_DDR |= PS2_CLK_PIN;
    13c4:	8b 9a       	sbi	0x11, 3	; 17
  PS2_CLK_OUT &= (uint8_t)~PS2_CLK_PIN;
    13c6:	93 98       	cbi	0x12, 3	; 18
        ps2_device_host_inhibit();
      }
      break;
    case PS2_ST_PREP_STOP:
      ps2_clear_clk();
      ps2_state = PS2_ST_SEND_STOP;
    13c8:	88 e0       	ldi	r24, 0x08	; 8
    13ca:	d1 cf       	rjmp	.-94     	; 0x136e <__vector_16+0x94>
  ps2_parity = 0;
  ps2_byte = txbuf[( tx_tail + 1 ) & PS2_TX_BUFFER_MASK];  /* Start transmition */
}

static void ps2_commit_read_byte(void) {
  tx_tail = ( tx_tail + 1 ) & PS2_TX_BUFFER_MASK;      /* Store new index */
    13cc:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <tx_tail>
    13d0:	8f 5f       	subi	r24, 0xFF	; 255
    13d2:	87 70       	andi	r24, 0x07	; 7
    13d4:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <tx_tail>
  // CTC mode
  PS2_TCCR2 |= PS2_TCCR2_DATA;
}

static inline __attribute__((always_inline)) void ps2_set_clk(void) {
  PS2_CLK_OUT |= PS2_CLK_PIN;
    13d8:	93 9a       	sbi	0x12, 3	; 18
  PS2_CLK_DDR &= (uint8_t)~PS2_CLK_PIN;
    13da:	8b 98       	cbi	0x11, 3	; 17
      break;
    case PS2_ST_SEND_STOP:
      // If host wanted to abort, they had to do it before now.
      ps2_commit_read_byte();
      ps2_set_clk();  // bring CLK hi
      if(ps2_read_clk()) {
    13dc:	83 9b       	sbis	0x10, 3	; 16
    13de:	d3 cf       	rjmp	.-90     	; 0x1386 <__vector_16+0xac>
        if(ps2_read_data()) {
    13e0:	82 9b       	sbis	0x10, 2	; 16
    13e2:	61 c0       	rjmp	.+194    	; 0x14a6 <__vector_16+0x1cc>
          // for some reason, you have to wait a while before sending again.
          ps2_holdoff_count=PS2_SEND_HOLDOFF_COUNT;
    13e4:	8b e3       	ldi	r24, 0x3B	; 59
    13e6:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <ps2_holdoff_count>
          ps2_state = PS2_ST_HOLDOFF;
    13ea:	89 e0       	ldi	r24, 0x09	; 9
    13ec:	c0 cf       	rjmp	.-128    	; 0x136e <__vector_16+0x94>
}

static inline __attribute__((always_inline)) void ps2_clear_clk(void) {
  PS2_CLK_DDR |= PS2_CLK_PIN;
    13ee:	8b 9a       	sbi	0x11, 3	; 17
  PS2_CLK_OUT &= (uint8_t)~PS2_CLK_PIN;
    13f0:	93 98       	cbi	0x12, 3	; 18
    ps2_set_data();
  }
}

static void ps2_clear_counters(void) {
  ps2_byte = 0;
    13f2:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <ps2_byte>
  ps2_bit_count = 0;
    13f6:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <ps2_bit_count>
  ps2_parity = 0;
    13fa:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <ps2_parity>
    case PS2_ST_WAIT_START:
      // set CLK lo
      ps2_clear_clk();
      ps2_clear_counters();
      // read start bit
      if(ps2_read_data()) {
    13fe:	82 9b       	sbis	0x10, 2	; 16
    1400:	09 c0       	rjmp	.+18     	; 0x1414 <__vector_16+0x13a>
  // CTC mode
  PS2_TCCR2 |= PS2_TCCR2_DATA;
}

static inline __attribute__((always_inline)) void ps2_set_clk(void) {
  PS2_CLK_OUT |= PS2_CLK_PIN;
    1402:	93 9a       	sbi	0x12, 3	; 18
  PS2_CLK_DDR &= (uint8_t)~PS2_CLK_PIN;
    1404:	8b 98       	cbi	0x11, 3	; 17
        // not sure what you do if start bit is high...
        ps2_set_clk();
        ps2_state = PS2_ST_IDLE;
    1406:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <ps2_state>
        ps2_disable_timer();
    140a:	0e 94 14 03 	call	0x628	; 0x628 <ps2_disable_timer>
        ps2_enable_clk_fall();
    140e:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <ps2_enable_clk_fall>
    1412:	7b cf       	rjmp	.-266    	; 0x130a <__vector_16+0x30>
      } else {
        ps2_state = PS2_ST_GET_START;
    1414:	8b e0       	ldi	r24, 0x0B	; 11
    1416:	ab cf       	rjmp	.-170    	; 0x136e <__vector_16+0x94>
  // CTC mode
  PS2_TCCR2 |= PS2_TCCR2_DATA;
}

static inline __attribute__((always_inline)) void ps2_set_clk(void) {
  PS2_CLK_OUT |= PS2_CLK_PIN;
    1418:	93 9a       	sbi	0x12, 3	; 18
  PS2_CLK_DDR &= (uint8_t)~PS2_CLK_PIN;
    141a:	8b 98       	cbi	0x11, 3	; 17
      }
      break;
    case PS2_ST_GET_START:
      ps2_set_clk();  // bring CLK hi
      if(ps2_read_clk()) {
    141c:	83 9b       	sbis	0x10, 3	; 16
    141e:	b3 cf       	rjmp	.-154    	; 0x1386 <__vector_16+0xac>
      if(ps2_read_clk()) {
        if(ps2_bit_count == 8) {
          // done, do Parity bit
          ps2_state = PS2_ST_GET_PARITY;
        } else {
          ps2_state = PS2_ST_WAIT_BIT;
    1420:	8c e0       	ldi	r24, 0x0C	; 12
    1422:	a5 cf       	rjmp	.-182    	; 0x136e <__vector_16+0x94>
}

static inline __attribute__((always_inline)) void ps2_clear_clk(void) {
  PS2_CLK_DDR |= PS2_CLK_PIN;
    1424:	8b 9a       	sbi	0x11, 3	; 17
  PS2_CLK_OUT &= (uint8_t)~PS2_CLK_PIN;
    1426:	93 98       	cbi	0x12, 3	; 18
      }
      break;
    case PS2_ST_WAIT_BIT:
      ps2_clear_clk();
      // you read incoming bits on falling clock.
      ps2_read_bit();
    1428:	0e 94 c2 02 	call	0x584	; 0x584 <ps2_read_bit>
      ps2_set_clk();
      if(!ps2_read_clk()) {
        // kb wants to talk to us.
        ps2_set_data();
        ps2_enable_clk_fall();
        ps2_state = PS2_ST_GET_BIT;
    142c:	8d e0       	ldi	r24, 0x0D	; 13
    142e:	9f cf       	rjmp	.-194    	; 0x136e <__vector_16+0x94>
  // CTC mode
  PS2_TCCR2 |= PS2_TCCR2_DATA;
}

static inline __attribute__((always_inline)) void ps2_set_clk(void) {
  PS2_CLK_OUT |= PS2_CLK_PIN;
    1430:	93 9a       	sbi	0x12, 3	; 18
  PS2_CLK_DDR &= (uint8_t)~PS2_CLK_PIN;
    1432:	8b 98       	cbi	0x11, 3	; 17
      ps2_read_bit();
      ps2_state = PS2_ST_GET_BIT;
      break;
    case PS2_ST_GET_BIT:
      ps2_set_clk();  // bring CLK hi
      if(ps2_read_clk()) {
    1434:	83 9b       	sbis	0x10, 3	; 16
    1436:	a7 cf       	rjmp	.-178    	; 0x1386 <__vector_16+0xac>
        if(ps2_bit_count == 8) {
    1438:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <ps2_bit_count>
    143c:	88 30       	cpi	r24, 0x08	; 8
    143e:	81 f7       	brne	.-32     	; 0x1420 <__vector_16+0x146>
          // bing DATA low to ack
          ps2_clear_data();
          // commit data
          //ps2_write_byte();  jlb, moved.
        } else {
          ps2_state = PS2_ST_GET_PARITY;
    1440:	8f e0       	ldi	r24, 0x0F	; 15
    1442:	95 cf       	rjmp	.-214    	; 0x136e <__vector_16+0x94>
}

static inline __attribute__((always_inline)) void ps2_clear_clk(void) {
  PS2_CLK_DDR |= PS2_CLK_PIN;
    1444:	8b 9a       	sbi	0x11, 3	; 17
  PS2_CLK_OUT &= (uint8_t)~PS2_CLK_PIN;
    1446:	93 98       	cbi	0x12, 3	; 18
      }
      break;
    case PS2_ST_GET_PARITY:
      ps2_clear_clk();
      // ignore parity for now.
      ps2_state = PS2_ST_WAIT_STOP;
    1448:	80 e1       	ldi	r24, 0x10	; 16
    144a:	91 cf       	rjmp	.-222    	; 0x136e <__vector_16+0x94>
  // CTC mode
  PS2_TCCR2 |= PS2_TCCR2_DATA;
}

static inline __attribute__((always_inline)) void ps2_set_clk(void) {
  PS2_CLK_OUT |= PS2_CLK_PIN;
    144c:	93 9a       	sbi	0x12, 3	; 18
  PS2_CLK_DDR &= (uint8_t)~PS2_CLK_PIN;
    144e:	8b 98       	cbi	0x11, 3	; 17
      break;
    case PS2_ST_WAIT_STOP:
      ps2_set_clk();  // bring CLK hi
      if(ps2_read_clk()) {
    1450:	83 9b       	sbis	0x10, 3	; 16
    1452:	99 cf       	rjmp	.-206    	; 0x1386 <__vector_16+0xac>
        if(ps2_read_data()) {
    1454:	82 9b       	sbis	0x10, 2	; 16
    1456:	f4 cf       	rjmp	.-24     	; 0x1440 <__vector_16+0x166>
          ps2_state = PS2_ST_WAIT_ACK;
    1458:	83 e1       	ldi	r24, 0x13	; 19
    145a:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <ps2_state>
  PS2_DATA_OUT |= PS2_DATA_PIN;
  PS2_DATA_DDR &= (uint8_t)~PS2_DATA_PIN;
}

static inline __attribute__((always_inline)) void ps2_clear_data(void) {
  PS2_DATA_DDR |= PS2_DATA_PIN;
    145e:	8a 9a       	sbi	0x11, 2	; 17
  PS2_DATA_OUT &= (uint8_t)~PS2_DATA_PIN;
    1460:	92 98       	cbi	0x12, 2	; 18
    1462:	53 cf       	rjmp	.-346    	; 0x130a <__vector_16+0x30>
  PS2_CLK_OUT |= PS2_CLK_PIN;
  PS2_CLK_DDR &= (uint8_t)~PS2_CLK_PIN;
}

static inline __attribute__((always_inline)) void ps2_clear_clk(void) {
  PS2_CLK_DDR |= PS2_CLK_PIN;
    1464:	8b 9a       	sbi	0x11, 3	; 17
  PS2_CLK_OUT &= (uint8_t)~PS2_CLK_PIN;
    1466:	93 98       	cbi	0x12, 3	; 18
        ps2_device_host_inhibit();
      }
      break;
    case PS2_ST_WAIT_ACK:
      ps2_clear_clk();
      ps2_state = PS2_ST_GET_ACK;
    1468:	82 e1       	ldi	r24, 0x12	; 18
    146a:	81 cf       	rjmp	.-254    	; 0x136e <__vector_16+0x94>
  // CTC mode
  PS2_TCCR2 |= PS2_TCCR2_DATA;
}

static inline __attribute__((always_inline)) void ps2_set_clk(void) {
  PS2_CLK_OUT |= PS2_CLK_PIN;
    146c:	93 9a       	sbi	0x12, 3	; 18
  PS2_CLK_DDR &= (uint8_t)~PS2_CLK_PIN;
    146e:	8b 98       	cbi	0x11, 3	; 17
static inline __attribute__((always_inline)) uint8_t ps2_read_clk(void) {
  return PS2_CLK_IN & PS2_CLK_PIN;
}

static inline __attribute__((always_inline)) void ps2_set_data(void) {
  PS2_DATA_OUT |= PS2_DATA_PIN;
    1470:	92 9a       	sbi	0x12, 2	; 18
  PS2_DATA_DDR &= (uint8_t)~PS2_DATA_PIN;
    1472:	8a 98       	cbi	0x11, 2	; 17
      break;
    case PS2_ST_GET_ACK:
      ps2_set_clk();
      ps2_set_data();
      // we just need to wait a 50uS or so, to ensure the host saw the CLK go high
      ps2_holdoff_count = 1;
    1474:	81 e0       	ldi	r24, 0x01	; 1
    1476:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <ps2_holdoff_count>
      ps2_state = PS2_ST_HOLDOFF;
    147a:	89 e0       	ldi	r24, 0x09	; 9
    147c:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <ps2_state>
      ps2_write_byte();   //jlb moved
    1480:	0e 94 05 03 	call	0x60a	; 0x60a <ps2_write_byte>
    1484:	42 cf       	rjmp	.-380    	; 0x130a <__vector_16+0x30>
      break;
    case PS2_ST_HOLDOFF:
      ps2_holdoff_count--;
    1486:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <ps2_holdoff_count>
    148a:	81 50       	subi	r24, 0x01	; 1
    148c:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <ps2_holdoff_count>
      if(!ps2_holdoff_count) {
    1490:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <ps2_holdoff_count>
    1494:	81 11       	cpse	r24, r1
    1496:	39 cf       	rjmp	.-398    	; 0x130a <__vector_16+0x30>
        if(ps2_read_clk()) {
    1498:	83 9b       	sbis	0x10, 3	; 16
    149a:	75 cf       	rjmp	.-278    	; 0x1386 <__vector_16+0xac>
          if(ps2_read_data()) {
    149c:	82 9b       	sbis	0x10, 2	; 16
    149e:	03 c0       	rjmp	.+6      	; 0x14a6 <__vector_16+0x1cc>
  switch (ps2_state) {
    case PS2_ST_GET_BIT:
    case PS2_ST_GET_PARITY:
    case PS2_ST_GET_STOP:
      // do we have data to send to keyboard?
      ps2_check_for_data();
    14a0:	0e 94 03 04 	call	0x806	; 0x806 <ps2_check_for_data>
    14a4:	32 cf       	rjmp	.-412    	; 0x130a <__vector_16+0x30>
      if(!ps2_holdoff_count) {
        if(ps2_read_clk()) {
          if(ps2_read_data()) {
            ps2_check_for_data();
          } else {
            ps2_state = PS2_ST_WAIT_START;
    14a6:	8a e0       	ldi	r24, 0x0A	; 10
    14a8:	62 cf       	rjmp	.-316    	; 0x136e <__vector_16+0x94>
          ps2_device_host_inhibit();
        }
      }
      break;
    default:
      ps2_disable_timer();
    14aa:	0e 94 14 03 	call	0x628	; 0x628 <ps2_disable_timer>
    14ae:	2d cf       	rjmp	.-422    	; 0x130a <__vector_16+0x30>
  }
}

#ifdef PS2_ENABLE_HOST
static inline __attribute__((always_inline)) void ps2_host_timer_irq(void) {
  ps2_disable_timer();
    14b0:	0e 94 14 03 	call	0x628	; 0x628 <ps2_disable_timer>
  switch (ps2_state) {
    14b4:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <ps2_state>
    14b8:	8d 30       	cpi	r24, 0x0D	; 13
    14ba:	91 f3       	breq	.-28     	; 0x14a0 <__vector_16+0x1c6>
    14bc:	70 f4       	brcc	.+28     	; 0x14da <__vector_16+0x200>
    14be:	81 30       	cpi	r24, 0x01	; 1
    14c0:	09 f0       	breq	.+2      	; 0x14c4 <__vector_16+0x1ea>
    14c2:	23 cf       	rjmp	.-442    	; 0x130a <__vector_16+0x30>
}

static inline __attribute__((always_inline)) void ps2_clear_data(void) {
  PS2_DATA_DDR |= PS2_DATA_PIN;
    14c4:	8a 9a       	sbi	0x11, 2	; 17
  PS2_DATA_OUT &= (uint8_t)~PS2_DATA_PIN;
    14c6:	92 98       	cbi	0x12, 2	; 18
  // CTC mode
  PS2_TCCR2 |= PS2_TCCR2_DATA;
}

static inline __attribute__((always_inline)) void ps2_set_clk(void) {
  PS2_CLK_OUT |= PS2_CLK_PIN;
    14c8:	93 9a       	sbi	0x12, 3	; 18
  PS2_CLK_DDR &= (uint8_t)~PS2_CLK_PIN;
    14ca:	8b 98       	cbi	0x11, 3	; 17
      break;
    case PS2_ST_PREP_START:
      // we waited 100uS for device to notice us, bring DATA low and CLK hi
      ps2_clear_data();
      ps2_set_clk();
      if(!ps2_read_clk()) {
    14cc:	83 99       	sbic	0x10, 3	; 16
    14ce:	0b c0       	rjmp	.+22     	; 0x14e6 <__vector_16+0x20c>
static inline __attribute__((always_inline)) uint8_t ps2_read_clk(void) {
  return PS2_CLK_IN & PS2_CLK_PIN;
}

static inline __attribute__((always_inline)) void ps2_set_data(void) {
  PS2_DATA_OUT |= PS2_DATA_PIN;
    14d0:	92 9a       	sbi	0x12, 2	; 18
  PS2_DATA_DDR &= (uint8_t)~PS2_DATA_PIN;
    14d2:	8a 98       	cbi	0x11, 2	; 17
        // kb wants to talk to us.
        ps2_set_data();
        ps2_enable_clk_fall();
    14d4:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <ps2_enable_clk_fall>
    14d8:	a9 cf       	rjmp	.-174    	; 0x142c <__vector_16+0x152>
}

#ifdef PS2_ENABLE_HOST
static inline __attribute__((always_inline)) void ps2_host_timer_irq(void) {
  ps2_disable_timer();
  switch (ps2_state) {
    14da:	8f 30       	cpi	r24, 0x0F	; 15
    14dc:	09 f3       	breq	.-62     	; 0x14a0 <__vector_16+0x1c6>
    14de:	81 31       	cpi	r24, 0x11	; 17
    14e0:	09 f0       	breq	.+2      	; 0x14e4 <__vector_16+0x20a>
    14e2:	13 cf       	rjmp	.-474    	; 0x130a <__vector_16+0x30>
    14e4:	dd cf       	rjmp	.-70     	; 0x14a0 <__vector_16+0x1c6>
        ps2_enable_clk_fall();
        ps2_state = PS2_ST_GET_BIT;
      } else {
        // really start bit...
        // now, wait for falling CLK
        ps2_enable_clk_fall();
    14e6:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <ps2_enable_clk_fall>
        ps2_state = PS2_ST_PREP_BIT;
    14ea:	83 e0       	ldi	r24, 0x03	; 3
    14ec:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <ps2_state>
        ps2_read_byte();
    14f0:	0e 94 f5 02 	call	0x5ea	; 0x5ea <ps2_read_byte>
    14f4:	0a cf       	rjmp	.-492    	; 0x130a <__vector_16+0x30>

000014f6 <main>:
#if defined ENABLE_UART0 || defined ENABLE_UART1
/* Initialize UART */
void uart_init(void) {
  /* Set the baud rate */
#  if defined ENABLE_UART0
  UART0_MODE_SETUP();
    14f6:	86 e0       	ldi	r24, 0x06	; 6
    14f8:	80 bd       	out	0x20, r24	; 32

  UBRRAH = CALC_BPS(UART0_BAUDRATE) >> 8;
    14fa:	10 bc       	out	0x20, r1	; 32
  UBRRAL = CALC_BPS(UART0_BAUDRATE) & 0xff;
    14fc:	87 e0       	ldi	r24, 0x07	; 7
    14fe:	89 b9       	out	0x09, r24	; 9
  /* double the speed of the serial port. */
  UCSRAA = (1<<U2X0);
#    endif

  /* Enable UART receiver and transmitter */
  UCSRAB = (0
    1500:	88 e1       	ldi	r24, 0x18	; 24
    1502:	8a b9       	out	0x0a, r24	; 10



  /* Flush buffers */
#    if defined UART0_TX_BUFFER_SHIFT && UART0_TX_BUFFER_SHIFT > 0
  tx0_tail = 0;
    1504:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <tx0_tail>
  tx0_head = 0;
    1508:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <tx0_head>
#    if defined UART0_RX_BUFFER_SHIFT && UART0_RX_BUFFER_SHIFT > 0
  rx0_tail = 0;
  rx0_head = 0;
#    endif

  stdout = &mystdout;
    150c:	80 e0       	ldi	r24, 0x00	; 0
    150e:	91 e0       	ldi	r25, 0x01	; 1
    1510:	90 93 92 01 	sts	0x0192, r25	; 0x800192 <__iob+0x3>
    1514:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <__iob+0x2>
  ps2_putc(PS2_CMD_LEDS);
  ps2_putc(led_state);
}

void poll_init(void) {
  LED_init(LED_PIN_7);
    1518:	0e 94 f7 01 	call	0x3ee	; 0x3ee <LED_init.constprop.1>
  RESET_INIT();
    151c:	95 9a       	sbi	0x12, 5	; 18
  XPT_PORT_STROBE_OUT&=(uint8_t)~XPT_PIN_STROBE;
    151e:	96 98       	cbi	0x12, 6	; 18
  XPT_DDR_STROBE|=XPT_PIN_STROBE;
    1520:	8e 9a       	sbi	0x11, 6	; 17
  XPT_DDR_DATA=0xff;
    1522:	8f ef       	ldi	r24, 0xFF	; 255
    1524:	87 bb       	out	0x17, r24	; 23
  sw_init((1<<SW_RESTORE) | (1<<SW_CAPSENSE) | (1<<SW_4080));
    1526:	0e 94 02 02 	call	0x404	; 0x404 <sw_init.constprop.0>

  // initially, load defaults from EEPROM
  while(!eeprom_is_ready());
    152a:	e1 99       	sbic	0x1c, 1	; 28
    152c:	fe cf       	rjmp	.-4      	; 0x152a <main+0x34>
  layout=eeprom_read_byte(POLL_ADDR_LAYOUT)%POLL_LAYOUT_NUM;
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	80 e0       	ldi	r24, 0x00	; 0
    1532:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <eeprom_read_byte>
    1536:	83 70       	andi	r24, 0x03	; 3
    1538:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <layout.lto_priv.13>
  while(!eeprom_is_ready());
    153c:	e1 99       	sbic	0x1c, 1	; 28
    153e:	fe cf       	rjmp	.-4      	; 0x153c <main+0x46>
  led_state=eeprom_read_byte(POLL_ADDR_LED_STATE);
    1540:	81 e0       	ldi	r24, 0x01	; 1
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <eeprom_read_byte>
    1548:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <led_state.lto_priv.23>
  while(!eeprom_is_ready());
    154c:	e1 99       	sbic	0x1c, 1	; 28
    154e:	fe cf       	rjmp	.-4      	; 0x154c <main+0x56>
  sw_state=eeprom_read_byte(POLL_ADDR_SW_STATE)&(1<<SW_4080);
    1550:	82 e0       	ldi	r24, 0x02	; 2
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <eeprom_read_byte>
    1558:	82 70       	andi	r24, 0x02	; 2
    155a:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <sw_state>

  reset_matrix();
    155e:	0e 94 78 04 	call	0x8f0	; 0x8f0 <reset_matrix>

  OCR2=POLL_IRQ_DIVIDER; 
    1562:	80 ef       	ldi	r24, 0xF0	; 240
    1564:	82 bd       	out	0x22, r24	; 34
  // Set OC2 clk  to SYSCLK/1024 and Compare Timer Mode
  TCCR2 = (1<<CS22) | (1<<CS21) | (1<<CS20) | (1<<WGM21);
    1566:	8f e0       	ldi	r24, 0x0F	; 15
    1568:	87 bd       	out	0x27, r24	; 39
  // set up OC2 IRQ
  TIMSK |= (1<<OCIE2);
    156a:	89 b7       	in	r24, 0x39	; 57
    156c:	80 61       	ori	r24, 0x10	; 16
    156e:	89 bf       	out	0x39, r24	; 57

void main( void ) {
  uart_init();

  poll_init();  // do it here to reset cross-point switch everytime.
  if(MODE_DETECT) {
    1570:	84 9b       	sbis	0x10, 4	; 16
    1572:	9b c0       	rjmp	.+310    	; 0x16aa <main+0x1b4>
    ps2_init(PS2_MODE_HOST);
    1574:	82 e0       	ldi	r24, 0x02	; 2
    1576:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <ps2_init>
    uart_putc('H');
    157a:	88 e4       	ldi	r24, 0x48	; 72
    157c:	0e 94 10 02 	call	0x420	; 0x420 <uart0_putc>
    //poll_init();  // do it above to reset cross-point switch everytime
    sei();
    1580:	78 94       	sei

// This function, normalizes the PS2 keycodes in
void poll(void) {
  uint8_t state=POLL_ST_IDLE;
  uint8_t key;
  LED_blink(LED_PIN_7,layout+1,LED_FLAG_END_ON);
    1582:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <layout.lto_priv.13>
    1586:	8f 5f       	subi	r24, 0xFF	; 255
    1588:	80 68       	ori	r24, 0x80	; 128
    158a:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <led_program+0x7>
  led_count[led]=0;
    158e:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <led_count+0x7>
        case POLL_ST_GET_PAUSE_1:
          // we get 14
          if(key==PS2_KEY_PCTRL) {
            state=POLL_ST_GET_PAUSE_2;
          } else {
            state=POLL_ST_IDLE;
    1592:	c0 e0       	ldi	r28, 0x00	; 0
    1594:	01 c0       	rjmp	.+2      	; 0x1598 <main+0xa2>
      switch(state) {
        case POLL_ST_IDLE:
          switch(key) {
            case PS2_KEY_EXT:
              // we got E0
              state=POLL_ST_GET_X_KEY;
    1596:	c1 e0       	ldi	r28, 0x01	; 1
    }
  }
}

uint8_t ps2_data_available( void ) {
  return ( rx_head != rx_tail ); /* Return 0 (FALSE) if the receive buffer is empty */
    1598:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <rx_head.lto_priv.5>
    159c:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <rx_tail.lto_priv.7>
  uint8_t state=POLL_ST_IDLE;
  uint8_t key;
  LED_blink(LED_PIN_7,layout+1,LED_FLAG_END_ON);

  for(;;) {
    if(ps2_data_available() != 0) {
    15a0:	98 17       	cp	r25, r24
    15a2:	d1 f3       	breq	.-12     	; 0x1598 <main+0xa2>
      // kb sent data...
      key=ps2_getc();
    15a4:	0e 94 9b 02 	call	0x536	; 0x536 <ps2_getc>
    15a8:	d8 2f       	mov	r29, r24
      if(key == PS2_CMD_BAT) {
    15aa:	8a 3a       	cpi	r24, 0xAA	; 170
    15ac:	b1 f4       	brne	.+44     	; 0x15da <main+0xe4>
        reset_matrix();
    15ae:	0e 94 78 04 	call	0x8f0	; 0x8f0 <reset_matrix>
    }
  }
}

static void init_keyboard(void) {
  meta=0;
    15b2:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <meta.lto_priv.9>
  config=FALSE;
    15b6:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <config>
  shift_override=FALSE;
    15ba:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <shift_override.lto_priv.17>

  // need to set KB LEDs to match internal state
  ps2_putc(PS2_CMD_LEDS);
    15be:	8d ee       	ldi	r24, 0xED	; 237
    15c0:	0e 94 3b 03 	call	0x676	; 0x676 <ps2_putc>
  ps2_putc(led_state);
    15c4:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <led_state.lto_priv.23>
    15c8:	0e 94 3b 03 	call	0x676	; 0x676 <ps2_putc>
            case PS2_CMD_ECHO:
            case PS2_CMD_ERROR:
            case PS2_CMD_OVERFLOW:
              break;
            default:
              poll_parse_key(key,TRUE);
    15cc:	61 e0       	ldi	r22, 0x01	; 1
              state=POLL_ST_IDLE;
              break;
          }
          break;
        case POLL_ST_GET_KEY_UP:
          poll_parse_key(key,FALSE);
    15ce:	8d 2f       	mov	r24, r29
          if(key==PS2_KEY_PAUSE) {
            //debug('R');
            // we received a complete Pause/Break, do something about it.
            poll_parse_key(0x80|PS2_KEY_PAUSE,TRUE);
            delay_jiffy();
            poll_parse_key(0x80|PS2_KEY_PAUSE,FALSE);
    15d0:	0e 94 20 07 	call	0xe40	; 0xe40 <poll_parse_key>
    15d4:	de cf       	rjmp	.-68     	; 0x1592 <main+0x9c>
          poll_parse_key(key,FALSE);
          state=POLL_ST_IDLE;
          break;
        case POLL_ST_GET_X_KEY:
          if(key==PS2_KEY_UP) {
            state=POLL_ST_GET_X_KEY_UP;
    15d6:	c3 e0       	ldi	r28, 0x03	; 3
    15d8:	df cf       	rjmp	.-66     	; 0x1598 <main+0xa2>
      if(key == PS2_CMD_BAT) {
        reset_matrix();
        init_keyboard();
        state = POLL_ST_IDLE;
      }
      switch(state) {
    15da:	cb 30       	cpi	r28, 0x0B	; 11
    15dc:	e8 f6       	brcc	.-70     	; 0x1598 <main+0xa2>
    15de:	ec 2f       	mov	r30, r28
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	eb 50       	subi	r30, 0x0B	; 11
    15e4:	f5 4f       	sbci	r31, 0xF5	; 245
    15e6:	0c 94 74 0e 	jmp	0x1ce8	; 0x1ce8 <__tablejump2__>
    15ea:	00 0b       	sbc	r16, r16
    15ec:	1a 0b       	sbc	r17, r26
    15ee:	18 0b       	sbc	r17, r24
    15f0:	23 0b       	sbc	r18, r19
    15f2:	28 0b       	sbc	r18, r24
    15f4:	2d 0b       	sbc	r18, r29
    15f6:	32 0b       	sbc	r19, r18
    15f8:	37 0b       	sbc	r19, r23
    15fa:	3c 0b       	sbc	r19, r28
    15fc:	41 0b       	sbc	r20, r17
    15fe:	46 0b       	sbc	r20, r22
        case POLL_ST_IDLE:
          switch(key) {
    1600:	8e 3e       	cpi	r24, 0xEE	; 238
    1602:	09 f4       	brne	.+2      	; 0x1606 <main+0x110>
    1604:	c9 cf       	rjmp	.-110    	; 0x1598 <main+0xa2>
    1606:	40 f4       	brcc	.+16     	; 0x1618 <main+0x122>
    1608:	80 3e       	cpi	r24, 0xE0	; 224
    160a:	09 f4       	brne	.+2      	; 0x160e <main+0x118>
    160c:	c4 cf       	rjmp	.-120    	; 0x1596 <main+0xa0>
    160e:	81 3e       	cpi	r24, 0xE1	; 225
    1610:	69 f0       	breq	.+26     	; 0x162c <main+0x136>
    1612:	81 11       	cpse	r24, r1
    1614:	db cf       	rjmp	.-74     	; 0x15cc <main+0xd6>
    1616:	c0 cf       	rjmp	.-128    	; 0x1598 <main+0xa2>
    1618:	8a 3f       	cpi	r24, 0xFA	; 250
    161a:	09 f4       	brne	.+2      	; 0x161e <main+0x128>
    161c:	bd cf       	rjmp	.-134    	; 0x1598 <main+0xa2>
    161e:	8f 3f       	cpi	r24, 0xFF	; 255
    1620:	09 f4       	brne	.+2      	; 0x1624 <main+0x12e>
    1622:	ba cf       	rjmp	.-140    	; 0x1598 <main+0xa2>
    1624:	80 3f       	cpi	r24, 0xF0	; 240
    1626:	91 f6       	brne	.-92     	; 0x15cc <main+0xd6>
              // we got E0
              state=POLL_ST_GET_X_KEY;
              break;
            case PS2_KEY_UP:
              // get normal key up.
              state=POLL_ST_GET_KEY_UP;
    1628:	c2 e0       	ldi	r28, 0x02	; 2
    162a:	b6 cf       	rjmp	.-148    	; 0x1598 <main+0xa2>
              break;
            case PS2_KEY_EXT_2:
              // we got an E1
              state=POLL_ST_GET_PAUSE_1;
    162c:	c4 e0       	ldi	r28, 0x04	; 4
    162e:	b4 cf       	rjmp	.-152    	; 0x1598 <main+0xa2>
              state=POLL_ST_IDLE;
              break;
          }
          break;
        case POLL_ST_GET_KEY_UP:
          poll_parse_key(key,FALSE);
    1630:	60 e0       	ldi	r22, 0x00	; 0
    1632:	cd cf       	rjmp	.-102    	; 0x15ce <main+0xd8>
          state=POLL_ST_IDLE;
          break;
        case POLL_ST_GET_X_KEY:
          if(key==PS2_KEY_UP) {
    1634:	80 3f       	cpi	r24, 0xF0	; 240
    1636:	79 f2       	breq	.-98     	; 0x15d6 <main+0xe0>
          } else if(key==PS2_KEY_LSHIFT) {
            // when NumLock is pressed, INS and DEL prepend with EO 12 (extended shift), but we don't care, so eat code.
            // Also, when PrintScreen is pressed, it too sends an E0 12
            state=POLL_ST_IDLE;
          } else {
            poll_parse_key(0x80 | key,TRUE);
    1638:	61 e0       	ldi	r22, 0x01	; 1
          state=POLL_ST_IDLE;
          break;
        case POLL_ST_GET_X_KEY:
          if(key==PS2_KEY_UP) {
            state=POLL_ST_GET_X_KEY_UP;
          } else if(key==PS2_KEY_LSHIFT) {
    163a:	82 31       	cpi	r24, 0x12	; 18
    163c:	09 f4       	brne	.+2      	; 0x1640 <main+0x14a>
    163e:	a9 cf       	rjmp	.-174    	; 0x1592 <main+0x9c>
          if(key==PS2_KEY_LSHIFT) {
            // when NumLock is pressed, INS and DEL prepend with EO 12 (extended shift), but we don't care, so eat code.
            // Also, when PrintScreen is pressed, it too sends an E0 12
            state=POLL_ST_IDLE;
          } else {
            poll_parse_key(0x80 | key,FALSE);
    1640:	8d 2f       	mov	r24, r29
    1642:	80 68       	ori	r24, 0x80	; 128
    1644:	c5 cf       	rjmp	.-118    	; 0x15d0 <main+0xda>
            poll_parse_key(0x80 | key,TRUE);
            state=POLL_ST_IDLE;
          }
          break;
        case POLL_ST_GET_X_KEY_UP:
          if(key==PS2_KEY_LSHIFT) {
    1646:	82 31       	cpi	r24, 0x12	; 18
    1648:	09 f4       	brne	.+2      	; 0x164c <main+0x156>
    164a:	a3 cf       	rjmp	.-186    	; 0x1592 <main+0x9c>
            // when NumLock is pressed, INS and DEL prepend with EO 12 (extended shift), but we don't care, so eat code.
            // Also, when PrintScreen is pressed, it too sends an E0 12
            state=POLL_ST_IDLE;
          } else {
            poll_parse_key(0x80 | key,FALSE);
    164c:	60 e0       	ldi	r22, 0x00	; 0
    164e:	f8 cf       	rjmp	.-16     	; 0x1640 <main+0x14a>
            state=POLL_ST_IDLE;
          }
          break;
        case POLL_ST_GET_PAUSE_1:
          // we get 14
          if(key==PS2_KEY_PCTRL) {
    1650:	84 31       	cpi	r24, 0x14	; 20
    1652:	09 f0       	breq	.+2      	; 0x1656 <main+0x160>
    1654:	9e cf       	rjmp	.-196    	; 0x1592 <main+0x9c>
            state=POLL_ST_GET_PAUSE_2;
    1656:	c5 e0       	ldi	r28, 0x05	; 5
    1658:	9f cf       	rjmp	.-194    	; 0x1598 <main+0xa2>
            state=POLL_ST_IDLE;
          }
          break;
        case POLL_ST_GET_PAUSE_2:
          // we got 77
          if(key==PS2_KEY_PAUSE) {
    165a:	87 37       	cpi	r24, 0x77	; 119
    165c:	09 f0       	breq	.+2      	; 0x1660 <main+0x16a>
    165e:	99 cf       	rjmp	.-206    	; 0x1592 <main+0x9c>
            state=POLL_ST_GET_PAUSE_3;
    1660:	c6 e0       	ldi	r28, 0x06	; 6
    1662:	9a cf       	rjmp	.-204    	; 0x1598 <main+0xa2>
            state=POLL_ST_IDLE;
          }
          break;
        case POLL_ST_GET_PAUSE_3:
          // we get E1
          if(key==PS2_KEY_EXT_2) {
    1664:	81 3e       	cpi	r24, 0xE1	; 225
    1666:	09 f0       	breq	.+2      	; 0x166a <main+0x174>
    1668:	94 cf       	rjmp	.-216    	; 0x1592 <main+0x9c>
            state=POLL_ST_GET_PAUSE_4;
    166a:	c7 e0       	ldi	r28, 0x07	; 7
    166c:	95 cf       	rjmp	.-214    	; 0x1598 <main+0xa2>
            state=POLL_ST_IDLE;
          }
          break;
        case POLL_ST_GET_PAUSE_4:
          // we got F0
          if(key==PS2_KEY_UP) {
    166e:	80 3f       	cpi	r24, 0xF0	; 240
    1670:	09 f0       	breq	.+2      	; 0x1674 <main+0x17e>
    1672:	8f cf       	rjmp	.-226    	; 0x1592 <main+0x9c>
            state=POLL_ST_GET_PAUSE_5;
    1674:	c8 e0       	ldi	r28, 0x08	; 8
    1676:	90 cf       	rjmp	.-224    	; 0x1598 <main+0xa2>
            state=POLL_ST_IDLE;
          }
          break;
        case POLL_ST_GET_PAUSE_5:
          // we got 14
          if(key==PS2_KEY_PCTRL) {
    1678:	84 31       	cpi	r24, 0x14	; 20
    167a:	09 f0       	breq	.+2      	; 0x167e <main+0x188>
    167c:	8a cf       	rjmp	.-236    	; 0x1592 <main+0x9c>
            state=POLL_ST_GET_PAUSE_6;
    167e:	c9 e0       	ldi	r28, 0x09	; 9
    1680:	8b cf       	rjmp	.-234    	; 0x1598 <main+0xa2>
            state=POLL_ST_IDLE;
          }
          break;
        case POLL_ST_GET_PAUSE_6:
          // we got F0
          if(key==PS2_KEY_UP) {
    1682:	80 3f       	cpi	r24, 0xF0	; 240
    1684:	09 f0       	breq	.+2      	; 0x1688 <main+0x192>
    1686:	85 cf       	rjmp	.-246    	; 0x1592 <main+0x9c>
            state=POLL_ST_GET_PAUSE_7;
    1688:	ca e0       	ldi	r28, 0x0A	; 10
    168a:	86 cf       	rjmp	.-244    	; 0x1598 <main+0xa2>
            state=POLL_ST_IDLE;
          }
          break;
        case POLL_ST_GET_PAUSE_7:
          // we got 77
          if(key==PS2_KEY_PAUSE) {
    168c:	87 37       	cpi	r24, 0x77	; 119
    168e:	09 f0       	breq	.+2      	; 0x1692 <main+0x19c>
    1690:	80 cf       	rjmp	.-256    	; 0x1592 <main+0x9c>
            //debug('R');
            // we received a complete Pause/Break, do something about it.
            poll_parse_key(0x80|PS2_KEY_PAUSE,TRUE);
    1692:	61 e0       	ldi	r22, 0x01	; 1
    1694:	87 ef       	ldi	r24, 0xF7	; 247
    1696:	0e 94 20 07 	call	0xe40	; 0xe40 <poll_parse_key>
    LED_irq();
  }
}

static void delay_jiffy(void) {
  uint8_t i=TCNT2-1;
    169a:	83 b5       	in	r24, 0x23	; 35
    169c:	81 50       	subi	r24, 0x01	; 1
  // 1/60 second delay for funky shifting settling.
  //TCNT2=0;
  // Set OC2 clk  to SYSCLK/1024 and Compare Timer Mode
  //TCCR2 = (1<<CS22) | (1<<CS21) | (1<<CS20) | (1<<WGM21);
  while(TCNT2!=i);
    169e:	93 b5       	in	r25, 0x23	; 35
    16a0:	89 13       	cpse	r24, r25
    16a2:	fd cf       	rjmp	.-6      	; 0x169e <main+0x1a8>
          if(key==PS2_KEY_PAUSE) {
            //debug('R');
            // we received a complete Pause/Break, do something about it.
            poll_parse_key(0x80|PS2_KEY_PAUSE,TRUE);
            delay_jiffy();
            poll_parse_key(0x80|PS2_KEY_PAUSE,FALSE);
    16a4:	60 e0       	ldi	r22, 0x00	; 0
    16a6:	87 ef       	ldi	r24, 0xF7	; 247
    16a8:	93 cf       	rjmp	.-218    	; 0x15d0 <main+0xda>
    poll();
  } else {
    ps2_init(PS2_MODE_DEVICE);
    16aa:	81 e0       	ldi	r24, 0x01	; 1
    16ac:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <ps2_init>
    uart_putc('D');
    16b0:	84 e4       	ldi	r24, 0x44	; 68
    16b2:	0e 94 10 02 	call	0x420	; 0x420 <uart0_putc>
      break;
  }
}

void kb_init() {
  kb_state = KB_ST_READ;
    16b6:	82 e0       	ldi	r24, 0x02	; 2
    16b8:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <kb_state>
  kb_repeat_code = KB_NO_REPEAT;  // set keyboard repeat to 0.
    16bc:	8f ef       	ldi	r24, 0xFF	; 255
    16be:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <kb_repeat_code>
  KB_COL_OUT = 0xff;         // turn on pullups.
}

void kb_set_repeat_delay(uint16_t ms) {
  // 1800 ticks/sec, .5 ms per tick.
  kb_repeat_delay = (ms << 1);
    16c2:	24 ef       	ldi	r18, 0xF4	; 244
    16c4:	31 e0       	ldi	r19, 0x01	; 1
    16c6:	30 93 2c 01 	sts	0x012C, r19	; 0x80012c <kb_repeat_delay+0x1>
    16ca:	20 93 2b 01 	sts	0x012B, r18	; 0x80012b <kb_repeat_delay>
  kb_repeat_count = kb_repeat_delay;
    16ce:	20 91 2b 01 	lds	r18, 0x012B	; 0x80012b <kb_repeat_delay>
    16d2:	30 91 2c 01 	lds	r19, 0x012C	; 0x80012c <kb_repeat_delay+0x1>
    16d6:	30 93 2a 01 	sts	0x012A, r19	; 0x80012a <kb_repeat_count+0x1>
    16da:	20 93 29 01 	sts	0x0129, r18	; 0x800129 <kb_repeat_count>
}

void kb_set_repeat_period(uint16_t period) {
  kb_repeat_period = (period << 1);
    16de:	20 e4       	ldi	r18, 0x40	; 64
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	30 93 2e 01 	sts	0x012E, r19	; 0x80012e <kb_repeat_period+0x1>
    16e6:	20 93 2d 01 	sts	0x012D, r18	; 0x80012d <kb_repeat_period>
  kb_repeat_code = KB_NO_REPEAT;  // set keyboard repeat to 0.
  kb_set_repeat_delay(250);       // wait 250 ms
  kb_set_repeat_period(32);       // once every 32 ms

#ifdef KB_SCAN_PORTS  
  KB_ROW_LO_OUT = 0xff;
    16ea:	85 bb       	out	0x15, r24	; 21
  KB_ROW_HI_OUT = 0xff;
    16ec:	88 bb       	out	0x18, r24	; 24
#endif
  KB_COL_OUT = 0xff;         // turn on pullups.
    16ee:	8b bb       	out	0x1b, r24	; 27
static uint8_t led_state;

void scan_init(void) {
  // init keyboard matrix scanning engine
  kb_init();
  sw_init((1<<SW_RESTORE) | (1<<SW_CAPSENSE) | (1<<SW_4080));
    16f0:	0e 94 02 02 	call	0x404	; 0x404 <sw_init.constprop.0>
  LED_init(LED_PIN_7);
    16f4:	0e 94 f7 01 	call	0x3ee	; 0x3ee <LED_init.constprop.1>
  
  // initially, load defaults from EEPROM
  while(!eeprom_is_ready());
    16f8:	e1 99       	sbic	0x1c, 1	; 28
    16fa:	fe cf       	rjmp	.-4      	; 0x16f8 <main+0x202>
  layout=eeprom_read_byte(SCAN_ADDR_LAYOUT)%SCAN_LAYOUT_NUM;
    16fc:	88 e0       	ldi	r24, 0x08	; 8
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <eeprom_read_byte>
    1704:	81 70       	andi	r24, 0x01	; 1
    1706:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <layout.lto_priv.14>
  
  OCR2=SCAN_IRQ_DIVIDER; //28 counts * 256 cycles/count * 33 times per run * 60 runs/sec
    170a:	8c e1       	ldi	r24, 0x1C	; 28
    170c:	82 bd       	out	0x22, r24	; 34
  TCNT2=0;
    170e:	13 bc       	out	0x23, r1	; 35
  // Set OC2 clk  to SYSCLK/256 and Compare Timer Mode
  TCCR2 = (1<<CS22) | (1<<CS21) | (1<<WGM21);
    1710:	8e e0       	ldi	r24, 0x0E	; 14
    1712:	87 bd       	out	0x27, r24	; 39
  // set up OC2 IRQ
  TIMSK |= (1<<OCIE2);
    1714:	89 b7       	in	r24, 0x39	; 57
    1716:	80 61       	ori	r24, 0x10	; 16
    1718:	89 bf       	out	0x39, r24	; 57
    scan_init();
    sei();
    171a:	78 94       	sei
void scan(void) {
  uint8_t data;
  uint8_t state;
  uint8_t config=FALSE;
  uint8_t debug=FALSE;
  LED_blink(LED_PIN_7,layout+1,LED_FLAG_END_ON);
    171c:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <layout.lto_priv.14>
    1720:	8f 5f       	subi	r24, 0xFF	; 255
  led_mask|=(1<<led);
  LED_off(led);
}

void LED_blink(uint8_t led, uint8_t count, uint8_t flags) {
  led_program[led]=count| flags; 
    1722:	80 68       	ori	r24, 0x80	; 128
    1724:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <led_program+0x7>
  led_count[led]=0;
    1728:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <led_count+0x7>

void scan(void) {
  uint8_t data;
  uint8_t state;
  uint8_t config=FALSE;
  uint8_t debug=FALSE;
    172c:	10 e0       	ldi	r17, 0x00	; 0
}

void scan(void) {
  uint8_t data;
  uint8_t state;
  uint8_t config=FALSE;
    172e:	d0 e0       	ldi	r29, 0x00	; 0
    1730:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <rx_head.lto_priv.5>
    1734:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <rx_tail.lto_priv.7>
  uint8_t debug=FALSE;
  LED_blink(LED_PIN_7,layout+1,LED_FLAG_END_ON);
  
  for(;;) {
    while(ps2_data_available()) {
    1738:	98 13       	cpse	r25, r24
    173a:	40 c0       	rjmp	.+128    	; 0x17bc <main+0x2c6>
uint8_t kb_get_repeat_code() {
  return kb_repeat_code;
}

uint8_t kb_data_available(void) {
  return ( kb_rxhead != kb_rxtail ); /* Return 0 (FALSE) if the receive buffer is empty */
    173c:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <kb_rxhead>
    1740:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <kb_rxtail>
        default:
          ps2_handle_cmds(data);
          break;
      }
    }
    if(kb_data_available()) {
    1744:	98 17       	cp	r25, r24
    1746:	09 f4       	brne	.+2      	; 0x174a <main+0x254>
    1748:	0d c1       	rjmp	.+538    	; 0x1964 <main+0x46e>
}

uint8_t kb_recv( void ) {
	uint8_t tmptail;
	
	while (kb_rxhead == kb_rxtail);
    174a:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <kb_rxhead>
    174e:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <kb_rxtail>
    1752:	98 17       	cp	r25, r24
    1754:	d1 f3       	breq	.-12     	; 0x174a <main+0x254>
	tmptail = (kb_rxtail + 1) & KB_RX_BUFFER_MASK;/* Calculate buffer index */
    1756:	e0 91 3f 01 	lds	r30, 0x013F	; 0x80013f <kb_rxtail>
    175a:	ef 5f       	subi	r30, 0xFF	; 255
    175c:	ef 70       	andi	r30, 0x0F	; 15
	
	kb_rxtail = tmptail;                /* Store new index */
    175e:	e0 93 3f 01 	sts	0x013F, r30	; 0x80013f <kb_rxtail>
	
	return kb_rxbuf[tmptail];           /* Return data */
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	e1 5d       	subi	r30, 0xD1	; 209
    1766:	fe 4f       	sbci	r31, 0xFE	; 254
    1768:	c0 81       	ld	r28, Z
      data = kb_recv();
      if(debug) {
    176a:	11 23       	and	r17, r17
    176c:	19 f0       	breq	.+6      	; 0x1774 <main+0x27e>
        debug('k');
        uart_puthex(data);
    176e:	8c 2f       	mov	r24, r28
    1770:	0e 94 30 02 	call	0x460	; 0x460 <uart0_puthex>
    1774:	0c 2f       	mov	r16, r28
    1776:	0f 77       	andi	r16, 0x7F	; 127
    1778:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <meta.lto_priv.10>
      }
      state=(data&KB_KEY_UP?FALSE:TRUE);
      if((data&0x7f) ==SCAN_C64_KEY_LSHIFT)
    177c:	0c 30       	cpi	r16, 0x0C	; 12
    177e:	09 f0       	breq	.+2      	; 0x1782 <main+0x28c>
    1780:	c0 c0       	rjmp	.+384    	; 0x1902 <main+0x40c>
        meta=(meta&(uint8_t)~SCAN_FLAG_LSHIFT) | (state?SCAN_FLAG_LSHIFT:0);
    1782:	8e 7f       	andi	r24, 0xFE	; 254
      data = kb_recv();
      if(debug) {
        debug('k');
        uart_puthex(data);
      }
      state=(data&KB_KEY_UP?FALSE:TRUE);
    1784:	9c 2f       	mov	r25, r28
    1786:	90 95       	com	r25
    1788:	99 1f       	adc	r25, r25
    178a:	99 27       	eor	r25, r25
    178c:	99 1f       	adc	r25, r25
      else if((data&0x7f) ==SCAN_C64_KEY_RSHIFT)
        meta=(meta&(uint8_t)~SCAN_FLAG_RSHIFT) | (state?SCAN_FLAG_RSHIFT:0);
      else if((data&0x7f) ==SCAN_C64_KEY_CTRL)
        meta=(meta&(uint8_t)~SCAN_FLAG_CTRL) | (state?SCAN_FLAG_CTRL:0);
      else if((data&0x7f) ==SCAN_C64_KEY_CMDR)
        meta=(meta&(uint8_t)~SCAN_FLAG_CMDR) | (state?SCAN_FLAG_CMDR:0);
    178e:	89 2b       	or	r24, r25
    1790:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <meta.lto_priv.10>
          // write layout to EEPROM
          update_eeprom(SCAN_ADDR_LAYOUT,layout);
        }
        config=!config;
      }
      if(config) {
    1794:	dd 23       	and	r29, r29
    1796:	09 f4       	brne	.+2      	; 0x179a <main+0x2a4>
    1798:	1d c1       	rjmp	.+570    	; 0x19d4 <main+0x4de>
        switch(data) {
    179a:	cf 30       	cpi	r28, 0x0F	; 15
    179c:	09 f4       	brne	.+2      	; 0x17a0 <main+0x2aa>
    179e:	2a c1       	rjmp	.+596    	; 0x19f4 <main+0x4fe>
    17a0:	c2 33       	cpi	r28, 0x32	; 50
    17a2:	09 f4       	brne	.+2      	; 0x17a6 <main+0x2b0>
    17a4:	2c c1       	rjmp	.+600    	; 0x19fe <main+0x508>
    17a6:	c7 30       	cpi	r28, 0x07	; 7
    17a8:	09 f0       	breq	.+2      	; 0x17ac <main+0x2b6>
    17aa:	dc c0       	rjmp	.+440    	; 0x1964 <main+0x46e>
          case SCAN_C64_KEY_1:
            // symbolic
            layout=SCAN_LAYOUT_SYMBOLIC_C64;
    17ac:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <layout.lto_priv.14>
  led_mask|=(1<<led);
  LED_off(led);
}

void LED_blink(uint8_t led, uint8_t count, uint8_t flags) {
  led_program[led]=count| flags; 
    17b0:	81 e0       	ldi	r24, 0x01	; 1
    17b2:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <led_program+0x7>
  led_count[led]=0;
    17b6:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <led_count+0x7>
    17ba:	d4 c0       	rjmp	.+424    	; 0x1964 <main+0x46e>
  uint8_t debug=FALSE;
  LED_blink(LED_PIN_7,layout+1,LED_FLAG_END_ON);
  
  for(;;) {
    while(ps2_data_available()) {
      data=ps2_getc();
    17bc:	0e 94 9b 02 	call	0x536	; 0x536 <ps2_getc>
      switch(data) {
    17c0:	8d 3e       	cpi	r24, 0xED	; 237
    17c2:	09 f4       	brne	.+2      	; 0x17c6 <main+0x2d0>
    17c4:	41 c0       	rjmp	.+130    	; 0x1848 <main+0x352>
    17c6:	83 3f       	cpi	r24, 0xF3	; 243
    17c8:	09 f0       	breq	.+2      	; 0x17cc <main+0x2d6>
    17ca:	57 c0       	rjmp	.+174    	; 0x187a <main+0x384>
        case PS2_CMD_SET_RATE:
          ps2_putc(PS2_CMD_ACK);
    17cc:	8a ef       	ldi	r24, 0xFA	; 250
    17ce:	0e 94 3b 03 	call	0x676	; 0x676 <ps2_putc>
          data=ps2_getc();
    17d2:	0e 94 9b 02 	call	0x536	; 0x536 <ps2_getc>
}


/* this returns the initial delay in ms */
uint16_t ps2_get_typematic_delay(uint8_t rate) {
  return (((rate & 0x60) >> 5) + 1) * 250;
    17d6:	28 2f       	mov	r18, r24
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	a9 01       	movw	r20, r18
    17dc:	95 e0       	ldi	r25, 0x05	; 5
    17de:	55 95       	asr	r21
    17e0:	47 95       	ror	r20
    17e2:	9a 95       	dec	r25
    17e4:	e1 f7       	brne	.-8      	; 0x17de <main+0x2e8>
    17e6:	43 70       	andi	r20, 0x03	; 3
    17e8:	55 27       	eor	r21, r21
    17ea:	4f 5f       	subi	r20, 0xFF	; 255
    17ec:	5f 4f       	sbci	r21, 0xFF	; 255
    17ee:	9a ef       	ldi	r25, 0xFA	; 250
    17f0:	94 9f       	mul	r25, r20
    17f2:	b0 01       	movw	r22, r0
    17f4:	95 9f       	mul	r25, r21
    17f6:	70 0d       	add	r23, r0
    17f8:	11 24       	eor	r1, r1
  KB_COL_OUT = 0xff;         // turn on pullups.
}

void kb_set_repeat_delay(uint16_t ms) {
  // 1800 ticks/sec, .5 ms per tick.
  kb_repeat_delay = (ms << 1);
    17fa:	66 0f       	add	r22, r22
    17fc:	77 1f       	adc	r23, r23
    17fe:	70 93 2c 01 	sts	0x012C, r23	; 0x80012c <kb_repeat_delay+0x1>
    1802:	60 93 2b 01 	sts	0x012B, r22	; 0x80012b <kb_repeat_delay>
  kb_repeat_count = kb_repeat_delay;
    1806:	40 91 2b 01 	lds	r20, 0x012B	; 0x80012b <kb_repeat_delay>
    180a:	50 91 2c 01 	lds	r21, 0x012C	; 0x80012c <kb_repeat_delay+0x1>
    180e:	50 93 2a 01 	sts	0x012A, r21	; 0x80012a <kb_repeat_count+0x1>
    1812:	40 93 29 01 	sts	0x0129, r20	; 0x800129 <kb_repeat_count>
}


/* this returns the rate in CPS */
uint16_t ps2_get_typematic_period(uint8_t rate) {
  return ((8 + (rate & 0x07)) * (1 << ((rate & 0x18) >> 3)) << 2);
    1816:	87 70       	andi	r24, 0x07	; 7
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	08 96       	adiw	r24, 0x08	; 8
    181c:	53 e0       	ldi	r21, 0x03	; 3
    181e:	35 95       	asr	r19
    1820:	27 95       	ror	r18
    1822:	5a 95       	dec	r21
    1824:	e1 f7       	brne	.-8      	; 0x181e <main+0x328>
    1826:	23 70       	andi	r18, 0x03	; 3
    1828:	33 27       	eor	r19, r19
    182a:	02 c0       	rjmp	.+4      	; 0x1830 <main+0x33a>
    182c:	88 0f       	add	r24, r24
    182e:	99 1f       	adc	r25, r25
    1830:	2a 95       	dec	r18
    1832:	e2 f7       	brpl	.-8      	; 0x182c <main+0x336>
}

void kb_set_repeat_period(uint16_t period) {
  kb_repeat_period = (period << 1);
    1834:	63 e0       	ldi	r22, 0x03	; 3
    1836:	88 0f       	add	r24, r24
    1838:	99 1f       	adc	r25, r25
    183a:	6a 95       	dec	r22
    183c:	e1 f7       	brne	.-8      	; 0x1836 <main+0x340>
    183e:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <kb_repeat_period+0x1>
    1842:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <kb_repeat_period>
    1846:	74 cf       	rjmp	.-280    	; 0x1730 <main+0x23a>
          kb_set_repeat_delay(ps2_get_typematic_delay(data));
          kb_set_repeat_period(ps2_get_typematic_period(data));
          break;
        case PS2_CMD_LEDS:
          ps2_putc(PS2_CMD_ACK);
    1848:	8a ef       	ldi	r24, 0xFA	; 250
    184a:	0e 94 3b 03 	call	0x676	; 0x676 <ps2_putc>
          data=ps2_getc()&0x07;
    184e:	0e 94 9b 02 	call	0x536	; 0x536 <ps2_getc>
    1852:	c8 2f       	mov	r28, r24
    1854:	87 70       	andi	r24, 0x07	; 7
          led_state=data;
    1856:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <led_state.lto_priv.24>
          ps2_putc(PS2_CMD_ACK);
    185a:	8a ef       	ldi	r24, 0xFA	; 250
    185c:	0e 94 3b 03 	call	0x676	; 0x676 <ps2_putc>
          if(!config) {
    1860:	d1 11       	cpse	r29, r1
    1862:	66 cf       	rjmp	.-308    	; 0x1730 <main+0x23a>
            if(data&PS2_LED_CAPS_LOCK) {
    1864:	c2 ff       	sbrs	r28, 2
    1866:	05 c0       	rjmp	.+10     	; 0x1872 <main+0x37c>
  led_program[led]=0xff; 
  led_count[led]=0;
} 

void LED_off(uint8_t led) {
  led_program[led]=0; 
    1868:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <led_program+0x7>
  led_count[led]=0;
}

void LED_on(uint8_t led) {
  led_program[led]=0xff; 
  led_count[led]=0;
    186c:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <led_count+0x7>
    1870:	5f cf       	rjmp	.-322    	; 0x1730 <main+0x23a>
  led_program[led]=count| flags; 
  led_count[led]=0;
}

void LED_on(uint8_t led) {
  led_program[led]=0xff; 
    1872:	8f ef       	ldi	r24, 0xFF	; 255
    1874:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <led_program+0x7>
    1878:	f9 cf       	rjmp	.-14     	; 0x186c <main+0x376>


void ps2_handle_cmds(uint8_t data) {
  uint8_t i;

    switch(data) {
    187a:	8d 5e       	subi	r24, 0xED	; 237
    187c:	83 31       	cpi	r24, 0x13	; 19
    187e:	10 f5       	brcc	.+68     	; 0x18c4 <main+0x3ce>
    1880:	e8 2f       	mov	r30, r24
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	ea 5b       	subi	r30, 0xBA	; 186
    1886:	f3 4f       	sbci	r31, 0xF3	; 243
    1888:	0c 94 74 0e 	jmp	0x1ce8	; 0x1ce8 <__tablejump2__>
    188c:	7b 0c       	add	r7, r11
    188e:	64 0c       	add	r6, r4
    1890:	62 0c       	add	r6, r2
    1892:	66 0c       	add	r6, r6
    1894:	62 0c       	add	r6, r2
    1896:	73 0c       	add	r7, r3
    1898:	62 0c       	add	r6, r2
    189a:	60 0c       	add	r6, r0
    189c:	60 0c       	add	r6, r0
    189e:	62 0c       	add	r6, r2
    18a0:	62 0c       	add	r6, r2
    18a2:	62 0c       	add	r6, r2
    18a4:	62 0c       	add	r6, r2
    18a6:	98 0b       	sbc	r25, r24
    18a8:	62 0c       	add	r6, r2
    18aa:	62 0c       	add	r6, r2
    18ac:	62 0c       	add	r6, r2
    18ae:	98 0b       	sbc	r25, r24
    18b0:	59 0c       	add	r5, r9
      case PS2_CMD_ACK:
        //ignore.
        break;
      case PS2_CMD_RESET:
        ps2_putc(PS2_CMD_ACK);
    18b2:	8a ef       	ldi	r24, 0xFA	; 250
    18b4:	0e 94 3b 03 	call	0x676	; 0x676 <ps2_putc>
        ps2_putc(PS2_CMD_BAT);
    18b8:	8a ea       	ldi	r24, 0xAA	; 170
        ps2_putc(0x83);
        break;
      case PS2_CMD_LEDS:
        ps2_putc(PS2_CMD_ACK);
        ps2_leds = ps2_getc()&0x07;
        ps2_putc(PS2_CMD_ACK);
    18ba:	0e 94 3b 03 	call	0x676	; 0x676 <ps2_putc>
    18be:	38 cf       	rjmp	.-400    	; 0x1730 <main+0x23a>
        break;
      case PS2_CMD_DISABLE:
        // we should disable sending output if we receive this command.
      case PS2_CMD_ENABLE:
        //clear out KB buffers
        ps2_clear_buffers();
    18c0:	0e 94 ac 02 	call	0x558	; 0x558 <ps2_clear_buffers>
        ps2_putc(0x83);
        break;
      case PS2_CMD_LEDS:
        ps2_putc(PS2_CMD_ACK);
        ps2_leds = ps2_getc()&0x07;
        ps2_putc(PS2_CMD_ACK);
    18c4:	8a ef       	ldi	r24, 0xFA	; 250
    18c6:	f9 cf       	rjmp	.-14     	; 0x18ba <main+0x3c4>
        break;
      default:
        ps2_putc(PS2_CMD_ACK);
        break;
      case PS2_CMD_ECHO:
        ps2_putc(PS2_CMD_ECHO);
    18c8:	8e ee       	ldi	r24, 0xEE	; 238
    18ca:	f7 cf       	rjmp	.-18     	; 0x18ba <main+0x3c4>
        break;
      case PS2_CMD_SET_CODE_SET:
        ps2_putc(PS2_CMD_ACK);
    18cc:	8a ef       	ldi	r24, 0xFA	; 250
    18ce:	0e 94 3b 03 	call	0x676	; 0x676 <ps2_putc>
        i = ps2_getc();
    18d2:	0e 94 9b 02 	call	0x536	; 0x536 <ps2_getc>
        if(i == 0) {
    18d6:	81 11       	cpse	r24, r1
    18d8:	03 c0       	rjmp	.+6      	; 0x18e0 <main+0x3ea>
          ps2_putc(ps2_codeset);
    18da:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <ps2_codeset>
    18de:	ed cf       	rjmp	.-38     	; 0x18ba <main+0x3c4>
        } else {
          ps2_codeset = i;
    18e0:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <ps2_codeset>
    18e4:	25 cf       	rjmp	.-438    	; 0x1730 <main+0x23a>
        break;
      case PS2_CMD_SET_RATE:
        // this should to be caught in another area, ignore if received here.
        break;
      case PS2_CMD_READ_ID:
        ps2_putc(PS2_CMD_ACK);
    18e6:	8a ef       	ldi	r24, 0xFA	; 250
    18e8:	0e 94 3b 03 	call	0x676	; 0x676 <ps2_putc>
        ps2_putc(0xab);
    18ec:	8b ea       	ldi	r24, 0xAB	; 171
    18ee:	0e 94 3b 03 	call	0x676	; 0x676 <ps2_putc>
        ps2_putc(0x83);
    18f2:	83 e8       	ldi	r24, 0x83	; 131
    18f4:	e2 cf       	rjmp	.-60     	; 0x18ba <main+0x3c4>
        break;
      case PS2_CMD_LEDS:
        ps2_putc(PS2_CMD_ACK);
    18f6:	8a ef       	ldi	r24, 0xFA	; 250
    18f8:	0e 94 3b 03 	call	0x676	; 0x676 <ps2_putc>
        ps2_leds = ps2_getc()&0x07;
    18fc:	0e 94 9b 02 	call	0x536	; 0x536 <ps2_getc>
    1900:	e1 cf       	rjmp	.-62     	; 0x18c4 <main+0x3ce>
        uart_puthex(data);
      }
      state=(data&KB_KEY_UP?FALSE:TRUE);
      if((data&0x7f) ==SCAN_C64_KEY_LSHIFT)
        meta=(meta&(uint8_t)~SCAN_FLAG_LSHIFT) | (state?SCAN_FLAG_LSHIFT:0);
      else if((data&0x7f) ==SCAN_C64_KEY_RSHIFT)
    1902:	03 33       	cpi	r16, 0x33	; 51
    1904:	31 f4       	brne	.+12     	; 0x1912 <main+0x41c>
        meta=(meta&(uint8_t)~SCAN_FLAG_RSHIFT) | (state?SCAN_FLAG_RSHIFT:0);
    1906:	8d 7f       	andi	r24, 0xFD	; 253
    1908:	92 e0       	ldi	r25, 0x02	; 2
    190a:	c7 ff       	sbrs	r28, 7
    190c:	40 cf       	rjmp	.-384    	; 0x178e <main+0x298>
      else if((data&0x7f) ==SCAN_C64_KEY_CTRL)
        meta=(meta&(uint8_t)~SCAN_FLAG_CTRL) | (state?SCAN_FLAG_CTRL:0);
      else if((data&0x7f) ==SCAN_C64_KEY_CMDR)
        meta=(meta&(uint8_t)~SCAN_FLAG_CMDR) | (state?SCAN_FLAG_CMDR:0);
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	3e cf       	rjmp	.-388    	; 0x178e <main+0x298>
      state=(data&KB_KEY_UP?FALSE:TRUE);
      if((data&0x7f) ==SCAN_C64_KEY_LSHIFT)
        meta=(meta&(uint8_t)~SCAN_FLAG_LSHIFT) | (state?SCAN_FLAG_LSHIFT:0);
      else if((data&0x7f) ==SCAN_C64_KEY_RSHIFT)
        meta=(meta&(uint8_t)~SCAN_FLAG_RSHIFT) | (state?SCAN_FLAG_RSHIFT:0);
      else if((data&0x7f) ==SCAN_C64_KEY_CTRL)
    1912:	05 30       	cpi	r16, 0x05	; 5
    1914:	29 f4       	brne	.+10     	; 0x1920 <main+0x42a>
        meta=(meta&(uint8_t)~SCAN_FLAG_CTRL) | (state?SCAN_FLAG_CTRL:0);
    1916:	8b 7f       	andi	r24, 0xFB	; 251
    1918:	94 e0       	ldi	r25, 0x04	; 4
    191a:	c7 ff       	sbrs	r28, 7
    191c:	38 cf       	rjmp	.-400    	; 0x178e <main+0x298>
    191e:	f7 cf       	rjmp	.-18     	; 0x190e <main+0x418>
      else if((data&0x7f) ==SCAN_C64_KEY_CMDR)
    1920:	02 30       	cpi	r16, 0x02	; 2
    1922:	29 f4       	brne	.+10     	; 0x192e <main+0x438>
        meta=(meta&(uint8_t)~SCAN_FLAG_CMDR) | (state?SCAN_FLAG_CMDR:0);
    1924:	87 7f       	andi	r24, 0xF7	; 247
    1926:	98 e0       	ldi	r25, 0x08	; 8
    1928:	c7 ff       	sbrs	r28, 7
    192a:	31 cf       	rjmp	.-414    	; 0x178e <main+0x298>
    192c:	f0 cf       	rjmp	.-32     	; 0x190e <main+0x418>
      else if((meta&(SCAN_FLAG_CMDR|SCAN_FLAG_CTRL))==(SCAN_FLAG_CMDR|SCAN_FLAG_CTRL) && data==(KB_KEY_UP|SCAN_C64_KEY_DEL)) {
    192e:	8c 70       	andi	r24, 0x0C	; 12
    1930:	8c 30       	cpi	r24, 0x0C	; 12
    1932:	09 f0       	breq	.+2      	; 0x1936 <main+0x440>
    1934:	2f cf       	rjmp	.-418    	; 0x1794 <main+0x29e>
    1936:	cf 3b       	cpi	r28, 0xBF	; 191
    1938:	09 f0       	breq	.+2      	; 0x193c <main+0x446>
    193a:	2c cf       	rjmp	.-424    	; 0x1794 <main+0x29e>
        // Ctrl/CMDR/DEL
        if(!config) {
    193c:	d1 11       	cpse	r29, r1
    193e:	3a c0       	rjmp	.+116    	; 0x19b4 <main+0x4be>
          // go into config mode
          parse_key(KB_KEY_UP | SCAN_C64_KEY_CMDR);
    1940:	82 e8       	ldi	r24, 0x82	; 130
    1942:	0e 94 67 06 	call	0xcce	; 0xcce <parse_key>
          parse_key(KB_KEY_UP | SCAN_C64_KEY_CTRL);
    1946:	85 e8       	ldi	r24, 0x85	; 133
    1948:	0e 94 67 06 	call	0xcce	; 0xcce <parse_key>
          parse_key(KB_KEY_UP | SCAN_C64_KEY_DEL);
    194c:	8f eb       	ldi	r24, 0xBF	; 191
    194e:	0e 94 67 06 	call	0xcce	; 0xcce <parse_key>
          kb_set_repeat_code(KB_NO_REPEAT);
    1952:	8f ef       	ldi	r24, 0xFF	; 255
    1954:	0e 94 08 06 	call	0xc10	; 0xc10 <kb_set_repeat_code>
  led_mask|=(1<<led);
  LED_off(led);
}

void LED_blink(uint8_t led, uint8_t count, uint8_t flags) {
  led_program[led]=count| flags; 
    1958:	8a e0       	ldi	r24, 0x0A	; 10
    195a:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <led_program+0x7>
  led_count[led]=0;
    195e:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <led_count+0x7>
    1962:	d1 e0       	ldi	r29, 0x01	; 1

uint8_t sw_data_available( void ) {
  return ( rx_head != rx_tail ); /* Return 0 (FALSE) if the receive buffer is empty */
    1964:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <rx_head.lto_priv.6>
    1968:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <rx_tail.lto_priv.8>
        if((data & KB_KEY_UP) && (data & 0x7f) == kb_get_repeat_code()) {
          kb_set_repeat_code(KB_NO_REPEAT);
        }
      }
    }
    if(sw_data_available()) {
    196c:	98 17       	cp	r25, r24
    196e:	09 f4       	brne	.+2      	; 0x1972 <main+0x47c>
    1970:	df ce       	rjmp	.-578    	; 0x1730 <main+0x23a>
  }
}

uint8_t sw_getc( void ) {
  
  while ( rx_head == rx_tail ) {
    1972:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <rx_head.lto_priv.6>
    1976:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <rx_tail.lto_priv.8>
    197a:	98 17       	cp	r25, r24
    197c:	d1 f3       	breq	.-12     	; 0x1972 <main+0x47c>
    ;
  }
  rx_tail = ( rx_tail + 1 ) & (sizeof(rx_buf) - 1);  /* Calculate and store buffer index */
    197e:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <rx_tail.lto_priv.8>
    1982:	8f 5f       	subi	r24, 0xFF	; 255
    1984:	83 70       	andi	r24, 0x03	; 3
    1986:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <rx_tail.lto_priv.8>
  
  return rx_buf[rx_tail];           /* Return data */
    198a:	e0 91 70 01 	lds	r30, 0x0170	; 0x800170 <rx_tail.lto_priv.8>
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	e4 59       	subi	r30, 0x94	; 148
    1992:	fe 4f       	sbci	r31, 0xFE	; 254
    1994:	c0 81       	ld	r28, Z
      
      // handle special switches.
      data=sw_getc();
      if(debug) {
    1996:	11 23       	and	r17, r17
    1998:	19 f0       	breq	.+6      	; 0x19a0 <main+0x4aa>
        debug('s');
        uart_puthex(data);
    199a:	8c 2f       	mov	r24, r28
    199c:	0e 94 30 02 	call	0x460	; 0x460 <uart0_puthex>
      }
      if(!config) {
    19a0:	d1 11       	cpse	r29, r1
    19a2:	c6 ce       	rjmp	.-628    	; 0x1730 <main+0x23a>
        switch(data) {
    19a4:	c2 30       	cpi	r28, 0x02	; 2
    19a6:	09 f4       	brne	.+2      	; 0x19aa <main+0x4b4>
    19a8:	40 c0       	rjmp	.+128    	; 0x1a2a <main+0x534>
    19aa:	60 f5       	brcc	.+88     	; 0x1a04 <main+0x50e>
    19ac:	c1 11       	cpse	r28, r1
    19ae:	c0 ce       	rjmp	.-640    	; 0x1730 <main+0x23a>
            ps2_putc(PS2_KEY_CAPS_LOCK);
            break;
          case SW_CAPSENSE | KB_KEY_UP:
            // need to send break code for capslock
            ps2_putc(PS2_KEY_UP);
            ps2_putc(PS2_KEY_CAPS_LOCK);
    19b0:	88 e5       	ldi	r24, 0x58	; 88
    19b2:	83 cf       	rjmp	.-250    	; 0x18ba <main+0x3c4>
          parse_key(KB_KEY_UP | SCAN_C64_KEY_CTRL);
          parse_key(KB_KEY_UP | SCAN_C64_KEY_DEL);
          kb_set_repeat_code(KB_NO_REPEAT);
          LED_blink(LED_PIN_7,10,LED_FLAG_NONE);
        } else {
          LED_blink(LED_PIN_7,10,(led_state&PS2_LED_CAPS_LOCK?LED_FLAG_NONE:LED_FLAG_END_ON));
    19b4:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <led_state.lto_priv.24>
    19b8:	82 ff       	sbrs	r24, 2
    19ba:	1a c0       	rjmp	.+52     	; 0x19f0 <main+0x4fa>
    19bc:	80 e0       	ldi	r24, 0x00	; 0
  led_mask|=(1<<led);
  LED_off(led);
}

void LED_blink(uint8_t led, uint8_t count, uint8_t flags) {
  led_program[led]=count| flags; 
    19be:	8a 60       	ori	r24, 0x0A	; 10
    19c0:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <led_program+0x7>
  led_count[led]=0;
    19c4:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <led_count+0x7>
          // write layout to EEPROM
          update_eeprom(SCAN_ADDR_LAYOUT,layout);
    19c8:	60 91 6a 01 	lds	r22, 0x016A	; 0x80016a <layout.lto_priv.14>
    19cc:	88 e0       	ldi	r24, 0x08	; 8
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	0e 94 0a 07 	call	0xe14	; 0xe14 <update_eeprom>
            //PS2_set_debug(debug);
            LED_blink(LED_PIN_7,1,LED_FLAG_NONE);
            break;
        }
      } else {
        parse_key(data);
    19d4:	8c 2f       	mov	r24, r28
    19d6:	0e 94 67 06 	call	0xcce	; 0xcce <parse_key>
        // if KEY_UP AND data is the key repeating, stop.
        if((data & KB_KEY_UP) && (data & 0x7f) == kb_get_repeat_code()) {
    19da:	c7 ff       	sbrs	r28, 7
    19dc:	07 c0       	rjmp	.+14     	; 0x19ec <main+0x4f6>
    kb_repeat_code = code;
  }
}

uint8_t kb_get_repeat_code() {
  return kb_repeat_code;
    19de:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <kb_repeat_code>
    19e2:	08 13       	cpse	r16, r24
    19e4:	03 c0       	rjmp	.+6      	; 0x19ec <main+0x4f6>
          kb_set_repeat_code(KB_NO_REPEAT);
    19e6:	8f ef       	ldi	r24, 0xFF	; 255
    19e8:	0e 94 08 06 	call	0xc10	; 0xc10 <kb_set_repeat_code>
            break;
        }
      } else {
        parse_key(data);
        // if KEY_UP AND data is the key repeating, stop.
        if((data & KB_KEY_UP) && (data & 0x7f) == kb_get_repeat_code()) {
    19ec:	d0 e0       	ldi	r29, 0x00	; 0
    19ee:	ba cf       	rjmp	.-140    	; 0x1964 <main+0x46e>
          parse_key(KB_KEY_UP | SCAN_C64_KEY_CTRL);
          parse_key(KB_KEY_UP | SCAN_C64_KEY_DEL);
          kb_set_repeat_code(KB_NO_REPEAT);
          LED_blink(LED_PIN_7,10,LED_FLAG_NONE);
        } else {
          LED_blink(LED_PIN_7,10,(led_state&PS2_LED_CAPS_LOCK?LED_FLAG_NONE:LED_FLAG_END_ON));
    19f0:	80 e8       	ldi	r24, 0x80	; 128
    19f2:	e5 cf       	rjmp	.-54     	; 0x19be <main+0x4c8>
            layout=SCAN_LAYOUT_SYMBOLIC_C64;
            LED_blink(LED_PIN_7,1,LED_FLAG_NONE);
            break;
          case SCAN_C64_KEY_3: 
            // positional
            layout=SCAN_LAYOUT_POSITIONAL_C64;
    19f4:	81 e0       	ldi	r24, 0x01	; 1
    19f6:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <layout.lto_priv.14>
  led_mask|=(1<<led);
  LED_off(led);
}

void LED_blink(uint8_t led, uint8_t count, uint8_t flags) {
  led_program[led]=count| flags; 
    19fa:	83 e0       	ldi	r24, 0x03	; 3
    19fc:	da ce       	rjmp	.-588    	; 0x17b2 <main+0x2bc>
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	18 27       	eor	r17, r24
    1a02:	d7 ce       	rjmp	.-594    	; 0x17b2 <main+0x2bc>
      if(debug) {
        debug('s');
        uart_puthex(data);
      }
      if(!config) {
        switch(data) {
    1a04:	c0 38       	cpi	r28, 0x80	; 128
    1a06:	69 f0       	breq	.+26     	; 0x1a22 <main+0x52c>
    1a08:	c2 38       	cpi	r28, 0x82	; 130
    1a0a:	09 f0       	breq	.+2      	; 0x1a0e <main+0x518>
    1a0c:	91 ce       	rjmp	.-734    	; 0x1730 <main+0x23a>
                ps2_putc(PS2_KEY_PAUSE);
                break;
            }
            break;
          case (SW_RESTORE | KB_KEY_UP):
            switch(layout) {
    1a0e:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <layout.lto_priv.14>
    1a12:	81 30       	cpi	r24, 0x01	; 1
    1a14:	09 f0       	breq	.+2      	; 0x1a18 <main+0x522>
    1a16:	8c ce       	rjmp	.-744    	; 0x1730 <main+0x23a>
              case SCAN_LAYOUT_POSITIONAL_C64:
                ps2_putc(PS2_KEY_EXT);
    1a18:	80 ee       	ldi	r24, 0xE0	; 224
    1a1a:	0e 94 3b 03 	call	0x676	; 0x676 <ps2_putc>
                ps2_putc(PS2_KEY_UP);
    1a1e:	80 ef       	ldi	r24, 0xF0	; 240
    1a20:	09 c0       	rjmp	.+18     	; 0x1a34 <main+0x53e>
            // need to send make for capslock
            ps2_putc(PS2_KEY_CAPS_LOCK);
            break;
          case SW_CAPSENSE | KB_KEY_UP:
            // need to send break code for capslock
            ps2_putc(PS2_KEY_UP);
    1a22:	80 ef       	ldi	r24, 0xF0	; 240
    1a24:	0e 94 3b 03 	call	0x676	; 0x676 <ps2_putc>
    1a28:	c3 cf       	rjmp	.-122    	; 0x19b0 <main+0x4ba>
            ps2_putc(PS2_KEY_CAPS_LOCK);
            break;
          case SW_RESTORE:
            switch(layout) {
    1a2a:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <layout.lto_priv.14>
    1a2e:	81 30       	cpi	r24, 0x01	; 1
    1a30:	29 f4       	brne	.+10     	; 0x1a3c <main+0x546>
              case SCAN_LAYOUT_POSITIONAL_C64:
                ps2_putc(PS2_KEY_EXT);
    1a32:	80 ee       	ldi	r24, 0xE0	; 224
            break;
          case (SW_RESTORE | KB_KEY_UP):
            switch(layout) {
              case SCAN_LAYOUT_POSITIONAL_C64:
                ps2_putc(PS2_KEY_EXT);
                ps2_putc(PS2_KEY_UP);
    1a34:	0e 94 3b 03 	call	0x676	; 0x676 <ps2_putc>
                ps2_putc(PS2_KEY_PAGE_UP);
    1a38:	8d e7       	ldi	r24, 0x7D	; 125
    1a3a:	3f cf       	rjmp	.-386    	; 0x18ba <main+0x3c4>
                ps2_putc(PS2_KEY_EXT);
                ps2_putc(PS2_KEY_PAGE_UP);
                break;
              default:
                // send Pause/Break...
                ps2_putc(PS2_KEY_EXT_2);
    1a3c:	81 ee       	ldi	r24, 0xE1	; 225
    1a3e:	0e 94 3b 03 	call	0x676	; 0x676 <ps2_putc>
                ps2_putc(PS2_KEY_PCTRL);
    1a42:	84 e1       	ldi	r24, 0x14	; 20
    1a44:	0e 94 3b 03 	call	0x676	; 0x676 <ps2_putc>
                ps2_putc(PS2_KEY_PAUSE);
    1a48:	87 e7       	ldi	r24, 0x77	; 119
    1a4a:	0e 94 3b 03 	call	0x676	; 0x676 <ps2_putc>
                ps2_putc(PS2_KEY_EXT_2);
    1a4e:	81 ee       	ldi	r24, 0xE1	; 225
    1a50:	0e 94 3b 03 	call	0x676	; 0x676 <ps2_putc>
                ps2_putc(PS2_KEY_UP);
    1a54:	80 ef       	ldi	r24, 0xF0	; 240
    1a56:	0e 94 3b 03 	call	0x676	; 0x676 <ps2_putc>
                ps2_putc(PS2_KEY_PCTRL);
    1a5a:	84 e1       	ldi	r24, 0x14	; 20
    1a5c:	0e 94 3b 03 	call	0x676	; 0x676 <ps2_putc>
                ps2_putc(PS2_KEY_UP);
    1a60:	80 ef       	ldi	r24, 0xF0	; 240
    1a62:	0e 94 3b 03 	call	0x676	; 0x676 <ps2_putc>
                ps2_putc(PS2_KEY_PAUSE);
    1a66:	87 e7       	ldi	r24, 0x77	; 119
    1a68:	28 cf       	rjmp	.-432    	; 0x18ba <main+0x3c4>

00001a6a <__vector_10>:
#include "poll.h"
#include "ps2.h"
#include "scanner.h"
#include "uart.h"

ISR(TIMER2_COMP_vect) {
    1a6a:	1f 92       	push	r1
    1a6c:	0f 92       	push	r0
    1a6e:	0f b6       	in	r0, 0x3f	; 63
    1a70:	0f 92       	push	r0
    1a72:	11 24       	eor	r1, r1
    1a74:	1f 93       	push	r17
    1a76:	2f 93       	push	r18
    1a78:	3f 93       	push	r19
    1a7a:	4f 93       	push	r20
    1a7c:	5f 93       	push	r21
    1a7e:	6f 93       	push	r22
    1a80:	7f 93       	push	r23
    1a82:	8f 93       	push	r24
    1a84:	9f 93       	push	r25
    1a86:	af 93       	push	r26
    1a88:	bf 93       	push	r27
    1a8a:	cf 93       	push	r28
    1a8c:	df 93       	push	r29
    1a8e:	ef 93       	push	r30
    1a90:	ff 93       	push	r31
  if(MODE_DETECT) {
    1a92:	84 9b       	sbis	0x10, 4	; 16
    1a94:	20 c0       	rjmp	.+64     	; 0x1ad6 <__vector_10+0x6c>
static uint8_t led_state=0;
static uint8_t led_counter=0;
static uint8_t debug=0;

void poll_irq(void) {
  led_counter++;
    1a96:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <led_counter>
    1a9a:	8f 5f       	subi	r24, 0xFF	; 255
  if(led_counter==POLL_LED_IRQ_DIVIDER) {
    1a9c:	8a 30       	cpi	r24, 0x0A	; 10
    1a9e:	b1 f0       	breq	.+44     	; 0x1acc <__vector_10+0x62>
static uint8_t led_state=0;
static uint8_t led_counter=0;
static uint8_t debug=0;

void poll_irq(void) {
  led_counter++;
    1aa0:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <led_counter>
    poll_irq();
  } else {
    scan_irq();
  }
}
    1aa4:	ff 91       	pop	r31
    1aa6:	ef 91       	pop	r30
    1aa8:	df 91       	pop	r29
    1aaa:	cf 91       	pop	r28
    1aac:	bf 91       	pop	r27
    1aae:	af 91       	pop	r26
    1ab0:	9f 91       	pop	r25
    1ab2:	8f 91       	pop	r24
    1ab4:	7f 91       	pop	r23
    1ab6:	6f 91       	pop	r22
    1ab8:	5f 91       	pop	r21
    1aba:	4f 91       	pop	r20
    1abc:	3f 91       	pop	r19
    1abe:	2f 91       	pop	r18
    1ac0:	1f 91       	pop	r17
    1ac2:	0f 90       	pop	r0
    1ac4:	0f be       	out	0x3f, r0	; 63
    1ac6:	0f 90       	pop	r0
    1ac8:	1f 90       	pop	r1
    1aca:	18 95       	reti
  if(led_counter==POLL_LED_IRQ_DIVIDER) {
    led_counter=0;
    1acc:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <led_counter>
  kb_scan();
  sw_scan();
  led_divider++;
  if(led_divider==SCAN_LED_IRQ_DIVIDER) {
    led_divider=0;
    LED_irq();
    1ad0:	0e 94 ae 05 	call	0xb5c	; 0xb5c <LED_irq>
    1ad4:	e7 cf       	rjmp	.-50     	; 0x1aa4 <__vector_10+0x3a>
  uint8_t j;
  uint8_t in;
  uint16_t tmp;
  // this is where we scan.
  // we scan at 120Hz
  switch(kb_state) {
    1ad6:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <kb_state>
    1ada:	81 30       	cpi	r24, 0x01	; 1
    1adc:	09 f4       	brne	.+2      	; 0x1ae0 <__vector_10+0x76>
    1ade:	c0 c0       	rjmp	.+384    	; 0x1c60 <__vector_10+0x1f6>
    1ae0:	83 30       	cpi	r24, 0x03	; 3
    1ae2:	09 f4       	brne	.+2      	; 0x1ae6 <__vector_10+0x7c>
    1ae4:	cf c0       	rjmp	.+414    	; 0x1c84 <__vector_10+0x21a>
    default:
    case KB_ST_READ:
      in = kb_repeat_code;
    1ae6:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <kb_repeat_code>
      if(in != KB_NO_REPEAT) {
    1aea:	8f 3f       	cpi	r24, 0xFF	; 255
    1aec:	d1 f0       	breq	.+52     	; 0x1b22 <__vector_10+0xb8>
        kb_repeat_count--;
    1aee:	20 91 29 01 	lds	r18, 0x0129	; 0x800129 <kb_repeat_count>
    1af2:	30 91 2a 01 	lds	r19, 0x012A	; 0x80012a <kb_repeat_count+0x1>
    1af6:	21 50       	subi	r18, 0x01	; 1
    1af8:	31 09       	sbc	r19, r1
    1afa:	30 93 2a 01 	sts	0x012A, r19	; 0x80012a <kb_repeat_count+0x1>
    1afe:	20 93 29 01 	sts	0x0129, r18	; 0x800129 <kb_repeat_count>
        if(!kb_repeat_count) {
    1b02:	20 91 29 01 	lds	r18, 0x0129	; 0x800129 <kb_repeat_count>
    1b06:	30 91 2a 01 	lds	r19, 0x012A	; 0x80012a <kb_repeat_count+0x1>
    1b0a:	23 2b       	or	r18, r19
    1b0c:	51 f4       	brne	.+20     	; 0x1b22 <__vector_10+0xb8>
          kb_repeat_count = kb_repeat_period;
    1b0e:	20 91 2d 01 	lds	r18, 0x012D	; 0x80012d <kb_repeat_period>
    1b12:	30 91 2e 01 	lds	r19, 0x012E	; 0x80012e <kb_repeat_period+0x1>
    1b16:	30 93 2a 01 	sts	0x012A, r19	; 0x80012a <kb_repeat_count+0x1>
    1b1a:	20 93 29 01 	sts	0x0129, r18	; 0x800129 <kb_repeat_count>
          kb_store(in);
    1b1e:	0e 94 d2 06 	call	0xda4	; 0xda4 <kb_store>
        }
      }
      // do housekeeping
      in = kb_curr_value;
    1b22:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <kb_curr_value>
      j = kb_scan_idx;
    1b26:	c0 91 24 01 	lds	r28, 0x0124	; 0x800124 <kb_scan_idx>
#ifdef KB_SCAN_PORTS
      // we broght lines hi, so check for port action.  If we have it, then discard character.
      if(KB_ROW_LO_IN == 0xff && KB_COL_IN == 0xff && in != kb_save[j]) {
    1b2a:	93 b3       	in	r25, 0x13	; 19
    1b2c:	9f 3f       	cpi	r25, 0xFF	; 255
    1b2e:	89 f4       	brne	.+34     	; 0x1b52 <__vector_10+0xe8>
    1b30:	99 b3       	in	r25, 0x19	; 25
    1b32:	9f 3f       	cpi	r25, 0xFF	; 255
    1b34:	71 f4       	brne	.+28     	; 0x1b52 <__vector_10+0xe8>
    1b36:	6c 2f       	mov	r22, r28
    1b38:	70 e0       	ldi	r23, 0x00	; 0
    1b3a:	6c 5e       	subi	r22, 0xEC	; 236
    1b3c:	7e 4f       	sbci	r23, 0xFE	; 254
    1b3e:	fb 01       	movw	r30, r22
    1b40:	90 81       	ld	r25, Z
    1b42:	89 17       	cp	r24, r25
    1b44:	31 f0       	breq	.+12     	; 0x1b52 <__vector_10+0xe8>
#else        
      if(in != kb_save[j]) {
#endif
        kb_decode(in, &kb_save[j], j<<3);
    1b46:	4c 2f       	mov	r20, r28
    1b48:	44 0f       	add	r20, r20
    1b4a:	44 0f       	add	r20, r20
    1b4c:	44 0f       	add	r20, r20
    1b4e:	0e 94 dd 06 	call	0xdba	; 0xdba <kb_decode>
      }
      j = (j + 1) & 0x0f;
    1b52:	cf 5f       	subi	r28, 0xFF	; 255
    1b54:	cf 70       	andi	r28, 0x0F	; 15
      kb_scan_idx = j;
    1b56:	c0 93 24 01 	sts	0x0124, r28	; 0x800124 <kb_scan_idx>
      // we just read, prep now.
      // set pin low:
      tmp = (1 << j);
    1b5a:	81 e0       	ldi	r24, 0x01	; 1
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	02 c0       	rjmp	.+4      	; 0x1b64 <__vector_10+0xfa>
    1b60:	88 0f       	add	r24, r24
    1b62:	99 1f       	adc	r25, r25
    1b64:	ca 95       	dec	r28
    1b66:	e2 f7       	brpl	.-8      	; 0x1b60 <__vector_10+0xf6>
      j = (tmp & 0xff);
      in = (tmp >> 8);
    1b68:	29 2f       	mov	r18, r25
    1b6a:	33 27       	eor	r19, r19
      KB_ROW_LO_DDR = j;
    1b6c:	84 bb       	out	0x14, r24	; 20
      KB_ROW_HI_DDR = in;
    1b6e:	27 bb       	out	0x17, r18	; 23
      KB_ROW_LO_OUT = (uint8_t)~j;
    1b70:	80 95       	com	r24
    1b72:	85 bb       	out	0x15, r24	; 21
      KB_ROW_HI_OUT = (uint8_t)~in;
    1b74:	20 95       	com	r18
    1b76:	28 bb       	out	0x18, r18	; 24
      kb_state = KB_ST_PREP;
    1b78:	81 e0       	ldi	r24, 0x01	; 1
      }
      in = (uint8_t)~KB_COL_IN;
      if(in != kb_port_save[0]) {
        kb_decode(in, &kb_port_save[0], 0x70);
      }
      kb_state = KB_ST_READ;
    1b7a:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <kb_state>
}

void sw_scan(void) {
  uint8_t mask, up, down, in;

  in=(PORT_SW_IN & in_mask);
    1b7e:	15 b1       	in	r17, 0x05	; 5
    1b80:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <in_mask>
    1b84:	18 23       	and	r17, r24
  if(in != cache) {
    1b86:	c0 91 7c 01 	lds	r28, 0x017C	; 0x80017c <cache>
    1b8a:	1c 17       	cp	r17, r28
    1b8c:	09 f4       	brne	.+2      	; 0x1b90 <__vector_10+0x126>
    1b8e:	5a c0       	rjmp	.+180    	; 0x1c44 <__vector_10+0x1da>
    // a key has changed.
    mask = in ^ cache;
    down=cache & mask;
    1b90:	d1 2f       	mov	r29, r17
    1b92:	d0 95       	com	r29
    1b94:	dc 23       	and	r29, r28
    up=in & mask;
    1b96:	c0 95       	com	r28
    1b98:	c1 23       	and	r28, r17
    if(up) {
    1b9a:	41 f1       	breq	.+80     	; 0x1bec <__vector_10+0x182>
      // keys released.
      if(up & 1)   {sw_store(SW_UP | 0);}
    1b9c:	c0 ff       	sbrs	r28, 0
    1b9e:	03 c0       	rjmp	.+6      	; 0x1ba6 <__vector_10+0x13c>
    1ba0:	80 e8       	ldi	r24, 0x80	; 128
    1ba2:	0e 94 63 02 	call	0x4c6	; 0x4c6 <sw_store>
      if(up & 2)   {sw_store(SW_UP | 1);}
    1ba6:	c1 ff       	sbrs	r28, 1
    1ba8:	03 c0       	rjmp	.+6      	; 0x1bb0 <__vector_10+0x146>
    1baa:	81 e8       	ldi	r24, 0x81	; 129
    1bac:	0e 94 63 02 	call	0x4c6	; 0x4c6 <sw_store>
      if(up & 4)   {sw_store(SW_UP | 2);}
    1bb0:	c2 ff       	sbrs	r28, 2
    1bb2:	03 c0       	rjmp	.+6      	; 0x1bba <__vector_10+0x150>
    1bb4:	82 e8       	ldi	r24, 0x82	; 130
    1bb6:	0e 94 63 02 	call	0x4c6	; 0x4c6 <sw_store>
      if(up & 8)   {sw_store(SW_UP | 3);}
    1bba:	c3 ff       	sbrs	r28, 3
    1bbc:	03 c0       	rjmp	.+6      	; 0x1bc4 <__vector_10+0x15a>
    1bbe:	83 e8       	ldi	r24, 0x83	; 131
    1bc0:	0e 94 63 02 	call	0x4c6	; 0x4c6 <sw_store>
      if(up & 16)  {sw_store(SW_UP | 4);}
    1bc4:	c4 ff       	sbrs	r28, 4
    1bc6:	03 c0       	rjmp	.+6      	; 0x1bce <__vector_10+0x164>
    1bc8:	84 e8       	ldi	r24, 0x84	; 132
    1bca:	0e 94 63 02 	call	0x4c6	; 0x4c6 <sw_store>
      if(up & 32)  {sw_store(SW_UP | 5);}
    1bce:	c5 ff       	sbrs	r28, 5
    1bd0:	03 c0       	rjmp	.+6      	; 0x1bd8 <__vector_10+0x16e>
    1bd2:	85 e8       	ldi	r24, 0x85	; 133
    1bd4:	0e 94 63 02 	call	0x4c6	; 0x4c6 <sw_store>
      if(up & 64)  {sw_store(SW_UP | 6);}
    1bd8:	c6 ff       	sbrs	r28, 6
    1bda:	03 c0       	rjmp	.+6      	; 0x1be2 <__vector_10+0x178>
    1bdc:	86 e8       	ldi	r24, 0x86	; 134
    1bde:	0e 94 63 02 	call	0x4c6	; 0x4c6 <sw_store>
      if(up & 128) {sw_store(SW_UP | 7);}
    1be2:	c7 ff       	sbrs	r28, 7
    1be4:	03 c0       	rjmp	.+6      	; 0x1bec <__vector_10+0x182>
    1be6:	87 e8       	ldi	r24, 0x87	; 135
    1be8:	0e 94 63 02 	call	0x4c6	; 0x4c6 <sw_store>
    }
    if(down) {
    1bec:	dd 23       	and	r29, r29
    1bee:	41 f1       	breq	.+80     	; 0x1c40 <__vector_10+0x1d6>
      // keys pressed.
      if(down & 1)   {sw_store(0);}
    1bf0:	d0 ff       	sbrs	r29, 0
    1bf2:	03 c0       	rjmp	.+6      	; 0x1bfa <__vector_10+0x190>
    1bf4:	80 e0       	ldi	r24, 0x00	; 0
    1bf6:	0e 94 63 02 	call	0x4c6	; 0x4c6 <sw_store>
      if(down & 2)   {sw_store(1);}
    1bfa:	d1 ff       	sbrs	r29, 1
    1bfc:	03 c0       	rjmp	.+6      	; 0x1c04 <__vector_10+0x19a>
    1bfe:	81 e0       	ldi	r24, 0x01	; 1
    1c00:	0e 94 63 02 	call	0x4c6	; 0x4c6 <sw_store>
      if(down & 4)   {sw_store(2);}
    1c04:	d2 ff       	sbrs	r29, 2
    1c06:	03 c0       	rjmp	.+6      	; 0x1c0e <__vector_10+0x1a4>
    1c08:	82 e0       	ldi	r24, 0x02	; 2
    1c0a:	0e 94 63 02 	call	0x4c6	; 0x4c6 <sw_store>
      if(down & 8)   {sw_store(3);}
    1c0e:	d3 ff       	sbrs	r29, 3
    1c10:	03 c0       	rjmp	.+6      	; 0x1c18 <__vector_10+0x1ae>
    1c12:	83 e0       	ldi	r24, 0x03	; 3
    1c14:	0e 94 63 02 	call	0x4c6	; 0x4c6 <sw_store>
      if(down & 16)  {sw_store(4);}
    1c18:	d4 ff       	sbrs	r29, 4
    1c1a:	03 c0       	rjmp	.+6      	; 0x1c22 <__vector_10+0x1b8>
    1c1c:	84 e0       	ldi	r24, 0x04	; 4
    1c1e:	0e 94 63 02 	call	0x4c6	; 0x4c6 <sw_store>
      if(down & 32)  {sw_store(5);}
    1c22:	d5 ff       	sbrs	r29, 5
    1c24:	03 c0       	rjmp	.+6      	; 0x1c2c <__vector_10+0x1c2>
    1c26:	85 e0       	ldi	r24, 0x05	; 5
    1c28:	0e 94 63 02 	call	0x4c6	; 0x4c6 <sw_store>
      if(down & 64)  {sw_store(6);}
    1c2c:	d6 ff       	sbrs	r29, 6
    1c2e:	03 c0       	rjmp	.+6      	; 0x1c36 <__vector_10+0x1cc>
    1c30:	86 e0       	ldi	r24, 0x06	; 6
    1c32:	0e 94 63 02 	call	0x4c6	; 0x4c6 <sw_store>
      if(down & 128) {sw_store(7);}
    1c36:	d7 ff       	sbrs	r29, 7
    1c38:	03 c0       	rjmp	.+6      	; 0x1c40 <__vector_10+0x1d6>
    1c3a:	87 e0       	ldi	r24, 0x07	; 7
    1c3c:	0e 94 63 02 	call	0x4c6	; 0x4c6 <sw_store>
    }
    cache = in;
    1c40:	10 93 7c 01 	sts	0x017C, r17	; 0x80017c <cache>
}

void scan_irq(void) {
  kb_scan();
  sw_scan();
  led_divider++;
    1c44:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <led_divider>
    1c48:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <led_divider+0x1>
    1c4c:	01 96       	adiw	r24, 0x01	; 1
  if(led_divider==SCAN_LED_IRQ_DIVIDER) {
    1c4e:	86 35       	cpi	r24, 0x56	; 86
    1c50:	f1 e0       	ldi	r31, 0x01	; 1
    1c52:	9f 07       	cpc	r25, r31
    1c54:	79 f1       	breq	.+94     	; 0x1cb4 <__vector_10+0x24a>
}

void scan_irq(void) {
  kb_scan();
  sw_scan();
  led_divider++;
    1c56:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <led_divider+0x1>
    1c5a:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <led_divider>
    1c5e:	22 cf       	rjmp	.-444    	; 0x1aa4 <__vector_10+0x3a>
      KB_ROW_HI_OUT = (uint8_t)~in;
      kb_state = KB_ST_PREP;
      break;
    case KB_ST_PREP:
      // we just prepped, read.
      kb_curr_value = (uint8_t) ~KB_COL_IN;
    1c60:	89 b3       	in	r24, 0x19	; 25
    1c62:	80 95       	com	r24
    1c64:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <kb_curr_value>
      kb_state = KB_ST_READ;
    1c68:	82 e0       	ldi	r24, 0x02	; 2
    1c6a:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <kb_state>
#ifdef KB_SCAN_PORTS
      // set rows back to input.
      KB_ROW_LO_DDR = 0;
    1c6e:	14 ba       	out	0x14, r1	; 20
      KB_ROW_HI_DDR = 0;
    1c70:	17 ba       	out	0x17, r1	; 23
      KB_ROW_LO_OUT = 0xff;
    1c72:	8f ef       	ldi	r24, 0xFF	; 255
    1c74:	85 bb       	out	0x15, r24	; 21
      KB_ROW_HI_OUT = 0xff;
    1c76:	88 bb       	out	0x18, r24	; 24
      j = kb_scan_idx;
    1c78:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <kb_scan_idx>
      if(j == 0) {
    1c7c:	81 11       	cpse	r24, r1
    1c7e:	7f cf       	rjmp	.-258    	; 0x1b7e <__vector_10+0x114>
        kb_state = KB_ST_READ_PORTS;
    1c80:	83 e0       	ldi	r24, 0x03	; 3
    1c82:	7b cf       	rjmp	.-266    	; 0x1b7a <__vector_10+0x110>
      }
      break;
    case KB_ST_READ_PORTS:
      // read the two ports directly
      in = (uint8_t)~KB_ROW_LO_IN;
    1c84:	83 b3       	in	r24, 0x13	; 19
    1c86:	80 95       	com	r24
      if(in != kb_port_save[1]) {
    1c88:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <kb_port_save+0x1>
    1c8c:	89 17       	cp	r24, r25
    1c8e:	29 f0       	breq	.+10     	; 0x1c9a <__vector_10+0x230>
        kb_decode(in, &kb_port_save[1], 0x78);
    1c90:	48 e7       	ldi	r20, 0x78	; 120
    1c92:	63 e1       	ldi	r22, 0x13	; 19
    1c94:	71 e0       	ldi	r23, 0x01	; 1
    1c96:	0e 94 dd 06 	call	0xdba	; 0xdba <kb_decode>
      }
      in = (uint8_t)~KB_COL_IN;
    1c9a:	89 b3       	in	r24, 0x19	; 25
    1c9c:	80 95       	com	r24
      if(in != kb_port_save[0]) {
    1c9e:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <kb_port_save>
    1ca2:	89 17       	cp	r24, r25
    1ca4:	29 f0       	breq	.+10     	; 0x1cb0 <__vector_10+0x246>
        kb_decode(in, &kb_port_save[0], 0x70);
    1ca6:	40 e7       	ldi	r20, 0x70	; 112
    1ca8:	62 e1       	ldi	r22, 0x12	; 18
    1caa:	71 e0       	ldi	r23, 0x01	; 1
    1cac:	0e 94 dd 06 	call	0xdba	; 0xdba <kb_decode>
      }
      kb_state = KB_ST_READ;
    1cb0:	82 e0       	ldi	r24, 0x02	; 2
    1cb2:	63 cf       	rjmp	.-314    	; 0x1b7a <__vector_10+0x110>
  if(led_divider==SCAN_LED_IRQ_DIVIDER) {
    led_divider=0;
    1cb4:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <led_divider+0x1>
    1cb8:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <led_divider>
    1cbc:	09 cf       	rjmp	.-494    	; 0x1ad0 <__vector_10+0x66>

00001cbe <eeprom_read_byte>:
    1cbe:	e1 99       	sbic	0x1c, 1	; 28
    1cc0:	fe cf       	rjmp	.-4      	; 0x1cbe <eeprom_read_byte>
    1cc2:	9f bb       	out	0x1f, r25	; 31
    1cc4:	8e bb       	out	0x1e, r24	; 30
    1cc6:	e0 9a       	sbi	0x1c, 0	; 28
    1cc8:	99 27       	eor	r25, r25
    1cca:	8d b3       	in	r24, 0x1d	; 29
    1ccc:	08 95       	ret

00001cce <eeprom_write_byte>:
    1cce:	26 2f       	mov	r18, r22

00001cd0 <eeprom_write_r18>:
    1cd0:	e1 99       	sbic	0x1c, 1	; 28
    1cd2:	fe cf       	rjmp	.-4      	; 0x1cd0 <eeprom_write_r18>
    1cd4:	9f bb       	out	0x1f, r25	; 31
    1cd6:	8e bb       	out	0x1e, r24	; 30
    1cd8:	2d bb       	out	0x1d, r18	; 29
    1cda:	0f b6       	in	r0, 0x3f	; 63
    1cdc:	f8 94       	cli
    1cde:	e2 9a       	sbi	0x1c, 2	; 28
    1ce0:	e1 9a       	sbi	0x1c, 1	; 28
    1ce2:	0f be       	out	0x3f, r0	; 63
    1ce4:	01 96       	adiw	r24, 0x01	; 1
    1ce6:	08 95       	ret

00001ce8 <__tablejump2__>:
    1ce8:	ee 0f       	add	r30, r30
    1cea:	ff 1f       	adc	r31, r31
    1cec:	05 90       	lpm	r0, Z+
    1cee:	f4 91       	lpm	r31, Z
    1cf0:	e0 2d       	mov	r30, r0
    1cf2:	09 94       	ijmp

00001cf4 <__prologue_saves__>:
    1cf4:	2f 92       	push	r2
    1cf6:	3f 92       	push	r3
    1cf8:	4f 92       	push	r4
    1cfa:	5f 92       	push	r5
    1cfc:	6f 92       	push	r6
    1cfe:	7f 92       	push	r7
    1d00:	8f 92       	push	r8
    1d02:	9f 92       	push	r9
    1d04:	af 92       	push	r10
    1d06:	bf 92       	push	r11
    1d08:	cf 92       	push	r12
    1d0a:	df 92       	push	r13
    1d0c:	ef 92       	push	r14
    1d0e:	ff 92       	push	r15
    1d10:	0f 93       	push	r16
    1d12:	1f 93       	push	r17
    1d14:	cf 93       	push	r28
    1d16:	df 93       	push	r29
    1d18:	cd b7       	in	r28, 0x3d	; 61
    1d1a:	de b7       	in	r29, 0x3e	; 62
    1d1c:	ca 1b       	sub	r28, r26
    1d1e:	db 0b       	sbc	r29, r27
    1d20:	0f b6       	in	r0, 0x3f	; 63
    1d22:	f8 94       	cli
    1d24:	de bf       	out	0x3e, r29	; 62
    1d26:	0f be       	out	0x3f, r0	; 63
    1d28:	cd bf       	out	0x3d, r28	; 61
    1d2a:	09 94       	ijmp

00001d2c <__epilogue_restores__>:
    1d2c:	2a 88       	ldd	r2, Y+18	; 0x12
    1d2e:	39 88       	ldd	r3, Y+17	; 0x11
    1d30:	48 88       	ldd	r4, Y+16	; 0x10
    1d32:	5f 84       	ldd	r5, Y+15	; 0x0f
    1d34:	6e 84       	ldd	r6, Y+14	; 0x0e
    1d36:	7d 84       	ldd	r7, Y+13	; 0x0d
    1d38:	8c 84       	ldd	r8, Y+12	; 0x0c
    1d3a:	9b 84       	ldd	r9, Y+11	; 0x0b
    1d3c:	aa 84       	ldd	r10, Y+10	; 0x0a
    1d3e:	b9 84       	ldd	r11, Y+9	; 0x09
    1d40:	c8 84       	ldd	r12, Y+8	; 0x08
    1d42:	df 80       	ldd	r13, Y+7	; 0x07
    1d44:	ee 80       	ldd	r14, Y+6	; 0x06
    1d46:	fd 80       	ldd	r15, Y+5	; 0x05
    1d48:	0c 81       	ldd	r16, Y+4	; 0x04
    1d4a:	1b 81       	ldd	r17, Y+3	; 0x03
    1d4c:	aa 81       	ldd	r26, Y+2	; 0x02
    1d4e:	b9 81       	ldd	r27, Y+1	; 0x01
    1d50:	ce 0f       	add	r28, r30
    1d52:	d1 1d       	adc	r29, r1
    1d54:	0f b6       	in	r0, 0x3f	; 63
    1d56:	f8 94       	cli
    1d58:	de bf       	out	0x3e, r29	; 62
    1d5a:	0f be       	out	0x3f, r0	; 63
    1d5c:	cd bf       	out	0x3d, r28	; 61
    1d5e:	ed 01       	movw	r28, r26
    1d60:	08 95       	ret

00001d62 <_exit>:
    1d62:	f8 94       	cli

00001d64 <__stop_program>:
    1d64:	ff cf       	rjmp	.-2      	; 0x1d64 <__stop_program>
